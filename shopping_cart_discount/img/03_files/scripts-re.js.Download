LPP.common.breakpoints = {
    screenXsMin: 320,
    screenSmMin: 480,
    screenMdMin: 768,
    screenLgMin: 992,
    screenXlMin: 1200
};

/**
 *
 * @param {String|Number} breakPoint
 * @param {Boolean} isNumberValue
 */
LPP.common.isScreenSizeMin = function(breakPoint) {
    var possibleBreakPoints = ['Xs', 'Sm', 'Md', 'Lg', 'Xl'];

    if(!isNaN(breakPoint)) {
        return window.matchMedia('(min-width: ' + breakPoint + 'px)').matches;
    }

    if (possibleBreakPoints.indexOf(breakPoint) !== -1) {
        return window.matchMedia('(min-width: ' + LPP.common.breakpoints['screen' + breakPoint + 'Min'] + 'px)').matches;
    }
};
LPP.common.keyCode = {
    enter: 13
};

LPP.common.key = {
    DELETE: 'Delete',
    BACKSPACE: 'Backspace',
    SPACE: ' ',
    ESC: 'Escape',
    LEFT: 'ArrowLeft',
    RIGHT: 'ArrowRight'
};

if (!NodeList.prototype.forEach) {
  NodeList.prototype.forEach = forEachPolyfill;
}

if (!HTMLCollection.prototype.forEach) {
  HTMLCollection.prototype.forEach = forEachPolyfill;
}

function forEachPolyfill(callback) {
  var numberOfElements = this.length,
    itemPosition;

  for (itemPosition = 0; itemPosition < numberOfElements; itemPosition++) {
    callback(this.item(itemPosition));
  }
}

if (!Array.isArray) {
  Array.isArray = function (arg) {
    return Object.prototype.toString.call(arg) === '[object Array]';
  };
}

(function () {
  function toArray() {
    return Array.prototype.slice.call(this, 0);
  }

  if (!NodeList.prototype.toArray) {
    NodeList.prototype.toArray = toArray;
  }

  if (!HTMLCollection.prototype.toArray) {
    HTMLCollection.prototype.toArray = toArray;
  }
})();

LPP.price = LPP.price || {};
/**
 * Formats price based on BE options.
 *
 * Input parameters can be numbers but shouldn't be strings parsed with
 * parseFloat() or Number() directly as input strings might be '1.900' or '1,900'
 * which would be parsed as 1.9 and 1 respectively.
 *
 * @param {(String|Number|Array)} values - values to be formatted
 * @param {Boolean} [shouldGetFloat = undefined]
 * @returns {String}
 */
LPP.price.format = function(values, shouldGetFloat) {
    var price,
        valuesToFormat;

    if (Array.isArray(values) ? !values.join('') : !values) {
        return '';
    }

    valuesToFormat = Array.isArray(values) ? values : [values];

    price = valuesToFormat.reduce(function(price, value) {
        if (typeof value === 'number') {
            value = String(value);
        }
        return price + LPP.price.parseValue(value);
    }, 0);

    if (shouldGetFloat) {
        return price;
    }

    return LPP.price.finalFormat(price);
};

/**
 * @param {String} value
 * @returns {Number}
 */
LPP.price.parseValue = function(value) {
    var groupSeparator,
        decimalSeparator;

    if (!value) {
        return null;
    }

    groupSeparator = LegacyBridge.getStoreConfig('locale/symbols/group');
    decimalSeparator = LegacyBridge.getStoreConfig('locale/symbols/decimal');

    if (groupSeparator) {
        value = value.replace(new RegExp('\\' + groupSeparator + '(?=.{3})', 'g'), '');
    }
    value = value.replace(new RegExp('\\' + decimalSeparator), '.');

    return parseFloat(value);
};

/**
 * @param {Number|String} price
 * @returns {String}
 */
LPP.price.finalFormat = function(price) {
    const PATTERN_DECIMAL = /\.0*$/,
        PATTERN_CUT_OFF = /[^#,0.]*/g;

    var groupRegExp,
        priceParts,
        priceTotal,
        priceDecimal = '',
        pattern,
        groupSeparator,
        decimalSeparator,
        decimalMatch,
        decimalLength,
        isPriceInt,
        groupSeparatorPositions,
        multipleGroupSeparatorRules;

    if (typeof price === 'undefined') {
        return '';
    }

    pattern = LegacyBridge.getStoreConfig('locale/currencyNumber').replace(PATTERN_CUT_OFF, '');
    groupSeparatorPositions = pattern.replace(PATTERN_DECIMAL, '')
                                     .split(',')
                                     .reduce(function(array, value) {
                                         array.push(value.length);
                                         return array;
                                     }, [])
                                     .slice(1);
    multipleGroupSeparatorRules = groupSeparatorPositions.length > 1;

    if (multipleGroupSeparatorRules) {
        groupRegExp = new RegExp('\\d(?=\\d{' + (groupSeparatorPositions[0] + groupSeparatorPositions[1]) + '}$)|' +
            '\\d(?=\\d{' + groupSeparatorPositions[1] + '}$)', 'g');
    } else {
        groupRegExp = new RegExp('\\d(?=(\\d{' + groupSeparatorPositions[0] + '})+$)', 'g');
    }

    decimalMatch = pattern.match(PATTERN_DECIMAL);
    decimalLength = decimalMatch ? decimalMatch[0].length - 1 : 0;
    isPriceInt = decimalLength === 0;

    if (isPriceInt) {
        priceTotal = price.toFixed(0);
    } else {
        priceParts = price.toFixed(decimalLength).split('.');
        priceTotal = priceParts[0];
        priceDecimal = priceParts[1];
    }

    groupSeparator = LegacyBridge.getStoreConfig('locale/symbols/group');
    decimalSeparator = LegacyBridge.getStoreConfig('locale/symbols/decimal');

    priceTotal = priceTotal.replace(groupRegExp, '$&' + groupSeparator);
    price = isPriceInt ? priceTotal : priceTotal + decimalSeparator + priceDecimal;

    return price;
};
/**
 * render Mustache template from html file in templateUrl inside parentNode with variables set in variablesObject
 * @param parentNode
 * @param templateUrl
 * @param [variablesObject]
 */
(function(global) {
    var cache = Object.create(null);

    function getTpl(url) {
        if (cache[url]) {
            return Promise.resolve(cache[url]);
        }
        return fetch(url).then(function(response) { return cache[url] = response.text(); })
    }

    global.setMustacheTemplate = function(parentNode, templateUrl, variablesObject) {
        variablesObject = variablesObject || {};
        return getTpl(templateUrl).then(function(tpl) {
            var html = Mustache.render(tpl, variablesObject);
            parentNode.innerHTML = html;

            return html;
        }).catch(function (err) {
            // brak obsługi błędów
        });
    };
})(LPP.common);

LPP.common.sales.order.history.getOrderDetails = function(url, id, callback) {
    LegacyBridge.fetchData((LPP.common.baseUrl + url), {order_id: id}, 'get')
        .then(function(response) {
            if (!response.ok) {
                throw new Error(response.message);
            }
            callback(response);
        })
        .catch(function(error) {
            console.error(error);
        });
};

/**
 *
 * @param {Object} options
 * @param {string} [options.parentSelector = '.main-content']
 * @param {string} [options.spinnerId = 'spinner']
 * @param {string} [options.spinnerClass = 'spinner-wrapper']
 * @param {string} [options.sizeClass = '']
 * @param {boolean} [options.keepContent = false]
 * @param {boolean} [options.withModal = false]
 * @param {string} [options.headerText]
 */

(function () {
  function isVisible(el) {
    const style = window.getComputedStyle(el, null);
    return style.display !== 'none' && style.visibility === 'visible';
  }

  var promise;
  window.LPP.common.openSpinner = function (options) {
    var spinnerElement,
      spinnerClass,
      spinnerTemplateUrl,
      sizeClass,
      parentSelector,
      keepContent,
      withModal,
      headerText,
      parent,
      spinnerVariablesObject;

    spinnerElement = document.createElement('div');
    spinnerClass = options.spinnerClass || 'spinner-wrapper';
    spinnerTemplateUrl = LPP.common.getSpinnerTemplateUrl();
    sizeClass = options.sizeClass || 'normal';
    parentSelector = options.parentSelector || 'body';
    keepContent = options.keepContent || false;
    withModal = options.withModal || false;
    headerText = options.headerText || '';
    parent = document.querySelector(parentSelector);
    spinnerVariablesObject = {
      isHeaderVisible: headerText !== '',
      headerText: headerText
    };

    spinnerElement.id = options.spinnerId || 'spinner';
    spinnerElement.classList.add(spinnerClass);
    spinnerElement.classList.add(sizeClass);

    return (promise = new Promise(function (resolve, reject) {
      LPP.common
        .setMustacheTemplate(spinnerElement, spinnerTemplateUrl, spinnerVariablesObject)
        .then(function () {
          if (parent.style.position !== 'fixed' && parent.style.position !== 'absolute') {
            parent.style.position = 'relative';
          }

          if (keepContent) {
            parent.insertBefore(spinnerElement, parent.firstChild);
          } else {
            parent.innerHTML = '';
            parent.appendChild(spinnerElement);
          }

          // rzeźba pod mobilne safari :(
          setTimeout(function () {
            const timer = setInterval(function () {
              if (isVisible(spinnerElement)) {
                clearInterval(timer);
                promise = null;
                resolve(true);
              }
            }, 55);
          }, 1000);

          if (withModal) {
            spinnerElement.classList.add('modal');
          }
        })
        .catch(function () {
          reject('Spinner error!');
        });
    }));
  };

  /**
   *
   * @param {Object} options
   * @param {string} [options.errorMessage = '']
   * @param {string} [options.infoHeaderSelector = '.info-header']
   * @param {string} [options.spinnerId = 'spinner']
   */
  window.LPP.common.closeSpinner = function (options) {
    options = options || {};
    var errorMessage = options.errorMessage || '',
      infoHeaderSelector = options.infoHeaderSelector || '.info-header',
      spinnerId = options.spinnerId || 'spinner',
      timeout = 0,
      fadeOutTime = typeof options.fadeOutTime === 'number' ? options.fadeOutTime : 400,
      spinner = document.getElementById(spinnerId),
      infoHeader = spinner ? spinner.querySelector(infoHeaderSelector) : '';

    if (!spinner) {
      return;
    }

    if (errorMessage && infoHeader) {
      timeout = 5000;
      infoHeader.innerHTML = errorMessage;
    }

    if (!timeout && !fadeOutTime) {
      if (spinner.parentNode) {
        spinner.parentNode.removeChild(spinner);
      }
      return;
    }

    setTimeout(function () {
      spinner.classList.add('fade-out');

      setTimeout(function () {
        if (spinner.parentNode) {
          spinner.parentNode.removeChild(spinner);
        }
      }, fadeOutTime);
    }, timeout);
  };

  window.LPP.common.getSpinnerTemplateUrl = function () {
    var brandName = LPP.common.brandName.toLowerCase(),
      localSpinnerTemplateUrl = LPP[brandName].spinnerTemplateUrl;

    if (typeof localSpinnerTemplateUrl !== 'undefined') {
      return localSpinnerTemplateUrl;
    }
    return (
      LPP.common.baseUrl +
      '/skin/frontend/' +
      __FRONTEND_VERSION__ +
      '/base/default/lib/lpp-common/src/components/spinner/spinner.html'
    );
  };
})();

var POPUP_CLASS = 'popup',
    POPUP_ACTIVE_CLASS = 'active',
    POPUP_WRAPPER_CLASS = 'popup-wrapper',
    POPUP_TITLE_CLASS = 'popup-title',
    POPUP_CONTENT_CLASS = 'popup-content',
    POPUP_CLOSE_BUTTON_CLASS = 'popup-close-button',
    POPUP_BACKDROP_ID = 'popupBackdrop',
    POPUP_BACKDROP_CLASS = 'popup-backdrop',
    POPUP_BACKDROP_ACTIVE_CLASS = 'active',
    POPUP_PLACEHOLDER_CLASS = 'popup-placeholder';



/**
 * @param {Object} options
 * @param {String} [options.id = popup-X] - X to wygenerowana wartość
 * @param {String} [options.title = '']
 * @param {String|NodeElement} [options.content]
 * @param {Array} [options.cssClass]
 * @param {Boolean} [options.keepContent = false]
 * @param {Function} [options.onCreateCallback]
 * @param {Function} [options.onOpenCallback]
 * @param {Function} [options.onClosedCallback]
 */
LPP.Popup = function(options) {
    this.id = options.id || this.generateId();
    this.title = options.title ? options.title : '';
    this.content = options.content ? options.content : '';
    this.cssClass = options.cssClass ? options.cssClass : [];
    this.keepContent = typeof options.keepContent === 'boolean' ? options.keepContent : false;
    this.onCreateCallback =  typeof options.onCreateCallback === 'function' ? options.onCreateCallback : function(){};
    this.onOpenCallback =  typeof options.onOpenCallback === 'function' ? options.onOpenCallback : function(){};
    this.onClosedCallback =  typeof options.onClosedCallback === 'function' ? options.onClosedCallback : function(){};
    LPP.Popup.instances[this.id] = this;
};

LPP.Popup.instances = {}; // Obiekt przechowujacy referencje do obiektów typu LPP.Popup
LPP.Popup.currentIdPostfix = 0;

Object.defineProperties(LPP.Popup.prototype, {
    el: {
        get: function() {
            if (!this._el) {
                this._el = document.getElementById(this.id);
            }
            return this._el;
        }
    },
    wrapperEl: {
        get: function() {
            var popupEl = this.el;

            if (!this._wrapperEl && popupEl) {
                this._wrapperEl = popupEl.querySelector('.' + POPUP_WRAPPER_CLASS);
            }
            return this._wrapperEl;
        }
    },
    titleEl: {
        get: function() {
            var popupEl = this.el;

            if (!this._titleEl && popupEl) {
                this._titleEl = popupEl.querySelector('.' + POPUP_TITLE_CLASS);
            }
            return this._titleEl;
        }
    },
    contentEl: {
        get: function() {
            var popupEl = this.el;

            if (!this._contentEl && popupEl) {
                this._contentEl = popupEl.querySelector('.' + POPUP_CONTENT_CLASS);
            }
            return this._contentEl;
        }
    },
    closeButtonEl: {
        get: function() {
            var popupEl = this.el;

            if (!this._closeButtonEl && popupEl) {
                this._closeButtonEl = popupEl.querySelector('.' + POPUP_CLOSE_BUTTON_CLASS);
            }
            return this._closeButtonEl;
        }
    },
    backdropEl: {
        get: function() {
            if (!this._backdropEl) {
                this._backdropEl = document.getElementById(POPUP_BACKDROP_ID);
            }
            return this._backdropEl;
        }
    },
});

LPP.Popup.prototype.open = function() {
    this.disableBodyScroll();
    this.showBackdrop();

    if (!this.el) {
        this.createPopup();
        this.onCreateCallback();
    }

    this.fillPopupContent();
    this.showPopup();
    this.onOpenCallback();
};

LPP.Popup.prototype.close = function() {
    this.hidePopup();
    this.closeBackdrop();
    this.enableBodyScroll();
    this.onClosedCallback();
};

LPP.Popup.prototype.preparePopupLayout = function() {
    var popupEl;

    popupEl = document.createElement('div');
    popupEl.id = this.id;
    popupEl.classList.add(POPUP_CLASS);

    if (this.cssClass.length) {
        popupEl.className += ' ' + this.cssClass.join(' ');
    }

    popupEl.innerHTML = '<div class="' + POPUP_WRAPPER_CLASS + '">'
                            + '<div class="' + POPUP_TITLE_CLASS + '"></div>'
                            + '<div class="' + POPUP_CONTENT_CLASS + '"></div>'
                            + '<div class="' + POPUP_CLOSE_BUTTON_CLASS + '"></div>'
                        + '</div>';

    document.body.appendChild(popupEl);
};

LPP.Popup.prototype.applyPopupActions = function() {
    if (!this.el) {
        return;
    }

    this.el.addEventListener('click', this.close.bind(this));

    if (this.closeButtonEl) {
        this.closeButtonEl.addEventListener('click', this.close.bind(this));
    }

    this.wrapperEl.addEventListener('click', function(event) {
        event.stopPropagation();
    });

    document.addEventListener('keydown', this.closeOnEsc.bind(this));

};

LPP.Popup.prototype.fillPopupContent = function() {
    if (this.titleEl) {
        this.titleEl.innerText = this.title;
    }

    if (!this.contentEl) {
        return;
    }

    if (typeof this.content === 'string') {
        this.contentEl.innerHTML = this.content;
    } else if (this.content instanceof HTMLElement) {
        this.replaceContentElementWithPlaceholder();
    }
};

LPP.Popup.prototype.replaceContentElementWithPlaceholder = function() {
    var placeholderId = this.id + '-placeholder',
        placeholderEl = document.getElementById(placeholderId);

    if (!placeholderEl) {
        placeholderEl = document.createElement('div');
        placeholderEl.id = placeholderId;
        placeholderEl.classList.add(POPUP_PLACEHOLDER_CLASS);
        this.content.parentNode.insertBefore(placeholderEl, this.content);
        this.contentEl.insertAdjacentElement('afterbegin', this.content)
    }
};

LPP.Popup.prototype.undoReplaceContentEl = function() {
    var placeholderEl = document.getElementById(this.id + '-placeholder');

    placeholderEl.parentNode.replaceChild(this.content, placeholderEl);
};

LPP.Popup.prototype.createPopup = function() {
    if (this.el) {
        return;
    }

    this.preparePopupLayout();
    this.applyPopupActions();
};

LPP.Popup.prototype.showPopup = function() {
    if (!this.el) {
        return;
    }

    this.el.classList.add(POPUP_ACTIVE_CLASS);
};

LPP.Popup.prototype.hidePopup = function() {
    if (!this.el) {
        return;
    }

    this.el.classList.remove(POPUP_ACTIVE_CLASS);

    if (!this.keepContent && this.content instanceof HTMLElement) {
        this.undoReplaceContentEl();
    }
};

LPP.Popup.prototype.generateId = function() {
    var postfixValue = this.getNextIdPostfix(),
        popupIdsList = Object.getOwnPropertyNames(LPP.Popup.instances),
        popupId = 'popup-' + postfixValue,
        isExistingElement = (document.getElementById(popupId)) ? true : false;

    if ((popupIdsList.indexOf(popupId) > -1) || isExistingElement) {
        return this.generateId();
    }

    return popupId;
};

LPP.Popup.prototype.getNextIdPostfix = function() {
    return ++LPP.Popup.currentIdPostfix;
};

LPP.Popup.prototype.changeOnCreateCallback = function(newCallbackFunction) {
    this.onCreateCallback = newCallbackFunction;
};

LPP.Popup.prototype.changeOnOpenCallback = function(newCallbackFunction) {
    this.onOpenCallback = newCallbackFunction;
};

LPP.Popup.prototype.changeOnClosedCallback = function(newCallbackFunction) {
    this.onClosedCallback = newCallbackFunction;
};

LPP.Popup.prototype.isOpened = function() {
    if (!this.el) {
        return false;
    }

    return this.el.classList.contains(POPUP_ACTIVE_CLASS);
};

LPP.Popup.prototype.closeOnEsc =  function(event) {
    if ((event.key === 'Escape') && this.isOpened()) {
        this.close();
    }
};

LPP.Popup.prototype.destroyElements = function() {
    if (!this.el) {
        return;
    }
    this.el.parentNode.removeChild(this.el);
};


// BACKDROP METHODS

LPP.Popup.prototype.createBackdrop = function() {
    var bodyEl,
        backdropEl;

    if (this.backdropEl) {
        return;
    }

    bodyEl = document.querySelector('body');
    backdropEl = document.createElement('div');
    backdropEl.id = POPUP_BACKDROP_ID;
    backdropEl.classList.add(POPUP_BACKDROP_CLASS);
    bodyEl.appendChild(backdropEl);
};

LPP.Popup.prototype.showBackdrop = function() {
    this.createBackdrop();
    this.backdropEl.classList.add(POPUP_BACKDROP_ACTIVE_CLASS);
};

LPP.Popup.prototype.closeBackdrop = function() {
    if (!this.backdropEl) {
        return;
    }

    this.backdropEl.classList.remove(POPUP_BACKDROP_ACTIVE_CLASS);
};

// DOCUMENT BODY ACTIONS

LPP.Popup.prototype.disableBodyScroll = function() {
    var bodyEl = document.body;
    bodyEl.style.overflow = 'hidden';
};

LPP.Popup.prototype.enableBodyScroll = function() {
    var bodyEl = document.body;
    bodyEl.style.overflow = 'auto';
};
var rodoPopupActions = {
  init: function () {
    if (!this.isPathExcluded()) {
      this.rodoPopupOverlay = document.getElementById('rodoPopupOverlay');
      this.submitButton = document.getElementById('rodoSubmit');
      this.url = this.submitButton.dataset.url;
      this.actions();
      this.rodoPopupOverlay.style.display = 'block';
      if (typeof jQuery.mCustomScrollbar === 'function') {
        jQuery('#rodoPolicyContent').mCustomScrollbar();
      }
    }
  },
  excludedPages: ['privacy-policy', 'terms', 'help-regulamin'],
  url: '',
  rodoPopupOverlay: null,
  submitButton: null,
  actions: function () {
    this.submitButton.addEventListener('click', this.sendData.bind(this));
  },
  isPathExcluded: function () {
    var path = window.location.pathname.split('/');
    return this.excludedPages.includes(path[path.length - 1]);
  },
  closePopup: function () {
    this.rodoPopupOverlay.style.display = 'none';
    window.onclick = null;
    this.submitButton.removeEventListener('click', this.sendData);
  },
  sendData: function () {
    LegacyBridge.fetchData(this.url, 'accept_privacy=1', 'post')
      .then(function (response) {
        return response.json();
      })
      .then(
        function (json) {
          if (json.status) {
            this.closePopup();
          }
        }.bind(this)
      )
      .catch(function (err) {
        // brak obsługi błędów
      });
  }
};

/**
 * @type {{init: LPP.common.togglePasswordField.init, findToggleWrapper: (function(): (NodeListOf<HTMLElementTagNameMap[string]> | NodeListOf<SVGElementTagNameMap[string]> | NodeListOf<Element>)), getInput: (function(HTMLElement): *), getSwitcher: (function(HTMLElement): *), bindToggle: LPP.common.togglePasswordField.bindToggle, toggle: LPP.common.togglePasswordField.toggle}}
 */
LPP.common.togglePasswordField = {
    init: function() {
        var wrappersPassword = this.findToggleWrapper();
        this.bindToggle(wrappersPassword);
    },
    /**
     * @return {NodeListOf<HTMLElementTagNameMap[string]> | NodeListOf<SVGElementTagNameMap[string]> | NodeListOf<Element>}
     */
    findToggleWrapper: function() {
        return document.querySelectorAll('.password-toggle');
    },
    /**
     * @param  {HTMLElement} wrapper
     */
    getInput: function(wrapper) {
        return wrapper.querySelector('[type="password"]');
    },
    /**
     * @param {HTMLElement} wrapper
     */
    getSwitcher: function(wrapper) {
        return wrapper.querySelector('.show-label');
    },
    /**
     *
     * @param {NodeList} wrappersNodes
     */
    bindToggle: function(wrappersNodes) {
        var nodeIndex,
            node,
            input,
            switcher;

        for (nodeIndex in wrappersNodes) {
            if (wrappersNodes.hasOwnProperty(nodeIndex)) {
                node = wrappersNodes[nodeIndex];
                input = this.getInput(node);
                switcher = this.getSwitcher(node);

                switcher.addEventListener('click', this.toggle.bind(null, input, switcher));
            }
        }
    },
    /**
     *
     * @param {HTMLInputElement} input
     * @param {HTMLSpanElement} switcher
     */
    toggle: function(input, switcher) {
        var shouldHide = switcher.textContent === switcher.dataset.hide;
        switcher.textContent = shouldHide ? switcher.dataset.show : switcher.dataset.hide;
        input.type = shouldHide ? 'password' : 'text';
    }
};
LPP.common.disablePasteForField = {
    wasPaste: false,
    /**
     * @param {string} confirmationId
     * @param {object} [extraConfig={}] - key → value pair where 'key' is the attribute name and 'value' is the attribute value
     * ex. { id: 'objectId', class: 'new object-classes' }
     * existing attributes will be overwritten by extraConfig
     */
    init: function(confirmationId, extraConfig) {
        var confirmation = document.getElementById(confirmationId);
        extraConfig = extraConfig || {};

        if(confirmation) {
            confirmation.addEventListener('paste', this.pasteEventListener.bind(this, confirmationId, extraConfig));
            confirmation.addEventListener('keyup', this.keyupEventListener.bind(this));
        }
    },
    /**
     * @param {string} confirmationId
     * @param {object} extraConfig
     * @param {UIEvent} event
     */
    pasteEventListener: function(confirmationId, extraConfig, event) {
        var nextSibling = event.target.nextElementSibling,
            label = nextSibling;

        this.wasPaste = true;

        if (!nextSibling || nextSibling.getAttribute('for') !== confirmationId) {
            label = document.createElement('label');
        }

        label.classList.add('error');
        label.textContent = global.i18n.input_paste_disable;
        label.setAttribute('for', confirmationId);

        this.setExtraConfigToElement(label, extraConfig);

        event.target.parentNode.insertBefore(label, nextSibling);

        event.preventDefault();
        event.target.classList.add('error');
    },
    /**
     * @param {UIEvent} event
     */
    keyupEventListener: function(event) {
            if(this.wasPaste) {
                event.preventDefault();
                event.stopPropagation();
            }

            if(!event.ctrlKey) {
                this.wasPaste = false;
            }
    },
    /**
     * @param {HTMLElement} element
     * @param {Object} config
     */
    setExtraConfigToElement: function(element, config) {
        Object.keys(config).forEach(function(property) {
            var value = config[property];

            element.setAttribute(property, value);
        });
    }
};
LPP.common.form = LPP.common.form || {};

LPP.common.form.formatInputValueOnBlur = function(inputIds, formatMethod) {
    if (!Array.isArray(inputIds)) {
        inputIds = [inputIds];
    }

    inputIds.forEach(function(id) {
        var input = document.getElementById(id);

        if (!input) {
            return;
        }

        input.addEventListener('blur', function() {
            input.value = formatMethod(input.value);
            jQuery(input).valid();
        });
    });
};

LPP.common.form.formatPostcodeUK = function(postcode) {
    var postcodeWithoutSpaces = postcode.replace(/ /g, '');

    if (postcodeWithoutSpaces.length < 5 || postcodeWithoutSpaces.length > 7) {
        return postcode;
    }

    return postcodeWithoutSpaces.replace(/(\w{3})$/g, ' $1');
};
LPP.common.formSelect = function(selectEl, changeCallback, customStruct) {
    this.selectEl = selectEl;
    this.changeCallback = changeCallback;
    this.isDesktop = true;
    var self = this;

    if (!customStruct && !LegacyBridge.getStoreConfig('geoValidation/enabled')) {
        return;
    }

    if (/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Trident|Opera Mini/i.test(navigator.userAgent)) {
        this.isDesktop = false;

        if (customStruct) {
            this.selectEl.addEventListener('change', function (evt) {
                self.changeCallback(evt.target.value);
            });
            this.changeCallback(this.selectEl.value);
        }
    } else {
        this.createOverlay(customStruct);
    }
};

LPP.common.formSelect.prototype.createOverlay = function(customStruct) {
    var self = this;
    this.selectEl.style.display = 'none';
    this.selectEl.classList.add('hidden');
    this.selectedElement = document.createElement('div');
    this.optionsList = document.createElement('div');
    this.selector = document.createElement('div');
    this.selector.className = 'lppFormSelect ' + this.selectEl.className;
    this.selector.classList.remove('hidden');
    this.showOptions = this.showOptions.bind(this);
    this.closeByClickOutside = this.closeByClickOutside.bind(this);
    this.onChange = this.onChange.bind(this);
    this.clearCurrent = this.clearCurrent.bind(this);
    this.customStruct = customStruct;

    this.optionsList.classList.add('options');
    this.selectedElement.classList.add('selected');

    for (var index in this.selectEl.options) {
        var option = this.selectEl.options[index],
            newOption = document.createElement('div');

        if (option && option.innerHTML) {
            newOption.classList.add('option');
            newOption.setAttribute('value', !customStruct ? option.innerText : option.value);
            newOption.insertAdjacentHTML('afterbegin', option.innerHTML);
            newOption.addEventListener('click', function (event) {
                self.selectOption(event, this);
            });
            this.optionsList.appendChild(newOption);
        }
    }

    this.selector.appendChild(this.selectedElement);
    this.selector.appendChild(this.optionsList);

    this.selectEl.parentNode.insertBefore(this.selector, this.selectEl);

    this.selectedElement.innerHTML = !!this.customStruct ? this.selectEl.options[this.selectEl.selectedIndex].innerHTML : this.selectEl.value;
    this.selectedElement.setAttribute('value', !!this.customStruct ? this.selectEl.options[this.selectEl.selectedIndex].value: this.selectEl.value);
    if (!!this.customStruct) {
        this.changeCallback(this.selectEl.options[this.selectEl.selectedIndex].value);
    }
    this.selectedElement.addEventListener('click', this.showOptions);
    this.selectEl.addEventListener('change', this.onChange);
    document.addEventListener('click', this.closeByClickOutside);
};

LPP.common.formSelect.prototype.closeByClickOutside = function(event) {
    var isClickInside = this.selector.contains(event.target);

    if (!isClickInside) {
        this.hideOptions();
    }
};

LPP.common.formSelect.prototype.clearCurrent = function() {
    var current = this.optionsList.getElementsByClassName('current');
    if (!!current.length) {
        current[0].classList.remove('current');
    }
};

LPP.common.formSelect.prototype.onChange = function() {
    this.selectedElement.innerText = !!this.customStruct ? this.selectEl.innerHTML : this.selectEl.value;
};

LPP.common.formSelect.prototype.showOptions = function() {
    this.optionsList.classList.add('active');
    this.selector.classList.add('active');
};

LPP.common.formSelect.prototype.hideOptions = function() {
    this.optionsList.classList.remove('active');
    this.selector.classList.remove('active');
};

LPP.common.formSelect.prototype.selectOption = function(event, option) {
    event.stopPropagation();
    this.clearCurrent();
    option.classList.add('current');

    this.changeCallback(!!this.customStruct ? option.getAttribute('value') : event.target.getAttribute('value'));
    this.selectedElement.innerHTML = option.innerHTML;
    this.hideOptions();
};

LPP.common.formSelect.prototype.changeValue = function(value) {
    this.selectedElement.innerHTML = value;
};

LPP.common.formSelect.prototype.disable = function(isDisabled) {
    if (!LegacyBridge.getStoreConfig('geoValidation/enabled')) {
        return;
    }

    if (this.isDesktop) {
        this.selectedElement.innerHTML = !!this.customStruct ? this.selectEl.innerHTML : this.selectEl.value;
        this.selector.classList.remove('disabled');
        if (isDisabled) {
            this.selector.classList.add('disabled');
        }
    }
};
if (!LPP.common) {
    LPP.common = {};
}

LPP.common.GeoValidation = function(
    defaultRules,
    useDefaultRules,
    formValidation,
    phoneConfig,
    preventCloseEl,
    addinationalFields,
    usePhoneExact
) {

    var that = this;
    this.enabled = LegacyBridge.getStoreConfig('geoValidation/enabled');
    this.commonPattern = LegacyBridge.getStoreConfig('geoValidation/commonPattern');
    this.defaultPhone = LegacyBridge.getStoreConfig('geoValidation/defaultDialCode');
    this.phonePattern = LegacyBridge.getStoreConfig('geoValidation/phonePattern');
    this.postCodePattern = LegacyBridge.getStoreConfig('geoValidation/postCodePattern');
    this.fields = formValidation;
    this.additionalRules = {};
    this.defaultRules = jQuery.extend(true, {}, defaultRules);
    this.changePhoneRule = this.changePhoneRule.bind(this);
    this.closeByClickOutside = this.closeByClickOutside.bind(this);
    this.changeCallback = this.changeCallback.bind(this);
    this.useDefaultRules = useDefaultRules;
    this.preventCloseEl = preventCloseEl;
    this.addinationalFields = addinationalFields;
    this.usePhoneExact = usePhoneExact;
    this.tooltipCourierText = LegacyBridge.getStoreConfig('geoValidation/tooltipCourierText');
    this.tooltipPickupText = LegacyBridge.getStoreConfig('geoValidation/tooltipText');

    if (phoneConfig) {
        this.phoneConfig = phoneConfig;
        if (!this.formSelect && this.phoneConfig.dialCodeEl) {
            this.formSelect = new LPP.common.formSelect(this.phoneConfig.dialCodeEl, this.changeCallback);
        }
    }

    if (!useDefaultRules && this.enabled) {
        this.fields.forEach(function(ruleValidation) {
            that.additionalRules[ruleValidation.field] = that.commonPattern;
            that.additionalRules[ruleValidation.field].normalizer = function(value) {
                return value.replace(/^\s+|\s+$/g, '');
            };

            if (ruleValidation.validator === 'postcode') {
                that.additionalRules[ruleValidation.field] = Object.assign({}, that.commonPattern, that.postCodePattern);
            }
        });

        return this;
    }

    this.fields.forEach(function(ruleValidation) {
        that.additionalRules[ruleValidation.field] = that.defaultRules[ruleValidation.validator];
    });

    return this;
};

LPP.common.GeoValidation.prototype.additionalRules = {};
LPP.common.GeoValidation.prototype.phoneConfig = {};
LPP.common.GeoValidation.prototype.fields = {};
LPP.common.GeoValidation.prototype.defaultRules = {};

LPP.common.GeoValidation.prototype.getRules = function() {
    return this.additionalRules;
};

LPP.common.GeoValidation.prototype.changeCallback = function(value) {
    this.phoneConfig.dialCodeEl.value = value;
    this.changePhoneRule();
};

LPP.common.GeoValidation.prototype.changePhoneRule = function() {
    if (!this.enabled) {
        return;
    }
    if (!this.preventChangeRule) {
        this.changeRuleTo(this.validator, this.phoneConfig.dialCodeEl.value == this.defaultPhone);
    }

    if (this.phoneConfig.phoneEl.value.length) {
        this.validator.element(this.phoneConfig.phoneElName);
    }
};

LPP.common.GeoValidation.prototype.changeRuleTo = function(validator, isDefaultValidation) {
    if (!this.enabled) {
        return;
    }

    jQuery(this.phoneConfig.phoneElName).rules('remove');

    if (isDefaultValidation) {
        jQuery(this.phoneConfig.phoneElName).rules('add', this.usePhoneExact ? this.defaultRules.phone_exact : this.defaultRules.phone);
    } else {
        jQuery(this.phoneConfig.phoneElName).rules('add', this.phonePattern);
    }
};

LPP.common.GeoValidation.prototype.checkValidation = function(validator) {
    this.closeError();
    this.validator = validator;
    this.fields.forEach(function(ruleValidation) {
        var fieldEl = document.getElementsByName(ruleValidation.field)[0];

        if (fieldEl && fieldEl.value) {
            validator.element('[name="' + ruleValidation.field + '"]');
        }
    });

    if (this.phoneConfig && this.phoneConfig.dialCodeEl && this.phoneConfig.phoneEl) {
        this.changePhoneRule(validator);

        this.phoneConfig.dialCodeEl.onchange = function(el) {
            this.changePhoneRule(validator);
        }.bind(this);
    }
};

LPP.common.GeoValidation.prototype.appendChild = function (elementsList, errorElements, appendTo) {
    elementsList.forEach(function(elementName) {
        errorElements[appendTo].appendChild(errorElements[elementName]);
    })
};

LPP.common.GeoValidation.prototype.createElWithClass = function (tag, elementClass, text) {
    var newElement = document.createElement(tag);

    if (elementClass) {
        newElement.classList.add(elementClass);
    }

    if (text) {
        newElement.innerHTML = text;
    }

    return newElement;
};

LPP.common.GeoValidation.prototype.displayError = function() {
    var errorElements = {
            WrapperEl: this.createElWithClass('div', 'validation-global-error'),
            TextWrapperEl: this.createElWithClass('div', 'validation-text-wrapper'),
            TextEl: this.createElWithClass('span', false, LegacyBridge.getStoreConfig('geoValidation/contactText')),
            InfoIconEl: this.createElWithClass('div', 'info-icon'),
            CloseEl: this.createElWithClass('div', 'close-button'),
            EmptyEl: this.createElWithClass('div', 'empty-spacing')
        },
        self = this;

    this.errWrapper = document.getElementById('validationInvoiceError');

    if (this.errWrapper) {
        this.errWrapper.style.display = '';
        return;
    }

    if (!this.enabled) {
        return;
    }

    this.appendChild(['InfoIconEl', 'TextEl'], errorElements, 'TextWrapperEl');
    this.appendChild(['EmptyEl', 'TextWrapperEl', 'CloseEl'], errorElements, 'WrapperEl');
    this.errWrapper = errorElements.WrapperEl;

    this.errWrapper.id = 'validationInvoiceError';
    document.body.appendChild(this.errWrapper);

    errorElements.CloseEl.addEventListener('click', function (event) {
        self.closeError();
    }, false);

    document.addEventListener('click', self.closeByClickOutside);
};

LPP.common.GeoValidation.prototype.tryDisplayError = function(errors) {
    var hasError = false,
        self = this;

    if (!this.useDefaultRules) {
        return;
    }

    Object.keys(errors).forEach(function (k) {
        if ((errors[k] && self.getRulesFieds().includes(k))
            || (errors[k] && self.addinationalFields && self.addinationalFields.includes(k))) {

            hasError = true;
            return;
        }
    });

    if (hasError) {
        this.displayError();
    } else {
        this.closeError();
    }
};

LPP.common.GeoValidation.prototype.closeByClickOutside = function (event) {
    var isClickInside = this.errWrapper.contains(event.target);

    if (
        !isClickInside
        && this.preventCloseEl
        && this.errWrapper.style.display == ''
        && window.innerWidth < 768
        && !event.target.matches(this.preventCloseEl + ', ' + this.preventCloseEl + ' *')
    ) {
        this.closeError();
    }
};

LPP.common.GeoValidation.prototype.closeError = function() {
    if (this.errWrapper) {
        this.errWrapper.style.display = 'none';
    }
};

LPP.common.GeoValidation.prototype.createTooltip = function() {
    if (this.tooltipCreated || !this.enabled) {
        return;
    }

    this.tooltipElement = document.getElementById('geoValidationTooltip');

    if (!this.tooltipElement) {
        return;
    }

    this.tooltipElement.classList.add('validationTooltip');
    while (this.tooltipElement.firstChild) {
        this.tooltipElement.removeChild(this.tooltipElement.firstChild);
    }

    this.tooltipElement.appendChild(this.createElWithClass('div', 'toolTipContent'));
    this.tooltipEnter = this.tooltipEnter.bind(this);
    this.tooltipLeave = this.tooltipLeave.bind(this);

    this.tooltipElement.addEventListener('mouseover', this.tooltipEnter, false);
    this.tooltipElement.addEventListener('mouseleave', this.tooltipLeave, false);
    this.tooltipCreated = true;
};

LPP.common.GeoValidation.prototype.courierTooltip = function(isCourierTooltip) {
    var tooltipContentWrapper = this.tooltipElement.childNodes[0];
    tooltipContentWrapper.innerText = isCourierTooltip ? this.tooltipCourierText : this.tooltipPickupText;
};

LPP.common.GeoValidation.prototype.tooltipEnter = function() {
    this.tooltipElement.classList.add('active');
};

LPP.common.GeoValidation.prototype.tooltipLeave = function() {
    this.tooltipElement.classList.remove('active');
};

LPP.common.GeoValidation.prototype.getRulesFieds = function() {

    return Object.keys(this.additionalRules);
};

if (global.vkontakte.isEnabled) {
  window.addEventListener('DOMContentLoaded', function () {
    var vkLoginButton = document.getElementById('vkontakteLoginButton');

    if (vkLoginButton) {
      vkLoginButton.addEventListener('click', function (event) {
        event.preventDefault();
        window.open('https://oauth.vk.com/authorize?client_id=' + global.vkontakte.appId + '&display=popup&redirect_uri=' + global.vkontakte.redirectUrl + '&scope=email&response_type=code&v=5.67', 'VKontakte login popup', 'height=200,width=350');
      });
    }
  });
}
var baseRequest = {
        apiVersion: 2,
        apiVersionMinor: 0
    },
    cardPaymentMethod = {
        type: 'CARD',
        parameters: {
            allowedAuthMethods: LPP.common.payments.googlepay.allowedCardAuthMethods,
            allowedCardNetworks: LPP.common.payments.googlepay.allowedCardNetworks
        },
        tokenizationSpecification: {
            type: 'PAYMENT_GATEWAY',
            parameters: {
                'gateway': 'payu',
                'gatewayMerchantId': LPP.common.payments.googlepay.posId
            }
        }
    },
    paymentsClient = null;

function getGooglePaymentDataRequest() {
    var paymentDataRequest = Object.assign({}, baseRequest);
    paymentDataRequest.allowedPaymentMethods = [cardPaymentMethod];
    paymentDataRequest.transactionInfo = {};
    paymentDataRequest.merchantInfo = {
        merchantId: LPP.common.payments.googlepay.merchantId,
        merchantName: LPP.common.payments.googlepay.merchantName
    };
    return paymentDataRequest;
}

function getGooglePaymentsClient() {
    if (paymentsClient === null) {
        paymentsClient = new google.payments.api.PaymentsClient({environment: LPP.common.payments.googlepay.environment});
    }
    return paymentsClient;
}

function getGoogleTransactionInfo() {
    return LPP.common.payments.googlepay.getPriceFromQuote().then(function(response) {
        return {
            countryCode: LegacyBridge.getStoreConfig('general/country/code').toUpperCase(),
            currencyCode: response.currencyCode,
            totalPriceStatus: 'FINAL',
            totalPrice: response.totalPrice
        }
    });
}

LPP.common.payments.googlepay.sendRequest = function(options) {
    options.beforeRequestCallback && options.beforeRequestCallback();

    var paymentDataRequest = getGooglePaymentDataRequest();

    getGoogleTransactionInfo().then(function(response) {
        paymentDataRequest.transactionInfo = response;
        return paymentDataRequest;
    }).then(function(paymentDataRequest) {
        getGooglePaymentsClient()
            .loadPaymentData(paymentDataRequest)
            .then(function(paymentData) {
                LPP.common.payments.googlepay.submitCheckoutAsAjax(paymentData.paymentMethodData.tokenizationData.token, options.form);
            })
            .catch(function() {
                options.afterRequestCallback && options.afterRequestCallback();
            });
    });
};

LPP.common.payments.googlepay.submitCheckoutAsAjax = function(token, form) {

    var data = jQuery(form).serializeArray();
    data.push({'name': 'token', 'value': token});

    var fetch = new Promise(function(resolve, reject) {
        jQuery.ajax({
            url: LPP.common.checkout.order.submit,
            data: jQuery.param(data),
            method: 'POST'
        }).done(function(response) {
            resolve(response);
        }).fail(function(error) {
            reject(error);
        });
    });

    return fetch.then(function(response) {
        window.location.href = response.url;
    }).catch(function(err) {
        window.location.href = LPP.common.checkout.order.error;
    });
};

LPP.common.payments.googlepay.getPriceFromQuote = function() {
    return fetch(LPP.common.baseUrl + 'checkout/order/summary', {
        method: 'POST',
        credentials: 'include',
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded'
        }
    })
    .then(function(response) {
        return response.json();
    })
    .then(function(response) {
        return {
            totalPrice: response.totalPrice,
            currencyCode: response.currencyCode
        }
    })
    .catch(function() {
        window.location = LPP.common.checkout.order.error;
    })
};

LPP.common.payments.googlepay.isPaymentChecked = function(selector) {
    var element = document.querySelector(selector);

    if (!element) {
        return false;
    }
    return element.checked;
};

var lppShared = lppShared  || {};

lppShared.newsletter = {
  cookieName: 'newsletterCookie=',
  setCookie: function(value) {
    var day = new Date(),
      expires = 'expires=';

    day.setTime(day.getTime() + (30 * 24 * 60 * 60 * 1000));
    expires += day.toUTCString();

    document.cookie = this.cookieName + value + '; ' + expires + '; path=/';
  },
  getCookieValue: function() {
    var cookies = document.cookie.split(';'),
      cookiesNumber = cookies.length,
      i,
      cookie;

    for (i = 0; i < cookiesNumber; i++) {
      cookie = cookies[i].trim();

      if (cookie.indexOf(this.cookieName) == 0) {
        return cookie.substring(this.cookieName.length);
      }
    }
    return '';
  },
  checkCookie: function(force) {
    var currentCookieValue = this.getCookieValue(),
      $popup;
    if (/newsletter|subscri|checkout/.exec(document.location.href)) {
      return false;
    }
    var isLogged = LPP.isLogged || undefined,
      isSubscribed = LPP.isSubscribed || undefined;
    if (isLogged && isSubscribed) {
      this.setCookie(3);
      return;
    }

    if (currentCookieValue === '' && !force) {
      this.setCookie(1);
    } else if (parseInt(currentCookieValue) === 1 && !force) {
      this.setCookie(parseInt(++currentCookieValue));
    } else if (parseInt(currentCookieValue) === 2 || force) {
      $popup = jQuery('.newsletter-popup');
      $popup.show();

      this.bindPopupActions($popup);
      this.completeSubscriptionPlace($popup);
      this.gtmNewsletterPopupShown();

      if (!force) {
        this.setCookie(3);
      }
    }
  },
  gtmNewsletterPopupShown: function () {
    window.dataLayer = window.dataLayer || [];
    window.dataLayer.push({'event':'newsletter', 'action': 'view', 'label': 'popup'});
  },
  completeSubscriptionPlace: function($popup) {
    var placeInput = $popup.find('.ai-subscription-place');
    if (placeInput.length){
      placeInput.val('popup');
    }
  },
  bindPopupActions: function($popup) {
    var cmsBlock = jQuery('.popup-cms-block-nl'),
      closePopup = function() {
        $popup.hide();
      };

    $popup.find('.close').click(function() {
      closePopup();
    });

    $popup.click(function(event) {
      if (event.target == this) {
        closePopup();
      }
    });

    cmsBlock.click(function(event) {
      if (event.target == this) {
        closePopup();
      }
    });
  }
};
/**
 *
 * @param {Object} options
 * @param {string} options.message
 * @param {string} [options.parentSelecor = 'body']
 * @param {boolean} [options.isSuccess = true]
 */
LPP.reserved.modal = function(options) {
  var parentSelector = options.parentSelector || 'body',
    parent = document.querySelector(parentSelector),
    modal = parent.querySelector('.modal-box'),
    isSuccess = typeof options.isSuccess === 'boolean' ? options.isSuccess : true;

  if (modal) {
    removeModal(modal);
  }

  modal = document.createElement('div');

  if (parentSelector !== 'body') {
    parent.classList.add('modal-parent');
    modal.classList.add('inside-container');
  }
  modal.classList.add('modal-box');
  modal.innerHTML = '<div><h3 class="message">' + options.message + '</h3><span class="status-icon"></span></div>';

  if (isSuccess) {
    modal.classList.add('success');
  } else {
    modal.classList.add('error');
  }

  parent.appendChild(modal);
  modal.classList.add('modal-in');

  setTimeout(function() {
    removeModal(modal);
  }, 5000);

  removeModal = function(modalToRemove) {
    var modalParent = modalToRemove.parentNode;

    modalToRemove.classList.remove('modal-in');
    modalToRemove.classList.add('modal-out');

    if (modalParent) {
      setTimeout(function() {
        modalParent.classList.remove('modal-parent');
        modalParent.removeChild(modalToRemove);
      }, 300);
    }
  };
};

LPP.reserved.ajaxHandlers = {
  error: function(data, status) {
    if (status === 'timeout') {
      LPP.common.closeSpinner(global.i18n.timeout_error);
    }
  },
};

LPP.reserved.consts = {
  ajaxTimeout: 30000,
};

function findParentWithClass(element, parentClass) {
  var parentEl = element.parentElement;

  if (parentEl.classList.contains(parentClass)) {
    return parentEl;
  } else if (parentEl.nodeName !== 'BODY') {
    return findParentWithClass(parentEl, parentClass);
  }
  return null;
}

function findParentByNodeType(element, parentNodeType) {
  var parentEl = element.parentElement;

  if (parentEl.nodeName === parentNodeType.toUpperCase()) {
    return parentEl;
  } else if (parentEl.nodeName !== 'BODY') {
    return findParentByNodeType(parentEl, parentNodeType);
  }
  return null;
}

function checkElementVisibilityById(elementId) {
  var el = document.getElementById(elementId);

  if (!el) {
    return false;
  }

  return el.style.display !== 'none' && el.style.visibility !== 'hidden' && el.offsetWidth > 0 && el.offsetHeight > 0;
}

function checkNodeVisibility(nodeEl) {
  if (!nodeEl) {
    return false;
  }

  return (
    nodeEl.style.display !== 'none' &&
    nodeEl.style.visibility !== 'hidden' &&
    nodeEl.offsetWidth > 0 && nodeEl.offsetHeight > 0
  );
}

/**
 * Funkcja służy do opóżnienia wywołania funkcji 'func' i przerwaniu pierwszego wywołania jeśli nastąpiło kolejne wywołanie przed uplynieciem czasu 'wait'
 * @param {Function} func - funkcja która ma zostać wywołana z opóźnieniem
 * @param {Number} wait - opóźnienie po którym zostanie wywołana funkcja
 * @param {Boolean} [immediate] - wymusza wywołanie funkcji po upływie czasu 'wait'
 */
function debounce(func, wait, immediate) {
  var timeout;

  return function() {
    var context = this,
      args = arguments;

    var later = function() {
      timeout = null;

      if (!immediate) {
        func.apply(context, args);
      }
    };

    var callNow = immediate && !timeout;
    clearTimeout(timeout);
    timeout = setTimeout(later, wait);

    if (callNow) {
      func.apply(context, args);
    }
  };
}

/**
 * Funkcja zamienia wszystkie wystąpienia 'textToFind' w 'baseText' i zamienia je na 'textToReplace'
 * @param {String} [baseText]
 * @param {String} [textTofind]
 * @param {String} [textToReplace]
 */
function replaceString(baseText, textTofind, textToReplace) {
  return baseText.replace(new RegExp(textTofind, 'g'), textToReplace);
}

// HANDLER FUNCTIONS DEFINITIONS

var handleAccordions = function() {
  var accordions = document.getElementsByClassName('accordion'),
    accordionsIndex,
    categoryHeaders,
    categoryHeadersIndex;

  if (!accordions) {
    return;
  }

  for (accordionsIndex = 0; accordionsIndex < accordions.length; accordionsIndex++) {
    categoryHeaders = accordions[accordionsIndex].querySelectorAll('.accordion-cat-title');

    for (categoryHeadersIndex = 0; categoryHeadersIndex < categoryHeaders.length; categoryHeadersIndex++) {
      categoryHeaders[categoryHeadersIndex].onclick = toggleCategory;
    }
  }

  function toggleCategory() {
    this.classList.toggle('active');
    this.nextElementSibling.classList.toggle('show');
  }
};

var handleValidatingZebraDatePicker = function() {
  var datePickers = document.getElementsByClassName('Zebra_DatePicker_Icon_Wrapper');

  datePickers.forEach(function(datePicker) {
    var parentClass = 'input-wrapper',
      parentEl = findParentWithClass(datePicker, parentClass),
      validationIconWrapper,
      validationIconNode;

    if (parentEl) {
      validationIconWrapper = parentEl.querySelector('.validation-icon');
    }

    if (validationIconWrapper) {
      datePicker.appendChild(validationIconWrapper);
    } else {
      validationIconNode = document.createElement('span');
      validationIconNode.classList.add('validation-icon');
      datePicker.appendChild(validationIconNode);
    }
  });
};

/**
 * Funkcja fix rozwiązująca problem z odpowiednim reagowaniem na touch dla Safari
 */
var handleTouchOnIOS = function() {
  var userAgent = navigator.userAgent.toLowerCase();

  if (userAgent.indexOf('safari') !== -1) {
    window.addEventListener('touchstart', function() {});
  }
};

jQuery.getCachedScript = function (url, options) {
  options = jQuery.extend(options || {}, {
    dataType: 'script',
    cache: true,
    url: url
  });

  return jQuery.ajax(options);
};

var ValidationManager = {
  locationPathname: location.pathname.split('/'),
  getStoreCountry: function () {
    return this.locationPathname[1].toUpperCase();
  },
  getStoreLanguage: function () {
    return this.locationPathname[2];
  },
  templatePath: '/skin/frontend/' + __FRONTEND_VERSION__ + '/narch/legacy-front/',
  rmaCharacterSet:
    /^[0-9a-zA-ZąłńćśźżóęŚÓŁŃĆĘŹŻĄüöäÜÖÄßáčďéěíňóřšťúůýžÁČĎÉĚÍŇÓŘŠŤÚŮÝŽäĺľôŕÄĹĽÔŔāēģīķļņŗūĀĒĢĪĶĻŅŖŪąęėįųĄĘĖĮŲõöüÕÖÜćđĆĐăâîşţĂÂÎŞŢãőűÃŐŰабвгдежзийклмнопрстуфхцчшщъыьэюяАБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯȘșȚț]+$/i,
  basicCharacterSet:
    '[-a-zA-ZąłńćśźżóęŚÓŁŃĆĘŹŻĄüöäÜÖÄßáčďéěíňóřšťúůýžÁČĎÉĚÍŇÓŘŠŤÚŮÝŽäĺľôŕÄĹĽÔŔāēģīķļņŗūĀĒĢĪĶĻŅŖŪąęėįųĄĘĖĮŲõöüÕÖÜćđĆĐăâîşţĂÂÎŞŢãőűÃŐŰабвгдежзийклмнопрстуфхцчшщъыьэюяАБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯȘșȚț. ]+',
  basicCharacterSetWithSlash:
    '[-/a-zA-ZąłńćśźżóęŚÓŁŃĆĘŹŻĄüöäÜÖÄßáčďéěíňóřšťúůýžÁČĎÉĚÍŇÓŘŠŤÚŮÝŽäĺľôŕÄĹĽÔŔāēģīķļņŗūĀĒĢĪĶĻŅŖŪąęėįųĄĘĖĮŲõöüÕÖÜćđĆĐăâîşţĂÂÎŞŢãőűÃŐŰабвгдежзийклмнопрстуфхцчшщъыьэюяАБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯȘșȚț. ]+',
  basicCharacterSetWithNumbers:
    '[0-9-/a-zA-ZąłńćśźżóęŚÓŁŃĆĘŹŻĄüöäÜÖÄßáčďéěíňóřšťúůýžÁČĎÉĚÍŇÓŘŠŤÚŮÝŽäĺľôŕÄĹĽÔŔāēģīķļņŗūĀĒĢĪĶĻŅŖŪąęėįųĄĘĖĮŲõöüÕÖÜćđĆĐăâîşţĂÂÎŞŢãőűÃŐŰабвгдежзийклмнопрстуфхцчшщъыьэюяАБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯȘșȚț. ]+',
  basicCharacterSetWithNumbersOptional:
    '[0-9-/a-zA-ZąłńćśźżóęŚÓŁŃĆĘŹŻĄüöäÜÖÄßáčďéěíňóřšťúůýžÁČĎÉĚÍŇÓŘŠŤÚŮÝŽäĺľôŕÄĹĽÔŔāēģīķļņŗūĀĒĢĪĶĻŅŖŪąęėįųĄĘĖĮŲõöüÕÖÜćđĆĐăâîşţĂÂÎŞŢãőűÃŐŰабвгдежзийклмнопрстуфхцчшщъыьэюяАБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯȘșȚț.& ]*'
};

jQuery(document).ready(function () {
  jQuery.validator.addMethod('accept', function (value, element, param) {
    return value.match(new RegExp('^' + param + '$'));
  });

  //Validation clear
  jQuery.fn.clearValidation = function () {
    var v = $(this).validate();
    $('[name]', this).each(function () {
      v.successList.push(this);
      v.showErrors();
    });
    v.resetForm();
    v.reset();
  };

  jQuery.validator.addMethod('exactlength', function (value, element, param) {
    return this.optional(element) || value.length == param;
  });

  jQuery.validator.addMethod('zipcodecountry', function (value, element, param) {
    return value.match(new RegExp('^[0-9]{2}-[0-9]{3}$'));
  });

  jQuery.validator.addMethod('minValue', function (value, element, param) {
    return (
      (jQuery('.count-counter-' + jQuery(element).data('counter')).val() == 0 && jQuery(element).val() == 0) ||
      (jQuery('.count-counter-' + jQuery(element).data('counter')).val() > 0 && jQuery(element).val() != 0) ||
      jQuery('.count-counter-' + jQuery(element).data('counter')).val() == 0
    );
  });

  jQuery.extend(jQuery.validator.messages, {
    required: global.i21v.field_req,
    remote: global.i21v.email_exist,
    email: global.i21v.enter_valid_email,
    url: 'Please enter a valid URL.',
    date: 'Please enter a valid date.',
    dateISO: 'Please enter a valid date (ISO).',
    number: 'Please enter a valid number.',
    digits: global.i21v.digits,
    creditcard: 'Please enter a valid credit card number.',
    equalTo: global.i21v.same_value_req,
    accept: global.i21v.enter_valid,
    maxlength: jQuery.validator.format(global.i21v.enter_valid_max),
    minlength: jQuery.validator.format(global.i21v.enter_valid_min),
    rangelength: jQuery.validator.format('Please enter a value between {0} and {1} characters long.'),
    range: jQuery.validator.format('Please enter a value between {0} and {1}.'),
    max: jQuery.validator.format('Please enter a value less than or equal to {0}.'),
    min: global.i21v.topic_select,
    regulations: global.i21v.regulations_req,
    pattern: global.i21v.invalid_format,
    zipcodecountry: global.i21v.invalid_format,
    rmaitemqty: global.i21v.field_req,
    minValue: global.i21v.topic_select,
    rmacomplainttext: global.i21v.field_req,
    rmareturntext: global.i21v.field_req,
    returnminlength: global.i21v.min_10_chars,
    exactlength: global.i21v.exact_length
  });

  newsletterValidation();
  searchOrderForm();
});

function isValidEmailAddress(emailAddress) {
  var pattern = new RegExp(
    /^(("[\w-+\s]+")|([\w-+]+(?:\.[\w-+]+)*)|("[\w-+\s]+")([\w-+]+(?:\.[\w-+]+)*))(@((?:[\w-+]+\.)*\w[\w-+]{0,66})\.([a-z]{2,6}(?:\.[a-z]{2})?)$)|(@\[?((25[0-5]\.|2[0-4][\d]\.|1[\d]{2}\.|[\d]{1,2}\.))((25[0-5]|2[0-4][\d]|1[\d]{2}|[\d]{1,2})\.){2}(25[0-5]|2[0-4][\d]|1[\d]{2}|[\d]{1,2})\]?$)/i
  );
  return pattern.test(emailAddress);
}
function newsletterValidation() {
  jQuery('#newsletter-validate-detail').validate({
    rules: {
      'newsletter-accept': {
        required: true
      },
      'email-input': {
        required: true,
        email: true
      }
    },
    messages: {
      'newsletter-accept': {
        required: global.i21v.regulations_req
      },
      'email-input': {
        required: global.i21v.newletter_req
      }
    }
  });

  jQuery('#newsletter-checkout').validate({
    rules: {
      'newsletter-accept': {
        required: true
      },
      'email-input': {
        required: true,
        email: true
      }
    },
    messages: {
      'newsletter-accept': {
        required: global.i21v.regulations_req
      },
      'email-input': {
        required: global.i21v.newletter_req
      }
    }
  });

  jQuery('#newsletter-cms').validate({
    rules: {
      'newsletter-accept': {
        required: true
      },
      'email-input': {
        required: true,
        email: true
      }
    },
    messages: {
      'newsletter-accept': {
        required: global.i21v.regulations_req
      },
      'email-input': {
        required: global.i21v.newletter_req
      }
    }
  });
}

function searchOrderForm() {
  var sForm = jQuery('#modal-search-order form');
  jQuery('#modal-search-order').hide();

  jQuery('.cmspage a.btn').on('click', function () {
    if (jQuery(this).data('target') == '#modal-search-order') {
      jQuery('#modal-search-order form').clearValidation();
      jQuery('#modal-search-order input').each(function () {
        jQuery(this).val('');
        jQuery(this).removeClass('valid');
      });
    }
  });

  sForm.validate({
    ignore: [],
    rules: {
      number: {
        required: true,
        maxlength: 30,
        accept: '[0-9]+'
      },
      email: {
        required: true,
        email: true
      },
      lastname: {
        required: true,
        maxlength: 70,
        accept: ValidationManager.basicCharacterSet
      }
    },
    submitHandler: function (form) {
      jQuery.ajax({
        url: sessionCache.get('base_url') + 'ajx/search/search/',
        async: true,
        data: sForm.serialize(),
        type: 'POST',
        timeout: LPP.reserved.consts.ajaxTimeout,
        dataType: 'json',
        error: LPP.reserved.ajaxHandlers.error,
        beforeSend: function () {
          jQuery('body').addClass('wait');
          LPP.common.openSpinner({
            parentSelector: '#cboxContent',
            keepContent: true
          });
        },
        success: function (data) {
          if (data.status == true) {
            jQuery('body').removeClass('wait');
            document.location.href = data.content.url;
          } else {
            jQuery('body').removeClass('wait');
            LPP.common.closeSpinner();
            jQuery('#modal-search-order').colorbox.close();
            setTimeout(function () {
              MessageBox.error(data.message);
            }, 600);
          }
        }
      });
    }
  });
}

var reValidation = {
  init: function () {
    this.methods();
    this.overrideValidation();
    this.updateDefaultValidation();
    this.globalRules = getValidationRules();
    this.initRules();
    this.initMessages();
    this.checkout();
    this.login();
    this.forgotPassword();
    this.registration();
    this.initCustomerAccountForm();
    this.contactForm();
    this.orderContactForm();
    this.newsletterSubscription();
  },
  globalRules: null,
  rules: null,
  messages: null,
  initRules: function () {
    this.isVatinRequired = this.globalRules.customer_address_vatin.min_text_length !== 0;
    this.isRegonRequired = this.globalRules.customer_address_regon.min_text_length !== 0;
    this.isCCRequires = this.globalRules.customer_address_regon.min_text_length !== 0;

    this.rules = {
      password: {
        required: true,
        minlength: this.globalRules.customer_password_hash.min_text_length
      },
      password_optional: {
        minlength: this.globalRules.customer_password_hash.min_text_length
      },
      firstname: {
        required: true,
        pattern: this.globalRules.customer_firstname.pattern_validation,
        minlength: this.globalRules.customer_firstname.min_text_length,
        maxlength: this.globalRules.customer_firstname.max_text_length
      },
      lastname: {
        required: true,
        pattern: this.globalRules.customer_lastname.pattern_validation,
        minlength: this.globalRules.customer_lastname.min_text_length,
        maxlength: this.globalRules.customer_lastname.max_text_length
      },
      email: {
        required: this.globalRules.customer_email.is_required,
        pattern: this.globalRules.customer_email.pattern_validation
      },
      getEmailConfirmation: function () {
        return {
          equalTo: '#registrationEmail',
          required: this.email.required
        };
      },
      multiemail: {
        multiemail: this.globalRules.customer_multiemail.multiemail,
        required: this.globalRules.customer_multiemail.is_required
      },
      email_exist: {
        email_exist: this.globalRules.customer_email_exist.email_exist,
        pattern: this.globalRules.customer_email.pattern_validation,
        required: this.globalRules.customer_email_exist.is_required
      },
      new_email: {
        pattern: this.globalRules.customer_email.pattern_validation
      },
      username: {
        pattern: this.globalRules.customer_username.pattern_validation,
        required: this.globalRules.customer_username.is_required
      },
      dialcode: {
        required: this.globalRules.customer_address_dial_code.is_required,
        pattern: this.globalRules.customer_address_dial_code.pattern_validation,
        maxlength: this.globalRules.customer_address_dial_code.max_text_length
      },
      dialcode_optional: {
        required: this.globalRules.customer_dialcode_optional.is_required,
        pattern: this.globalRules.customer_dialcode_optional.pattern_validation,
        maxlength: this.globalRules.customer_dialcode_optional.max_text_length
      },
      phone: {
        required: this.globalRules.customer_address_telephone.is_required,
        pattern: this.globalRules.customer_phone_number.pattern_validation,
        minlength: this.globalRules.customer_phone_number.min_text_length,
        maxlength: this.globalRules.customer_phone_number.max_text_length
      },
      phone_exact: {
        required: this.globalRules.customer_phone_number.is_required,
        pattern: this.globalRules.customer_phone_number.pattern_validation,
        minlength: this.globalRules.customer_phone_number.min_text_length,
        maxlength: this.globalRules.customer_phone_number.max_text_length
      },
      phone_optional: {
        required: false,
        pattern: this.globalRules.customer_phone_number.pattern_validation,
        minlength: this.globalRules.customer_phone_number.min_text_length,
        maxlength: this.globalRules.customer_phone_number.min_text_length
      },
      phone_optional_exact: {
        required: false,
        pattern: this.globalRules.customer_phone_number.pattern_validation,
        minlength: this.globalRules.customer_phone_number.min_text_length,
        maxlength: this.globalRules.customer_phone_number.max_text_length
      },
      order_id_optional: {
        required: false,
        digits: true
      },
      street: {
        required: this.globalRules.customer_address_street_name.is_required,
        pattern: this.globalRules.customer_address_street_name.pattern_validation,
        maxlength: this.globalRules.customer_address_street_name.max_text_length
      },
      street_nb: {
        required: this.globalRules.customer_address_street_number.is_required,
        pattern: this.globalRules.customer_address_street_number.pattern_validation,
        maxlength: this.globalRules.customer_address_street_number.max_text_length
      },
      apartment_number: {
        pattern: this.globalRules.customer_address_street_number.pattern_validation,
        maxlength: this.globalRules.customer_address_street_number.max_text_length
      },
      city: {
        required: this.globalRules.customer_address_city.is_required,
        pattern: this.globalRules.customer_address_city.pattern_validation,
        maxlength: this.globalRules.customer_address_city.max_text_length
      },
      company: {
        required: true,
        pattern: this.globalRules.customer_address_company.pattern_validation,
        minlength: this.globalRules.customer_address_company.min_text_length,
        maxlength: this.globalRules.customer_address_company.max_text_length
      },
      postcode: {
        required: this.globalRules.customer_address_postcode.is_required
      },
      pesel: {
        required: this.globalRules.customer_address_pesel.is_required,
        digits: true,
        minlength: this.globalRules.customer_address_pesel.min_text_length,
        maxlength: this.globalRules.customer_address_pesel.max_text_length
      },
      vatin: {
        vatin_validation: LegacyBridge.getStoreConfig('languageCode') === 'pl_PL',
        required: this.isVatinRequired,
        pattern: this.globalRules.customer_address_vatin.pattern_validation
      },
      regon: {
        required: this.isRegonRequired,
        pattern: this.globalRules.customer_address_regon.pattern_validation
      },
      vatdph: {
        required: this.globalRules.customer_address_vatdph.is_required,
        pattern: this.globalRules.customer_address_vatdph.pattern_validation
      },
      store: {
        required: this.globalRules.store.is_required
      },
      text_optional: {
        required: this.globalRules.text_optional.is_required,
        pattern: this.globalRules.text_optional.pattern_validation
      },
      dob: {
        required: this.globalRules.customer_dob.is_required,
        isAdult: [true]
      },
      gender: {
        required: this.globalRules.customer_gender.is_required
      },
      regulations: {
        required: true
      },
      general_terms_agreed: {
        required: true
      },
      additional_information: {
        required: this.globalRules.customer_address_additional_information.is_required,
        pattern: this.globalRules.customer_address_additional_information.pattern_validation,
        minlength: this.globalRules.customer_address_additional_information.min_text_length,
        maxlength: this.globalRules.customer_address_additional_information.max_text_length
      },
      contact_form_select: {
        required: this.globalRules.customer_contact_form_select.is_required,
        min: 1
      },
      comment: {
        required: true,
        pattern: this.globalRules.customer_address_additional_information.pattern_validation
      },
      rma_bank: {
        bankAccountNumberValidation: true,
        required: true
      },
      rma_bank_ru_account: {
        bankAccountNumberValidation: true,
        required: true
      },
      rma_bank_bik: {
        bankAccountNumberValidation: true,
        required: true
      },
      rma_bank_owner: {
        required: true,
        pattern: this.globalRules.customer_firstname.pattern_validation
      },
      rma_courier: {
        required: this.globalRules.rma_courier_pickup_date.is_required
      },
      rma_select: {
        required: true
      },
      newsletter_conditions: {
        required: true
      },
      g_recaptcha_response: {
        required: true
      },
      cybersource_name_card:
        typeof LPP.common.payments.cybersource.rules !== 'undefined'
          ? LPP.common.payments.cybersource.rules.credit_card_name
          : null,
      cybersource_security_code:
        typeof LPP.common.payments.cybersource.rules !== 'undefined'
          ? LPP.common.payments.cybersource.rules.security_code
          : null,
      cybersource_credit_card_number:
        typeof LPP.common.payments.cybersource.rules !== 'undefined'
          ? LPP.common.payments.cybersource.rules.credit_card_number
          : null,
      cybersource_credit_card_year:
        typeof LPP.common.payments.cybersource.rules !== 'undefined'
          ? LPP.common.payments.cybersource.rules.credit_card_is_not_expired
          : null,
      cybersource_credit_card_month:
        typeof LPP.common.payments.cybersource.rules !== 'undefined'
          ? LPP.common.payments.cybersource.rules.credit_card_is_not_expired
          : null,
      region: {
        required: this.globalRules.customer_address_region.is_required,
        pattern: this.globalRules.customer_address_region.pattern_validation,
        minlength: this.globalRules.customer_address_region.min_text_length,
        maxlength: this.globalRules.customer_address_region.max_text_length
      }
    };

    if (this.globalRules.customer_address_postcode.min_text_length) {
      this.rules.postcode.minlength = this.globalRules.customer_address_postcode.min_text_length;
    }
    if (this.globalRules.customer_address_postcode.max_text_length) {
      this.rules.postcode.maxlength = this.globalRules.customer_address_postcode.max_text_length;
    }
    if (this.globalRules.customer_address_postcode.pattern_validation) {
      this.rules.postcode.rxpattern = this.globalRules.customer_address_postcode.pattern_validation;
    }
    if (this.globalRules.local_postcode) {
      this.rules.postcode.local_postcode = this.globalRules.local_postcode.pattern_validation;
    }
  },
  initMessages: function () {
    this.messages = {
      password: {
        required: this.globalRules.customer_password_hash.validation_key_required,
        minlength: this.globalRules.customer_password_hash.validation_key_min
      },
      password_optional: {
        minlength: this.globalRules.customer_password_hash.validation_key_min
      },
      firstname: {
        required: this.globalRules.customer_firstname.validation_key_required,
        minlength: this.globalRules.customer_firstname.validation_key_min,
        maxlength: this.globalRules.customer_firstname.validation_key_max,
        pattern: this.globalRules.customer_firstname.validation_key_illegal
      },
      lastname: {
        required: this.globalRules.customer_firstname.validation_key_required,
        minlength: this.globalRules.customer_firstname.validation_key_min,
        maxlength: this.globalRules.customer_firstname.validation_key_max,
        pattern: this.globalRules.customer_firstname.validation_key_illegal
      },
      email: {
        required: this.globalRules.customer_email.validation_key_required,
        pattern: global.i18n.validation_valid_email
      },
      emailConfirmation: {
        required: this.globalRules.customer_email.validation_key_required,
        pattern: global.i18n.validation_valid_email,
        equalTo: global.i18n.different_emails
      },
      multiemail: {
        multiemail: this.globalRules.customer_multiemail.multiemail,
        required: this.globalRules.customer_multiemail.validation_key_illegal
      },
      email_exist: {
        email_exist: this.globalRules.customer_email_exist.validation_key_illegal,
        pattern: this.globalRules.customer_email_exist.validation_key_illegal,
        required: this.globalRules.customer_email_exist.validation_key_required
      },
      new_email: {
        pattern: this.globalRules.customer_email.validation_key_illegal
      },
      username: {
        required: this.globalRules.customer_email.validation_key_required,
        pattern: this.globalRules.customer_email.validation_key_illegal
      },
      dialcode: {
        required: '',
        maxlength: '',
        accept: '',
        pattern: ''
      },
      dialcode_optional: {
        required: this.globalRules.customer_address_dial_code.validation_key_required,
        pattern: this.globalRules.customer_address_dial_code.pattern_validation,
        maxlength: this.globalRules.customer_address_dial_code.max_text_length
      },
      phone: {
        required: this.globalRules.customer_phone_number.validation_key_required,
        pattern: this.globalRules.customer_phone_number.validation_key_illegal,
        minlength: this.globalRules.customer_phone_number.validation_key_min,
        maxlength: this.globalRules.customer_phone_number.validation_key_max
      },
      phone_exact: {
        required: this.globalRules.customer_phone_number.validation_key_required,
        pattern: this.globalRules.customer_phone_number.validation_key_illegal,
        minlength: global.i18n['validation_length'],
        maxlength: global.i18n['validation_length']
      },
      phone_optional: {
        required: this.globalRules.customer_phone_number.validation_key_required,
        pattern: this.globalRules.customer_phone_number.validation_key_illegal,
        minlength: this.globalRules.customer_phone_number.validation_key_min,
        maxlength: this.globalRules.customer_phone_number.validation_key_max
      },
      phone_optional_exact: {
        required: this.globalRules.customer_phone_number.validation_key_required,
        pattern: this.globalRules.customer_phone_number.validation_key_illegal,
        minlength: global.i18n['validation_length'],
        maxlength: global.i18n['validation_length']
      },
      street: {
        required: this.globalRules.customer_address_street_name.validation_key_required,
        maxlength: this.globalRules.customer_address_street_name.validation_key_max,
        pattern: this.globalRules.customer_address_street_name.validation_key_illegal
      },
      street_nb: {
        required: this.globalRules.customer_address_street_number.validation_key_required,
        maxlength: this.globalRules.customer_address_street_number.validation_key_max,
        pattern: this.globalRules.customer_address_street_number.validation_key_illegal
      },
      apartment_number: {
        maxlength: this.globalRules.customer_address_street_name.validation_key_max,
        pattern: this.globalRules.customer_address_street_name.validation_key_illegal
      },
      city: {
        required: this.globalRules.customer_address_city.validation_key_required,
        maxlength: this.globalRules.customer_address_city.validation_key_max,
        pattern: this.globalRules.customer_address_city.validation_key_illegal
      },
      company: {
        required: this.globalRules.customer_address_company.validation_key_required,
        minlength: this.globalRules.customer_address_company.validation_key_min,
        maxlength: this.globalRules.customer_address_company.validation_key_max,
        pattern: this.globalRules.customer_address_company.validation_key_illegal
      },
      postcode: {
        required: this.globalRules.customer_address_postcode.validation_key_required
      },
      pesel: {
        required: this.globalRules.customer_address_pesel.validation_key_required,
        minlength: this.globalRules.customer_address_pesel.validation_key_min,
        maxlength: this.globalRules.customer_address_pesel.validation_key_max,
        digits: this.globalRules.customer_address_pesel.validation_key_illegal
      },
      vatin: {
        vatin_validation: global.i18n['validation_vatin_invalid'],
        required: this.globalRules.customer_address_vatin.validation_key_required,
        pattern: this.globalRules.customer_address_vatin.validation_key_illegal
      },
      regon: {
        required: this.globalRules.customer_address_regon.validation_key_required,
        pattern: this.globalRules.customer_address_regon.validation_key_illegal
      },
      vatdph: {
        required: this.globalRules.customer_address_vatdph.validation_key_required,
        pattern: this.globalRules.customer_address_vatdph.validation_key_illegal
      },
      store: {
        required: global.i18n['pickpoint']
      },
      text_optional: {
        required: this.globalRules.text_optional.is_required,
        pattern: this.globalRules.text_optional.pattern_validation
      },
      gender: {
        required: this.globalRules.customer_gender.validation_key_required
      },
      dob: {
        required: this.globalRules.customer_dob.validation_key_required
      },
      confirmation: {
        required: this.globalRules.customer_password_hash.validation_key_required,
        equalTo: global.i18n['validation_passwords_identity']
      },
      regulations: {
        required: global.i18n['regulations_required']
      },
      general_terms_agreed: {
        required: global.i18n['required_field']
      },
      additional_information: {
        required: this.globalRules.customer_address_additional_information.validation_key_required,
        pattern: this.globalRules.customer_address_additional_information.validation_key_illegal,
        minlength: this.globalRules.customer_address_additional_information.validation_key_min,
        maxlength: this.globalRules.customer_address_additional_information.validation_key_max
      },
      contact_form_select: {
        required: this.globalRules.customer_contact_form_select.validation_key_required
      },
      comment: {
        required: this.globalRules.customer_address_additional_information.validation_key_required,
        pattern: this.globalRules.customer_address_additional_information.validation_key_illegal
      },
      rma_bank: {
        bankAccountNumberValidation: global.i18n['validation_bank_invalid'],
        required: global.i18n['this_field_is_required']
      },
      rma_bank_ru_account: {
        bankAccountNumberValidation: global.i18n['validation_bank_account_invalid'],
        required: global.i18n['this_field_is_required']
      },
      rma_bank_bik: {
        bankAccountNumberValidation: global.i18n['validation_bank_bik_invalid'],
        required: global.i18n['this_field_is_required']
      },
      rma_bank_owner: {
        required: global.i18n['this_field_is_required'],
        pattern: global.i18n['validation_illegal']
      },
      rma_select: {
        required: global.i18n['this_field_is_required']
      },
      g_recaptcha_response: {
        required: global.i18n['this_field_is_required']
      },
      newsletter_conditions: {
        required: global.i18n['newsletter_conditions']
      },
      cybersource_name_card: {
        required: global.i18n['this_field_is_required'],
        pattern: global.i18n['validation_illegal']
      },
      cybersource_security_code: {
        required: global.i18n['this_field_is_required'],
        pattern: this.globalRules.customer_firstname.validation_key_illegal,
        minlength: global.i18n['validation_min_length'],
        maxlength: global.i18n['validation_max_length']
      },
      cybersource_credit_card_number: {
        required: global.i18n['this_field_is_required']
      },
      region: {
        required: this.globalRules.customer_address_region.validation_key_required,
        pattern: this.globalRules.customer_address_region.validation_key_illegal,
        minlength: this.globalRules.customer_address_region.validation_key_min,
        maxlength: this.globalRules.customer_address_region.validation_key_min
      }
    };

    if (this.globalRules.customer_address_postcode.min_text_length) {
      this.messages.postcode.minlength = this.globalRules.customer_address_postcode.validation_key_min;
    }
    if (this.globalRules.customer_address_postcode.max_text_length) {
      this.messages.postcode.maxlength = this.globalRules.customer_address_postcode.validation_key_max;
    }
    if (this.globalRules.customer_address_postcode.pattern_validation) {
      this.messages.postcode.rxpattern = this.globalRules.customer_address_postcode.validation_key_illegal;
    }
    if (this.globalRules.local_postcode) {
      this.messages.postcode.local_postcode = this.globalRules.local_postcode.validation_key_illegal;
    }
  },
  methods: function () {
    jQuery.validator.addMethod('rxpattern', function (value, element, param) {
      return value.match(new RegExp(param));
    });
    jQuery.validator.addMethod('before_today', function (value, element) {
      var date = value.split('.');
      return (
        this.optional(element) ||
        new Date(parseInt(date[2]), parseInt(date[1]) - 1, parseInt(date[0]) + 1).getTime() < new Date().getTime()
      );
    });
    jQuery.validator.addMethod('after_today', function (value, element) {
      var date = value.split('.');
      return (
        this.optional(element) ||
        new Date(parseInt(date[2]), parseInt(date[1]) - 1, parseInt(date[0]) + 1).getTime() > new Date().getTime()
      );
    });
    jQuery.validator.addMethod(
      'credit_card_number_valid',
      function (value) {
        if (/[^0-9-\s]+/.test(value)) {
          return false;
        }

        var nCheck = 0,
          bEven = false;
        value = value.replace(/ /g, '');

        var valueLength = value.length;

        if (valueLength > 19 || valueLength < 12) {
          return false;
        }

        for (var index = valueLength - 1; index >= 0; index--) {
          var cDigit = value.charAt(index),
            nDigit = parseInt(cDigit, 10);

          if (bEven) {
            if ((nDigit *= 2) > 9) {
              nDigit -= 9;
            }
          }

          nCheck += nDigit;
          bEven = !bEven;
        }

        return nCheck !== 0 && nCheck % 10 == 0;
      },
      global.i18n['validation_credit_card_number_invalid']
    );

    if (LegacyBridge.getStoreConfig('languageCode') === 'pl_PL') {
      jQuery.validator.addMethod(
        'vatin_validation',
        function (value) {
          return ValidationBridge.constraint.vatin(value);
        },
        global.i18n['validation_vatin_invalid']
      );
    }

    jQuery.validator.addMethod(
      'isAdult',
      function (value, element, params) {
        var minAge = parseInt(element.dataset.minage),
          pattern = /(\d{2})\.(\d{2})\.(\d{4})/,
          birthdayDate = new Date(value.replace(pattern, '$3-$2-$1')),
          year = birthdayDate.getFullYear(),
          month = birthdayDate.getMonth(),
          day = birthdayDate.getDate();

        if (isNaN(minAge) || minAge == 'undefined' || value === '') {
          return true;
        }

        params[1] = minAge;
        return new Date(year + minAge, month, day) <= new Date();
      },
      global.i18n['validation_is_adult']
    );

    jQuery.validator.addMethod('local_postcode', function (val, el, pattern) {
      return new RegExp(pattern).test(val);
    });

    jQuery.validator.addMethod(
      'is_credit_card_number_in_service',
      function (value, element, params) {
        return LPP.common.payments.cybersource.isCreditCardNumberInService(value.replace(/ /g, ''));
      },
      global.i18n['credit_card_type_not_in_service']
    );

    jQuery.validator.addMethod(
      'is_credit_card_not_expired',
      function (value, element, params) {
        var is_expired = LPP.common.payments.cybersource.isCreditCardExpired();

        if (!is_expired) {
          jQuery('[for="cybersourceMonth"]').hide();
          jQuery('[for="cybersourceYear"]').hide();
          jQuery('#cybersourceMonth').removeClass('error').addClass('valid');
          jQuery('#cybersourceYear').removeClass('error').addClass('valid');
        }

        return !is_expired;
      },
      global.i18n['credit_card_expired']
    );
  },
  overrideValidation: function () {
    // Nadpisanie jQuery Validate aby nie tworzył elementów formularza w czasie walidacji
    jQuery.fn.validate = function (options) {
      if (!this.length) {
        if (options && options.debug && window.console) {
          console.warn("Nothing selected, can't validate, returning nothing.");
        }

        return;
      }

      var $validator = jQuery.data(this[0], 'validator');

      if ($validator) {
        return $validator;
      }

      this.attr('novalidate', 'novalidate');

      $validator = new jQuery.validator(options, this[0]);
      jQuery.data(this[0], 'validator', $validator);

      if ($validator.settings.onsubmit) {
        this.on('click.validate', ':submit', function (event) {
          var $this = jQuery(this);
          $validator.submitButton = event.currentTarget;

          if ($this.hasClass('cancel') || $this.attr('formnovalidate') !== undefined) {
            $validator.cancelSubmit = true;
          }
        });

        this.on('submit.validate', function (event) {
          if ($validator.settings.debug) {
            event.preventDefault();
          }

          function handleSubmitValidation() {
            var result;

            if ($validator.settings.submitHandler && !$validator.settings.debug) {
              result = $validator.settings.submitHandler.call($validator, $validator.currentForm, event);

              if (result !== undefined) {
                return result;
              }

              return false;
            }

            return true;
          }

          if ($validator.cancelSubmit) {
            $validator.cancelSubmit = false;

            return handleSubmitValidation();
          }

          if ($validator.form()) {
            if ($validator.pendingRequest) {
              $validator.formSubmitted = true;

              return false;
            }

            return handleSubmitValidation();
          } else {
            $validator.focusInvalid();

            return false;
          }
        });
      }

      return $validator;
    };
  },
  updateDefaultValidation: function () {
    var self = this;

    jQuery.validator.setDefaults({
      highlight: function (element, errorClass, validClass) {
        self.highlight(element, errorClass, validClass, this);
      },
      unhighlight: function (element, errorClass, validClass) {
        self.unhighlight(element, errorClass, validClass, this);
      },
      onfocusout: function (input) {
        var $input = jQuery(input);
        $input.valid();
      }
    });
  },
  highlight: function (element, errorClass, validClass, self) {
    if (element.type === 'radio') {
      self.findByName(element.name).addClass(errorClass).removeClass(validClass);
    } else {
      jQuery(element).addClass(errorClass).removeClass(validClass);
    }

    element.classList.remove('warning');
  },
  unhighlight: function (element, errorClass, validClass, self) {
    if (element.type === 'radio') {
      self.findByName(element.name).removeClass(errorClass).addClass(validClass);
    } else {
      jQuery(element).removeClass(errorClass).addClass(validClass);
    }

    element.classList.remove('warning');
  },
  checkout: function () {
    var $checkoutForm = jQuery('#checkoutForm'),
      self = this,
      rules = this.rules,
      messages = this.messages,
      previousPhoneRequiredValue = rules.phone.required,
      isCompanyInvoice = !jQuery('#normal-client-invoice').is(':checked');

    if (!$checkoutForm.length) {
      return;
    }

    rules.phone.required = this.globalRules.customer_address_telephone.required_on_checkout;

    if (!this.checkoutGeoValidation) {
      this.checkoutGeoValidation = new LPP.common.GeoValidation(
        rules,
        isCompanyInvoice,
        [
          {
            field: '[invoice][postcode]',
            validator: 'postcode'
          },
          {
            field: '[invoice][city]',
            validator: 'city'
          },
          {
            field: '[invoice][street0]',
            validator: 'street'
          },
          {
            field: '[invoice][street1]',
            validator: 'street_nb'
          },
          {
            field: '[invoice][street3]',
            validator: 'apartment_number'
          },
          {
            field: '[invoice][firstname]',
            validator: 'firstname'
          },
          {
            field: '[invoice][lastname]',
            validator: 'lastname'
          }
        ],
        {
          phoneEl: document.getElementById('phone'),
          dialCodeEl: document.getElementById('dial-code'),
          phoneElName: '[name="[phone]"]'
        },
        '#show_ivoice_form',
        ['[invoice][vatin]', '[invoice][company]', '[invoice][vatdph]', '[invoice][regon]']
      );
    }

    this.checkoutGeoValidation.createTooltip();

    function isPickupPointButPointNotSelected(deliveryType) {
      var mapDeliveryTypToInputName = {
          storemethod: 'shop[]',
          courier_ups_pp: 'accesspoint',
          courier_gls_pp: 'parcelshop[]'
        },
        inputName = mapDeliveryTypToInputName[deliveryType];

      if (!inputName) {
        return false;
      }
      return (
        !jQuery('input[name="' + inputName + '"]').length || !jQuery('input[name="' + inputName + '"]:checked').length
      );
    }

    if (this.checkoutValidator) {
      this.checkoutValidator.destroy();
    }

    this.checkoutValidator = $checkoutForm.validate({
      ignore: ':hidden, .invisible input',
      showErrors: function () {
        self.checkoutGeoValidation.tryDisplayError(self.checkoutValidator.invalid);

        this.defaultShowErrors();
      },
      highlight: function (element, errorClass, validClass) {
        self.highlight(element, errorClass, validClass, this);
        self.checkoutGeoValidation.tryDisplayError(self.checkoutValidator.invalid);
      },
      unhighlight: function (element, errorClass, validClass) {
        self.unhighlight(element, errorClass, validClass, this);
        self.checkoutGeoValidation.tryDisplayError(self.checkoutValidator.invalid);
      },
      rules: jQuery.extend(
        {
          '[gender]': rules.gender,
          '[firstname]': rules.firstname,
          '[lastname]': rules.lastname,
          '[email]': rules.email,
          '[dial-code]': rules.dialcode,
          '[phone]': rules.phone,
          '[street0]': rules.street,
          '[street1]': rules.street_nb,
          '[street3]': rules.apartment_number,
          '[city]': rules.city,
          '[postcode]': rules.postcode,
          '[additional-information]': rules.additional_information,
          '[invoice][company]': rules.company,
          '[invoice][vatin]': rules.vatin,
          '[invoice][regon]': rules.regon,
          '[invoice][vatdph]': rules.vatdph,
          '[invoice][pesel]': rules.pesel,
          conditions: rules.regulations,
          '[cybersource][cardname]': rules.cybersource_name_card,
          '[cybersource][securitycode]': rules.cybersource_security_code,
          '[cybersource][cardnumber]': rules.cybersource_credit_card_number,
          '[cybersource][year]': rules.cybersource_credit_card_year,
          '[cybersource][month]': rules.cybersource_credit_card_year
        },
        this.checkoutGeoValidation.getRules()
      ),
      messages: {
        '[gender]': messages.gender,
        '[firstname]': messages.firstname,
        '[lastname]': messages.lastname,
        '[email]': messages.email,
        '[dial-code]': messages.dialcode,
        '[phone]': messages.phone,
        '[street0]': messages.street,
        '[street1]': messages.street_nb,
        '[street3]': messages.apartment_number,
        '[city]': messages.city,
        '[postcode]': messages.postcode,
        '[additional-information]': messages.additional_information,
        '[invoice][company]': messages.company,
        '[invoice][vatin]': messages.vatin,
        '[invoice][regon]': messages.regon,
        '[invoice][vatdph]': messages.vatdph,
        '[invoice][pesel]': messages.pesel,
        '[invoice][firstname]': messages.firstname,
        '[invoice][lastname]': messages.lastname,
        '[invoice][street0]': messages.street,
        '[invoice][street1]': messages.street_nb,
        '[invoice][city]': messages.city,
        '[invoice][postcode]': messages.postcode,
        conditions: messages.regulations,
        '[cybersource][cardname]': messages.cybersource_name_card,
        '[cybersource][securitycode]': messages.cybersource_security_code,
        '[cybersource][cardnumber]': messages.cybersource_credit_card_number,
        '[cybersource][year]': messages.cybersource_credit_card_year,
        '[cybersource][month]': messages.cybersource_credit_card_year
      },
      submitHandler: function () {
        var deliveryType = jQuery('input[name=delivery_type]:checked').val(),
          dataForm,
          formDataToSend = [],
          formFieldsNames,
          formFieldsPaymentNames,
          $checkoutFormHidden,
          submitButton = document.getElementById('orderSubmit'),
          postcode,
          sameInvoiceAddress = document.getElementById('same-address-invoice'),
          formData = $checkoutForm.serializeArray(),
          oldAddressFields = ['firstname', 'lastname', 'street0', 'street1', 'city', 'postcode', 'telephone'];

        if (sameInvoiceAddress && sameInvoiceAddress.checked) {
          formData.map(function (field) {
            formData.map(function (targetField) {
              if (field.name === '[invoice]' + targetField.name) {
                field.value = targetField.value;
              }
            });

            if (field.name === '[invoice][inv_private]') {
              field.value = '1';
            }
          });
        }

        function blockOrderIfPostCodeIsOutOfService() {
          beforeRequestStarts();
          LPP.common.checkout.isPostCodeOutOfService(postcode).then(function (shouldChangeShippingMethod) {
            if (shouldChangeShippingMethod) {
              afterRequestEnds();
              MessageBox.notice(global.i18n.no_courier_for_your_postcode, true);
            } else {
              submitHiddenForm();
            }
          });
        }

        function concatKeysValues(obj, keys) {
          var value = '';
          keys.forEach(function (key) {
            value += obj[key];
          });
          return value;
        }

        function compareDeliveryAddress() {
          var addressModel = {},
            isAddressExists = true,
            newAddressFields = [
              '[firstname]',
              '[lastname]',
              '[street1]',
              '[street2]',
              '[city]',
              '[postcode]',
              '[phone]'
            ],
            strNewAddressForm;

          document.querySelectorAll('.address-model').forEach(function (input) {
            addressModel[input.name] = input.value.trim();
          });

          strNewAddressForm = concatKeysValues(addressModel, newAddressFields);

          document.querySelectorAll('.old-address').forEach(function (input) {
            if (input.dataset.placeholder) {
              var placeholderAddress = JSON.parse(window.atob(input.dataset.placeholder));
              var oldAddress = placeholderAddress.content,
                strOldAddress = concatKeysValues(oldAddress, oldAddressFields);

              if (strOldAddress === strNewAddressForm) {
                isAddressExists = false;
              }
            }
          });
          return isAddressExists;
        }

        if (isPickupPointButPointNotSelected(deliveryType)) {
          jQuery('#page').css('opacity', '1');
          jQuery('html, body').animate(
            {
              scrollTop: 0
            },
            500,
            function () {
              MessageBox.notice(jsVars.select_shop, true);
            }
          );
          return;
        }

        formFieldsPaymentNames = ['payu-card-number', 'payu-card-cvv', 'payu-card-expm', 'payu-card-expy'];
        formFieldsNames = [
          'form_key',
          'delivery_type',
          'payment_type',
          'conditions',
          'newsletter',
          'subscriptionPlace',
          'shop[]',
          'accesspoint',
          'parcelshop[]',
          'store_address_input',
          'dial_code'
        ];

        if (!compareDeliveryAddress()) {
          jQuery('#add-address').prop('checked', false);
          formData = $checkoutForm.serializeArray();
        }

        formData.forEach(function (e) {
          var name = deliveryType + e.name;
          if (formFieldsPaymentNames.indexOf(e.name) !== -1) {
            return;
          }
          if (formFieldsNames.indexOf(e.name) !== -1) {
            formDataToSend.push({ name: e.name, value: e.value });
          } else {
            if (e.name === '[invoice][vatin]' || e.name === '[invoice][pesel]' || e.name === 'dial_code') {
              var toStrip = e.value;
              if (jsVars.countryCode !== 'HU') {
                toStrip = toStrip.replace(/-/g, '');
              }
              formDataToSend.push({ name: name, value: toStrip });
            } else if (e.name === '[company]') {
              if (
                deliveryType !== 'storemethod' &&
                deliveryType !== 'courier_ups_pp' &&
                deliveryType !== 'courier_gls_pp'
              ) {
                formDataToSend.push({ name: name, value: e.value });
              }
            } else if (e.name === '[phone]') {
              var phone = e.value;
              var phoneNumber = phone.replace(/^(\((\+|00)?\d{2}\)|(\+|00)\d{2})?/, '');
              phoneNumber = phoneNumber.replace(/\s/g, '');
              phoneNumber = phoneNumber.replace(/-/g, '');
              formDataToSend.push({ name: deliveryType + '[phone]', value: phoneNumber });
            } else if (
              deliveryType !== 'storemethod' &&
              deliveryType !== 'courier_ups_pp' &&
              deliveryType !== 'courier_gls_pp'
            ) {
              formDataToSend.push({ name: name, value: e.value });
            } else if (
              e.name !== '[street1]' &&
              e.name !== '[street2]' &&
              e.name !== '[city]' &&
              e.name !== '[postcode]'
            ) {
              formDataToSend.push({ name: name, value: e.value });
            }
          }
        });
        if (jQuery('.address-data.data-company').val() === '') {
          formDataToSend.push({ name: deliveryType + '[is_private]', value: '1' });
        } else {
          formDataToSend.push({ name: deliveryType + '[is_private]', value: '0' });
        }
        formDataToSend.forEach(function (e) {
          if (!LegacyBridge.getStoreConfig('isInvoiceEnabled')) {
            if (e.name.indexOf('[invoice]') >= 0) {
              return;
            }
          }
          dataForm += '<input type="text" name="' + e.name + '" value="' + e.value + '">';
        });
        if (
          jQuery('input[name="payment_type"][value="payu_cc"]:visible').prop('checked') &&
          jQuery('#payu_remembered_cc').find(':input.error').length
        ) {
          jQuery('#payu_remembered_cc').find(':input.error').first().focus();
          return;
        }
        submitButton.disabled = true;
        jQuery('#checkoutFormHidden').html(dataForm);

        if (jQuery('#checkoutFormHidden input[name="payment_type"]').val() === 'payu_cc') {
          var PayUCCOrder = oneClickOrder();
          if (PayUCCOrder !== true) {
            if (PayUCCOrder.hasOwnProperty('card.expirationDate')) {
              MessageBox.error(jsVars.credit_card_date, true);
            } else if (PayUCCOrder.hasOwnProperty('card.number')) {
              MessageBox.error(jsVars.credit_card_number, true);
            } else {
              MessageBox.error(jsVars.credit_card_error, true);
            }
            return;
          }
        } else {
          $checkoutFormHidden = jQuery('#checkoutFormHidden');
          postcode = document.getElementsByName('[postcode]')[0].value;

          if (
            LPP.common.checkout.blockOutOfServiceEnabled &&
            deliveryType === LPP.common.shipping.dummyCourierMethodCod
          ) {
            blockOrderIfPostCodeIsOutOfService();
          } else {
            beforeRequestStarts();
            LPP.common.checkout
              .isPostcodeInService(postcode, deliveryType)
              .then(function submitIfInService(isPostcodeInService) {
                if (isPostcodeInService) {
                  submitHiddenForm();
                } else {
                  afterRequestEnds();
                  MessageBox.show(global.i18n.no_postcode_in_database, true, undefined, undefined, true, function () {
                    beforeRequestStarts();
                    submitHiddenForm();
                  });
                }
              });
          }
        }
        var isLoader = 0;
        jQuery('.error').each(function () {
          if (jQuery(this).is(':visible')) {
            isLoader += 1;
          }
        });
        if (isLoader === 0) {
          var loaderText = global.i22o.order_process;
          if (jsVars.countryCode === 'CZ') {
            if (jQuery('.payment-form ').find('input:checked').val().indexOf('payu_account') !== -1) {
              loaderText = global.i22o.transfer_order_process;

              LPP.common.openSpinner({
                parentSelector: '.main-content',
                keepContent: true,
                withModal: true,
                headerText: loaderText
              });
            }
          }
          jQuery('#orderSubmit').addClass('is-order-submit');
        }

        function beforeRequestStarts() {
          submitButton.disabled = true;
          LPP.common.openSpinner({
            parentSelector: '.main-content',
            keepContent: true,
            withModal: true
          });
        }

        function afterRequestEnds() {
          LPP.common.closeSpinner({ fadeOutTime: 0 });
          submitButton.disabled = false;
        }

        function submitHiddenForm() {
          if (LPP.common.payments.cybersource.silentPayEnabled && LPP.common.payments.cybersource.isPaymentChecked()) {
            LPP.common.payments.cybersource
              .submitCheckoutAsAjax($checkoutFormHidden.attr('id'))
              .then(afterRequestEnds());
          } else if (LPP.common.payments.googlepay.isPaymentChecked('#payment-lpp_newpayu_googlepay')) {
            LPP.common.payments.googlepay.sendRequest({
              form: $checkoutFormHidden,
              afterRequestCallback: afterRequestEnds
            });
          } else {
            $checkoutFormHidden.submit();
          }
        }
      }
    });

    rules.phone.required = previousPhoneRequiredValue;

    this.checkoutGeoValidation.checkValidation(this.checkoutValidator);
  },
  login: function () {
    var $loginForm = jQuery('#customerLogin'),
      rules = this.rules,
      messages = this.messages;
    if ($loginForm.length) {
      $loginForm.validate({
        rules: {
          'login[username]': rules.email,
          'login[password]': rules.password
        },
        messages: {
          'login[username]': messages.email,
          'login[password]': messages.password
        },
        submitHandler: function (form) {
          var $form = jQuery(form);
          jQuery.ajax({
            url: sessionCache.get('base_url') + 'ajx/customer/login/',
            async: true,
            data: $form.serialize(),
            type: 'POST',
            dataType: 'json',
            timeout: LPP.reserved.consts.ajaxTimeout,
            error: LPP.reserved.ajaxHandlers.error,
            beforeSend: function () {
              jQuery('body').addClass('wait');

              LPP.common.openSpinner({
                parentSelector: '.main-content',
                keepContent: true,
                withModal: true
              });
            },
            success: function (data) {
              var acceptRulesPopup, acceptRulesSubmit;
              if (data.status) {
                jQuery('body').removeClass('wait');
                document.location.href = data.content.url;
              } else {
                jQuery('body').removeClass('wait');
                LPP.common.closeSpinner();
                if (data.is_terms_accepted === false) {
                  acceptRulesPopup = document.getElementById('acceptRulesPopup');
                  acceptRulesSubmit = acceptRulesPopup.querySelector('#acceptRulesSubmit');
                  acceptRulesPopup.style.display = 'block';
                  acceptRulesSubmit.addEventListener('click', acceptRulesAjax.bind(null, $form));
                } else {
                  new LPP.Popup({
                    content: data.message,
                    cssClass: ['authorization-popup']
                  }).open();
                }
              }
            }
          });
        }
      });
    }
  },
  newsletterSubscription: function () {
    var $newsletterForm = jQuery('.js-newsletter-form'),
      rules = this.rules,
      messages = this.messages;

    if ($newsletterForm.length) {
      var validateOptions = {
        rules: {
          email: rules.email,
          newsletter_conditions: rules.newsletter_conditions
        },
        messages: {
          email: messages.email,
          newsletter_conditions: messages.newsletter_conditions
        },
        submitHandler: function (form) {
          jQuery.ajax({
            url: form.dataset.url,
            data: {
              email: form.querySelector('.js-newsletter-email').value,
              subscriptionPlace: form.querySelector('.ai-subscription-place').value
            },
            method: 'POST',
            xhrFields: {
              withCredentials: true
            },
            timeout: LPP.reserved.consts.ajaxTimeout,
            error: LPP.reserved.ajaxHandlers.error,
            beforeSend: function () {
              jQuery('body').addClass('wait');
              LPP.common.openSpinner({
                parentSelector: '.main-content',
                keepContent: true,
                withModal: true
              });
            },

            success: function (data) {
              jQuery('body').removeClass('wait');
              LPP.common.closeSpinner();
              if (data.status) {
                document.location.href = form.dataset.success;
              } else {
                MessageBox.error(data.message, true);
              }
            }
          });
        }
      };

      $newsletterForm.each(function () {
        jQuery(this).validate(validateOptions);
      });
    }
  },
  forgotPassword: function () {
    var $forgotPasswordForm = jQuery('#forgotPasswordForm'),
      rules = this.rules,
      messages = this.messages;
    if ($forgotPasswordForm.length) {
      $forgotPasswordForm.validate({
        rules: {
          email: rules.email
        },
        messages: {
          email: messages.email
        },
        submitHandler: function (form) {
          jQuery.ajax({
            url: sessionCache.get('base_url') + 'ajx/customer/recover/',
            async: true,
            data: jQuery('form[data-form="password-recovery"]').serialize(),
            type: 'POST',
            timeout: LPP.reserved.consts.ajaxTimeout,
            dataType: 'json',
            error: LPP.reserved.ajaxHandlers.error,
            beforeSend: function () {
              jQuery('body').addClass('wait');
              LPP.common.openSpinner({
                parentSelector: '.main-content',
                keepContent: true,
                withModal: true
              });
            },
            success: function (data) {
              jQuery('body').removeClass('wait');
              if (data.status) {
                MessageBox.success(data.content.message, true);
                setTimeout(function () {
                  document.location.href = sessionCache.get('base_url');
                }, 4000);
              } else {
                MessageBox.error(data.message, true);
              }
              LPP.common.closeSpinner();
            }
          });
        }
      });
    }
  },
  registration: function () {
    var $registerForm = jQuery('#registerForm'),
      rules = this.rules,
      messages = this.messages;

    if ($registerForm.length) {
      if (!this.registrationGeoValidation) {
        this.registrationGeoValidation = new LPP.common.GeoValidation(
          rules,
          false,
          [
            {
              field: 'invoice1[postcode]',
              validator: 'postcode'
            },
            {
              field: 'invoice1[city]',
              validator: 'city'
            },
            {
              field: 'invoice1[street][0]',
              validator: 'street'
            },
            {
              field: 'invoice1[street][1]',
              validator: 'street_nb'
            },
            {
              field: 'invoice1[firstname]',
              validator: 'firstname'
            },
            {
              field: 'invoice1[lastname]',
              validator: 'lastname'
            }
          ],
          {
            phoneEl: document.getElementById('registrationPhone'),
            dialCodeEl: document.getElementById('registrationUserPrefix'),
            phoneElName: '[name="phone"]'
          }
        );
      }

      this.registerFormValidator = $registerForm.validate({
        rules: {
          gender: rules.gender,
          firstname: rules.firstname,
          lastname: rules.lastname,
          email: rules.email,
          emailConfirmation: rules.getEmailConfirmation(),
          dial_code: rules.dialcode,
          phone: rules.phone,
          dob: rules.dob,
          password: rules.password,
          'location[street][0]': rules.street,
          'location[street][1]': rules.street_nb,
          'location[street][2]': rules.apartment_number,
          'location[city]': rules.city,
          'location[postcode]': rules.postcode,
          terms_agreed: rules.regulations,
          general_terms_agreed: rules.general_terms_agreed
        },
        messages: {
          gender: messages.gender,
          firstname: messages.firstname,
          lastname: messages.lastname,
          email: messages.email,
          dial_code: messages.dialcode,
          phone: messages.phone,
          dob: messages.dob,
          password: messages.password,
          emailConfirmation: messages.emailConfirmation,
          'location[street][0]': messages.street,
          'location[street][1]': messages.street_nb,
          'location[street][2]': messages.apartment_number,
          'location[city]': messages.city,
          'location[postcode]': messages.postcode,
          terms_agreed: messages.regulations,
          general_terms_agreed: messages.general_terms_agreed
        },
        submitHandler: function (form) {
          var params = window.location.pathname.split('/'),
            uenc = '',
            uencKey = 0,
            $submit = jQuery(form).find('button[type="submit"]'),
            formData,
            $form = jQuery('form[data-form="registration"]');
          jQuery(params).each(function (key, value) {
            if (value === 'uenc') {
              uencKey = key;
            }
          });
          if (uencKey !== 0) {
            uenc = params[uencKey + 1];
          }
          $submit.attr('disabled', 'disabled');

          // **** ECOM-8675 ****
          formData = $form.serialize();
          formData += '&confirmation=' + encodeURIComponent($form[0].password.value);
          // ****    end    ****
          jQuery.ajax({
            url: sessionCache.get('base_url') + 'ajx/customer/register/uenc/' + uenc,
            async: true,
            data: formData,
            type: 'POST',
            timeout: LPP.reserved.consts.ajaxTimeout,
            dataType: 'json',
            error: LPP.reserved.ajaxHandlers.error,
            beforeSend: function () {
              jQuery('body').addClass('wait');
              LPP.common.openSpinner({
                parentSelector: '.main-content',
                keepContent: true,
                withModal: true
              });
            },
            success: function (data) {
              if (data.status) {
                jQuery('body').removeClass('wait');
                document.location.href = data.content.url;
              } else {
                jQuery('body').removeClass('wait');
                LPP.common.closeSpinner();
                MessageBox.error(data.message, true);
                $submit.removeAttr('disabled');
              }
            }
          });
        }
      });

      this.registrationGeoValidation.checkValidation(this.registerFormValidator);
    }
  },
  initCustomerAccountForm: function (isCompanyInvoice) {
    var $customerAccountForm = jQuery('#customerAccountForm'),
      rules = this.rules,
      messages = this.messages,
      self = this,
      previousPhoneRequiredValue = rules.phone.required;

    jQuery('.my-account-settings-content input[type=radio]', $customerAccountForm).change(function () {
      $customerAccountForm.validate().resetForm();
    });

    if (!$customerAccountForm.length) {
      return;
    }

    if (this.customerAccountFormValidation) {
      this.customerAccountFormValidation.destroy();
    }

    if (rules.postcode.rxpattern) {
      rules.postcode.pattern = rules.postcode.rxpattern;
      delete rules.postcode.rxpattern;
    }

    if ($customerAccountForm.find('#addressData:visible').length) {
      rules.phone.required = this.globalRules.customer_address_telephone.required_on_checkout;
    }

    if (!this.accountGeoValidation) {
      this.accountGeoValidation = new LPP.common.GeoValidation(
        rules,
        isCompanyInvoice,
        [
          {
            field: 'invoice1[postcode]',
            validator: 'postcode'
          },
          {
            field: 'invoice1[city]',
            validator: 'city'
          },
          {
            field: 'invoice1[street][0]',
            validator: 'street'
          },
          {
            field: 'invoice1[street][1]',
            validator: 'street_nb'
          },
          {
            field: 'invoice1[firstname]',
            validator: 'firstname'
          },
          {
            field: 'invoice1[lastname]',
            validator: 'lastname'
          }
        ],
        {
          phoneEl: document.getElementById('customerPhoneNumber'),
          dialCodeEl: document.getElementById('customerDialcode'),
          phoneElName: '[name="phone_no"]'
        },
        '#customerInvoiceData',
        ['invoice1[vatin]', 'invoice1[company]', 'invoice1[vatdph]', 'invoice1[regon]'],
        true
      );
    }

    this.customerAccountFormValidation = $customerAccountForm.validate({
      showErrors: function () {
        self.accountGeoValidation.tryDisplayError(self.customerAccountFormValidation.invalid);
        this.defaultShowErrors();
      },
      highlight: function (element, errorClass, validClass) {
        self.highlight(element, errorClass, validClass, this);
        self.accountGeoValidation.tryDisplayError(self.customerAccountFormValidation.invalid);
      },
      unhighlight: function (element, errorClass, validClass) {
        self.unhighlight(element, errorClass, validClass, this);
        self.accountGeoValidation.tryDisplayError(self.customerAccountFormValidation.invalid);
      },
      rules: jQuery.extend(
        {
          //moje dane
          gender: rules.gender,
          firstname: rules.firstname,
          lastname: rules.lastname,
          email: rules.email,
          phone_no: rules.phone_exact,
          dob: rules.dob,
          current_password: {
            required: function () {
              if (jQuery('#customerNewPassword').val().length || jQuery('#customerConfirmPassword').val().length) {
                return true;
              } else {
                return false;
              }
            },
            minlength: this.globalRules.customer_password_hash.min_text_length
          },
          password: {
            required: function () {
              if (jQuery('#customerConfirmPassword').val().length) {
                return true;
              } else {
                return false;
              }
            },
            minlength: this.globalRules.customer_password_hash.min_text_length
          },
          confirmation: {
            required: function () {
              if (jQuery('#customerNewPassword').val().length) {
                return true;
              } else {
                return false;
              }
            },
            minlength: this.globalRules.customer_password_hash.min_text_length,
            equalTo: 'input[name=password]'
          },

          //dane adresowe
          'address[firstname]': rules.firstname,
          'address[lastname]': rules.lastname,
          'address[dial-code]': rules.dialcode,
          'address[phone]': rules.phone,
          'address[street0]': rules.street,
          'address[street1]': rules.street_nb,
          'address[street2]': rules.apartment_number,
          'address[city]': rules.city,
          'address[postcode]': rules.postcode,
          'address[region]': rules.region,
          'address[additional_information]': rules.additional_information,
          //faktura
          'invoice1[is_private]': {
            required: true
          },
          'invoice1[pesel]': rules.pesel,
          'invoice1[vatdph]': rules.vatdph,
          'invoice1[company]': rules.company,
          'invoice1[vatin]': rules.vatin,
          'invoice1[regon]': rules.regon
        },
        this.accountGeoValidation.getRules()
      ),
      messages: {
        required: global.i21v.field_req,
        digits: global.i21v.digits,
        //moje dane
        gender: messages.gender,
        firstname: messages.firstname,
        lastname: messages.lastname,
        email: messages.email,
        dial_code: {
          required: '',
          accept: '',
          pattern: ''
        },
        phone_no: messages.phone,
        dob: messages.dob,
        //zmiana hasła
        current_password: messages.password,
        password: messages.password,
        confirmation: messages.confirmation,
        //dane adresowe
        'address[firstname]': messages.firstname,
        'address[lastname]': messages.lastname,
        'address[dial-code]': messages.dialcode,
        'address[phone]': messages.phone,
        'address[street0]': messages.street,
        'address[street1]': messages.street_nb,
        'address[street2]': messages.apartment_number,
        'address[city]': messages.city,
        'address[postcode]': messages.postcode,
        'address[additional_information]': messages.additional_information,
        //faktura
        'invoice1[firstname]': messages.firstname,
        'invoice1[lastname]': messages.lastname,
        'invoice1[pesel]': messages.pesel,
        'invoice1[vatdph]': messages.vatdph,
        'invoice1[company]': messages.company,
        'invoice1[street][0]': messages.street,
        'invoice1[street][1]': messages.street_nb,
        'invoice1[city]': messages.city,
        'invoice1[postcode]': messages.postcode,
        'invoice1[vatin]': messages.vatin
      },

      submitHandler: function (form) {
        const button = form.querySelector('#customerAccountFormsSubmitButton');

        if (button) {
          button.disabled = true;
        }

        form.submit();
      }
    });

    this.accountGeoValidation.checkValidation(this.customerAccountFormValidation);
    rules.phone.required = previousPhoneRequiredValue;
  },
  contactForm: function () {
    var $contactForm = jQuery('#contactForm'),
      rules = this.rules,
      messages = this.messages;
    if (!$contactForm.length) {
      return;
    }

    $contactForm.validate({
      ignore: [],
      onfocusout: function (element) {
        jQuery(element).valid();
      },
      rules: {
        firstname: rules.firstname,
        lastname: rules.lastname,
        customer_email: rules.email,
        order_id: rules.order_id_optional,
        comment: rules.comment,
        department_saved_id: rules.contact_form_select,
        topic_id: rules.contact_form_select,
        'g-recaptcha-response': rules.g_recaptcha_response
      },
      messages: {
        firstname: messages.firstname,
        lastname: messages.lastname,
        customer_email: messages.email,
        comment: messages.comment,
        department_saved_id: messages.contact_form_select,
        topic_id: messages.contact_form_select,
        'g-recaptcha-response': messages.g_recaptcha_response
      }
    });
  },
  orderContactForm: function () {
    var $orderContactForm = jQuery('#orderContactForm'),
      rules = this.rules,
      messages = this.messages;
    if (!$orderContactForm.length) {
      return;
    }
    jQuery('#modal-customer-service').hide();
    jQuery('.order-details-container').on('click', 'a[data-target="#modal-customer-service"]', function () {
      $orderContactForm.validate().resetForm();
    });
    $orderContactForm.change('select', function () {
      $orderContactForm.validate().form();
    });
    $orderContactForm.validate({
      ignore: [],
      rules: {
        service_topic: rules.contact_form_select,
        content: rules.comment,
        'g-recaptcha-response': rules.g_recaptcha_response
      },
      messages: {
        service_topic: messages.contact_form_select,
        content: messages.comment,
        'g-recaptcha-response': messages.g_recaptcha_response
      },
      submitHandler: function () {
        jQuery.ajax({
          url: sessionCache.get('base_url') + 'ajx/service/send/',
          async: true,
          data: $orderContactForm.serialize(),
          type: 'POST',
          timeout: LPP.reserved.consts.ajaxTimeout,
          dataType: 'json',
          error: LPP.reserved.ajaxHandlers.error,
          beforeSend: function () {
            jQuery('body').addClass('wait');
            LPP.common.openSpinner({
              parentSelector: '#cboxContent',
              keepContent: true
            });
          },
          success: function (data) {
            jQuery('body').removeClass('wait');
            LPP.common.closeSpinner();
            jQuery('#modal-customer-service').colorbox.close();
            $orderContactForm.get(0).reset();
            $orderContactForm.validate().resetForm();
            jQuery('select', $orderContactForm).selectric('refresh');
            setTimeout(function () {
              if (data.status) {
                MessageBox.success(data.content.message);
              } else {
                MessageBox.error(data.message);
              }
            }, 600);
            if (LPP.common.recaptchaEnabled) {
              grecaptcha.reset();
            }
          }
        });
      }
    });
  },
  comingSoonPopUp: function () {
    var comingSoonValidation = {};
    comingSoonValidation.rules = {
      email: this.rules.email,
      is_accepted: this.rules.regulations
    };
    comingSoonValidation.messages = {
      email: this.messages.email,
      is_accepted: this.messages.regulations
    };

    return comingSoonValidation;
  }
};

jQuery(document).ready(function () {
  reValidation.init();
  LegacyBridge.initDadataFormService();
});

LPP.reserved.register = (function(registerObj) {
  var CREATE_ACCOUNT_PAGE_CLASS = 'customer-account-create',
    ADDRESS_OPENED_CLASS = 'opened',
    ADDRESS_CLOSED_CLASS = 'closed',
    HIDDEN_CLASS = 'hidden',
    registrationCustomerDob;

  registerObj.toggleAddress = function() {
    var classList = this.classList,
      addressContainer = document.getElementById('registrationAddress'),
      addressContainerWrapper = addressContainer.parentNode;

    addressContainer.classList.remove(HIDDEN_CLASS);

    if (classList.contains(ADDRESS_OPENED_CLASS)) {
      classList.remove(ADDRESS_OPENED_CLASS);
      addressContainer.classList.remove(ADDRESS_OPENED_CLASS);
      addressContainerWrapper.classList.remove(ADDRESS_OPENED_CLASS);
      addressContainer.classList.add(ADDRESS_CLOSED_CLASS);
    } else {
      classList.add(ADDRESS_OPENED_CLASS);
      addressContainer.classList.add(ADDRESS_OPENED_CLASS);
      addressContainerWrapper.classList.add(ADDRESS_OPENED_CLASS);
      addressContainer.classList.remove(ADDRESS_CLOSED_CLASS);
    }
  };

  registerObj.datePickerClickHandler = function(event) {
    var zebra = document.querySelector('.Zebra_DatePicker'),
      clickXPosition = event.clientX,
      halfPickerWidth = zebra.clientWidth / 2;

    if (clickXPosition + halfPickerWidth > window.innerWidth) {
      clickXPosition = window.innerWidth - halfPickerWidth;
    }

    if (clickXPosition - halfPickerWidth < 0) {
      clickXPosition = halfPickerWidth;
    }

    setTimeout(function() {
      zebra.style.left = clickXPosition + 'px';
    }, 0);
  };

  registerObj.init = function() {
    var addressContainer, registrationCustomerDob;

    if (!document.body.classList.contains(CREATE_ACCOUNT_PAGE_CLASS)) {
      return;
    }

    LPP.common.togglePasswordField.init();

    addressContainer = document.getElementById('registrationAddress');
    registrationCustomerDob = document.getElementById('registrationCustomerDob');

    document.getElementById('registrationCreateAddress').addEventListener('click', this.toggleAddress);
    registrationCustomerDob.addEventListener('click', this.datePickerClickHandler);

    addressContainer.addEventListener('webkitAnimationEnd', animationEndHandler);
    addressContainer.addEventListener('animationend', animationEndHandler);

    if (jsVars.countryCode === 'GB') {
      LPP.common.form.formatInputValueOnBlur('addressPostCode', LPP.common.form.formatPostcodeUK);
    }

    LPP.common.disablePasteForField.init('registrationEmailConfirmation');
  };

  function animationEndHandler(event) {
    if (event.target.classList.contains(ADDRESS_CLOSED_CLASS)) {
      event.target.classList.add(HIDDEN_CLASS);
      event.target.classList.remove(ADDRESS_CLOSED_CLASS);
    }
  }

  return registerObj;
})(LPP.reserved.register || {});

function acceptRulesAjax($form) {
  var data = $form.serialize(),
    acceptRulesPopup;
  data += '&terms_accepted=true';
  // TODO: do uporządkowania po wdrożeniu rodo
  jQuery.ajax({
    url: sessionCache.get('base_url') + 'ajx/customer/login/',
    async: true,
    data: data,
    type: 'POST',
    dataType: 'json',
    timeout: LPP.reserved.consts.ajaxTimeout,
    error: LPP.reserved.ajaxHandlers.error,
    beforeSend: function() {
      jQuery('body').addClass('wait');

      LPP.common.openSpinner({
        parentSelector: '.main-content',
        keepContent: true,
        withModal: true,
      });
    },
    success: function(data) {
      if (data.status) {
        jQuery('body').removeClass('wait');
        document.location.href = data.content.url;
      } else {
        jQuery('body').removeClass('wait');
        LPP.common.closeSpinner();
        acceptRulesPopup = document.getElementById('acceptRulesPopup');
        acceptRulesPopup.style.display = 'none';
        MessageBox.error(data.message, true);
      }
    },
  });
}

const COOKIE_NAME = 'countrySelector';
const FALLBACK_STORE = 'res_re_en';

function initStoreSwitcher() {
  var wrapper = document.getElementById('languagePage');

  if (!wrapper) {
    return;
  }

  wrapper.addEventListener('click', function(event) {
    if (event.target.tagName.toLowerCase() === 'a' && event.target.hasAttribute('data-store')) {
      var storeValue = event.target.dataset.store || FALLBACK_STORE;
      document.cookie = COOKIE_NAME + '=' + storeValue + ';path=/';
    }
  });
}

var initCustomerAccountView = (function () {
  function initCustomerAccountView() {
    var form = document.getElementById('customerAccountForm');

    if (!form) {
      return;
    }

    initBillingView();

    if (jsVars.countryCode === 'GB') {
      LPP.common.form.formatInputValueOnBlur(
        ['shippingDataPostcode', 'invoicePostcode'],
        LPP.common.form.formatPostcodeUK
      );
    }

    // sidebar navigation analitics
    const nav = document.querySelector('#customerAccountNavigation ul');
    const logoutElement = nav.lastElementChild;
    const logoutLink = logoutElement.querySelector('a').getAttribute('href');

    logoutElement.querySelector('a').addEventListener('click', (event) => {
      event.preventDefault();
      window.LegacyBridge.addCustomEventToDataLayer('userLogOutEvent');
      window.location.href = logoutLink;
    });
  }

  function initBillingView() {
    var wrapper = document.getElementById('customerInvoiceData'),
      invoiceTypeWrapper,
      personalRadio,
      companyRadio,
      personalData,
      companyData;

    if (!wrapper) {
      return;
    }

    invoiceTypeWrapper = wrapper.querySelector('#typeOfInvoice');
    personalRadio = invoiceTypeWrapper.querySelector('#privatePersonInvoiceOption');
    companyRadio = invoiceTypeWrapper.querySelector('#companyInvoiceOption');
    personalData = wrapper.querySelector('#privatePersonInvoice');
    companyData = wrapper.querySelector('#companyInvoice');

    toggleBillingData();

    personalRadio.addEventListener('click', function () {
      toggleBillingData();
    });

    if (companyRadio) {
      companyRadio.addEventListener('click', function () {
        toggleBillingData();
      });
    }

    function toggleBillingData() {
      if (personalRadio.checked) {
        companyData.classList.add('hidden');
        personalData.classList.remove('hidden');
        reValidation.initCustomerAccountForm(false);
      } else if (companyRadio.checked) {
        personalData.classList.add('hidden');
        companyData.classList.remove('hidden');
        reValidation.initCustomerAccountForm(true);
      }
    }
  }

  return initCustomerAccountView;
})();

var SWITCH_VIEW_ACTIVE_CLASS = 'active';

var initCategoryLayout = (function() {
  function initCategoryLayout() {
    var categoryLayout = document.getElementById('categoryView');
    var catalogSearchLayout = document.getElementById('catalogSearchView');

    if (!categoryLayout && !catalogSearchLayout) {
      return;
    }

    switchCategoryView();
    openDropdownFilters();
    handleColorChange();
  }
  function switchCategoryView() {
    var $switchViewScope = jQuery('#switchView'),
      $moreColsButton = jQuery('.more-cols', $switchViewScope),
      $lessColsButton = jQuery('.less-cols', $switchViewScope),
      $window = jQuery(window),
      timeout;

    $moreColsButton.off().on('click', switchCategoryViewHandler.bind($moreColsButton, $lessColsButton, 4));

    $lessColsButton.off().on('click', switchCategoryViewHandler.bind($lessColsButton, $moreColsButton, 3));

    $window.on('resize', function() {
      clearTimeout(timeout);
      timeout = setTimeout(function() {
        if (LPP.common.isScreenSizeMin('Md')) {
          setBannersPosition($lessColsButton.hasClass(SWITCH_VIEW_ACTIVE_CLASS) ? 3 : 4);
        } else {
          setBannersPosition(2);
        }
      }, 100);
    });
  }

  function switchCategoryViewHandler($buttonToDeactivate, gridColumns) {
    $buttonToDeactivate.removeClass(SWITCH_VIEW_ACTIVE_CLASS);
    jQuery(this).addClass(SWITCH_VIEW_ACTIVE_CLASS);
    jQuery('.category-bricks .category-layout').toggleClass('less-cols');
    setBannersPosition(gridColumns);
    jQuery(window).trigger('resize');
  }

  function setBannersPosition(gridColumns) {
    var $this,
      $banners = jQuery('.banner');
    $banners.each(function() {
      $this = jQuery(this);
      $this.css('order', $this.data('position') * gridColumns);
    });
  }

  function handleColorChange() {
    jQuery('.colors li a')
      .off()
      .on('click', function(event) {
        var $this = jQuery(this),
          $listItem = $this.parent(),
          modelPosition = $listItem.index(),
          modelId = $listItem.data('product-id'),
          $item = $this.parents('.item'),
          $allImages = $item.find('.product-models li'),
          $allColors = $item.find('.colors li'),
          $quickShopButton = $item.find('.add-to-cart a[data-product-id="' + modelId + '"]'),
          $priceContainer = $item.find('.price'),
          priceCurrency = $listItem.data('currency'),
          price = {},
          priceHtml,
          key;

        if ($listItem.data('old-price')) {
          price.new = $listItem.data('price');
          price.old = $listItem.data('old-price');
        } else {
          price.active = $listItem.data('price');
        }

        event.preventDefault();

        $quickShopButton.siblings().removeClass('selected');
        $quickShopButton.addClass('selected');

        $allColors.removeClass('selected');
        $listItem.addClass('selected');

        $allImages.removeClass('selected');
        $allImages.filter('li:nth-child(' + (modelPosition + 1) + ')').addClass('selected');

        priceHtml = '';
        for (key in price) {
          priceHtml += '<span class="' + key + '">' + price[key] + ' ' + priceCurrency + '</span>';
        }

        $priceContainer.html(priceHtml);
      });
  }

  function openDropdownFilters() {
    var $controlsContainer = jQuery('.page-category-controls');
    $controlsContainer
      .find('.filters p.opener')
      .off()
      .on('click', function() {
        var $this = jQuery(this);
        jQuery('.filters .opener')
          .not($this)
          .removeClass('active');
        if ($this.hasClass('active')) {
          $this.removeClass('active');
        } else {
          $this.addClass('active');
        }
      });
    $controlsContainer
      .find('.filter-dropdown .close-dropdown, .actions .cancel')
      .off()
      .on('click', function(event) {
        event.preventDefault();
        jQuery(this)
          .parents('.filter-options-box')
          .find('p.opener')
          .removeClass('active');
      });
  }

  return initCategoryLayout;
})();

var isMobile = navigator.userAgent.match(/(iPhone|iPod|iPad|Android|BlackBerry|Android|webOS|IEMobile|Opera Mini)/i)
  ? true
  : false;
var RESERVED = {};

jQuery(document).ready(function ($) {
  $.extend(window.RESERVED, {
    $window: null,
    init: function () {
      this.$window = $(window);

      this.fLanguageClass();
      this.fFrontPageSlider(); // front
      this.fCustomForms();
      this.fEqualHeight();
      this.fInvoiceFormActions();
      this.fPayUCCActions();
      this.fMyAccountFvat(); // account
      this.fOrdersTrigger(); // account
      this.fTooltip();
      this.fCustomSelect();
      this.fTableSizes();
      this.fOrderCustomerService();
      this.fSearchOrder();
      this.fFixedBackground();
      this.fClearAdress();
      this.visibleCookies();
      this.fDatePicker();
      this.fForbidCharacters();
      this.fSizeTableTab();
      this.fLookbookQSBlock();
      this.fCancelOrder(); // account
      this.fRemoveAddress(); // account
      this.changePaymentToCod();
      this.fCustomScrollbar();
      this.errorDimensions();
      this.myOrdersHeight(); // account
      this.storeLocatorHeight();
      this.storeLocatorMap();
      this.showMoreRules();
      this.toggleEventsHandler();
      this.calculateDeferredPaymentPriceAtMyAccount();
      this.myAccountdeferredPayment();
      this.newsletterPromoBottomBanner.init();
      this.hideUnnecessaryInfoInReturns();
      this.postcodeHints();
      this.submenuKidsMechanics();
      this.submenuKidsHoverFixer();
      this.showSelectric();
      this.preventAddressAmount();
      this.bindMobileScrollAction();

      this.$window.trigger('finished_loading_main_js');
      jQuery('.creditmemo').on('click', function () {
        jQuery(this).parent().find('ul.creditmemo-list').addClass('active');
        return false;
      });

      var $storeBtn = $('[name="storeButton"]');
      if ($storeBtn.length) {
        this.$window
          .resize(function () {
            $storeBtn.width($('[name="courierButton"]').width());
          })
          .trigger('resize');
      }
    },
    bindMobileScrollAction: function () {
      var lastScrollPosition = 0,
        lastScrollDirection = 'up',
        $topMenu = $('#main-header');

      var FORCE_OPEN_TO_TOP_OFFSET = 50;

      this.$window.on('scroll', scrollEventHandler);

      function scrollEventHandler() {
        var scrollDirection = isScrollDown(window.scrollY) ? 'down' : 'up';
        lastScrollPosition = window.scrollY;

        if (scrollDirection !== lastScrollDirection && canHideMenu(window.scrollY)) {
          lastScrollDirection = scrollDirection;
          scrollAction(scrollDirection);
        }
      }

      function isScrollDown(currentScrollPosition) {
        return lastScrollPosition < currentScrollPosition;
      }

      function canHideMenu(currentScroll) {
        return currentScroll > FORCE_OPEN_TO_TOP_OFFSET;
      }

      function scrollAction(scrollDirection) {
        if (!RESERVED.isMobileResolution(window.innerWidth)) {
          return;
        }

        if (scrollDirection === 'up') {
          $topMenu.removeClass('hide');
        }

        if (scrollDirection === 'down') {
          $topMenu.addClass('hide');
        }
      }
    },
    isMobileResolution: function (currentWidth) {
      return (currentWidth || this.$window.width()) <= this.tablet;
    },
    /*
     *
     * browser width breakpoints:
     * - mobile : 0-767 (x < this.mobile)
     * - tablet : 768-1024 ( this.mobile <= x <= this.tablet)
     * - PC : 1025+ (x > this.tablet)
     *
     */
    mobile: 768,
    tablet: 1024,
    smallDesktop: 1280,

    fForbidCharacters: function () {
      var $input, $textarea;

      if (!jQuery('body').hasClass('lang-de')) {
        return;
      }

      $input = jQuery('input');
      $textarea = jQuery('textarea');

      jQuery('input[name="address[city]"]').blur(function (e) {
        var $thisInput = jQuery(this);
        var thisInputValue = $thisInput.val().replace(/^\s+/g, '');
        $thisInput.val(thisInputValue);
      });

      $input.keypress(preventInvalidCharacterAction);

      $input.bind('paste', pasteHandler);

      $textarea.keypress(preventInvalidCharacterAction);

      $textarea.bind('paste', pasteHandler);

      function preventInvalidCharacterAction(event) {
        if (event.which === 225 || event.which === 233) {
          event.preventDefault();
        }
      }

      function pasteHandler() {
        var $this = $(this),
          str = $this.val();

        str = str.replace('á', 'a');
        str = str.replace('é', 'e');

        $this.val(str);
      }
    },

    fCancelOrder: function () {
      var cancelURLs = {},
        $cancelOrder = jQuery('.cancel-order');

      $cancelOrder.each(function () {
        var $this = jQuery(this);

        cancelURLs[$this.data('order-increment-id')] = $this.data('csrftoken')
          ? $this.attr('href') + 'csrf_token/' + $this.data('csrftoken')
          : $this.attr('href');
        $this.attr('href', '#cancel-order');
      });

      $cancelOrder.on('click', function (e) {
        e.preventDefault();
        orderIncrementId = jQuery(this).data('order-increment-id');
        jQuery('#cancel-order-id').html(orderIncrementId);
        jQuery('#cancel-order-yes').attr('href', cancelURLs[orderIncrementId]);
        MessageBox.show(
          jQuery('#cancel-order-box').html(),
          true,
          'popover',
          undefined,
          undefined,
          undefined,
          undefined,
          function () {
            jQuery.colorbox.resize({ height: '250px' });
            jQuery('#cboxClose').hide();
          }
        );
      });
    },
    fRemoveAddress: function () {
      var removeAddressButtons = document.querySelectorAll('#customerAccountForm .remove-address-button'),
        buttonIter;
      for (
        buttonIter = 0;
        buttonIter < removeAddressButtons.length &&
        removeAddressButtons[buttonIter].dataset &&
        removeAddressButtons[buttonIter].dataset.options;
        buttonIter++
      ) {
        removeAddressButtons[buttonIter].addEventListener('click', function (evt) {
          var button = this,
            htmlForm = this.form,
            message,
            options;
          evt.preventDefault();
          options = JSON.parse(button.dataset.options);
          message = '<h1>' + options.title + '</h1><span>' + options.message + '</span>';
          MessageBox.confirm(message, false, function () {
            var referer = document.createElement('input');
            referer.type = 'hidden';
            referer.name = 'referer';
            referer.value = options.referer;
            htmlForm.action = options.formAction;
            htmlForm.appendChild(referer);
            htmlForm.submit();
          });
        });
      }
    },

    changePaymentToCod: function () {
      var changePaymentToCodButtons = document.querySelectorAll('.change-payment-to-cod-button');

      changePaymentToCodButtons.forEach(function (button) {
        button.addEventListener('click', function (event) {
          event.preventDefault();
          MessageBox.confirm(global.i18n.are_you_sure_to_want_to_change_payment_method, true, function () {
            window.location = button.dataset.url;
          });
        });
      });
    },

    fLanguageClass: function () {
      var activeLanguage = jQuery('html').attr('lang');
      jQuery('body').addClass('lang-' + activeLanguage);
    },

    fFrontPageSlider: function () {
      if (jQuery('.front-page-slider ul.slides').length) {
        var windowHeight = jQuery(window).height();
        var slideWidth = jQuery(window).width();
        var sliderHeight = windowHeight - 135;

        if (slideWidth > this.tablet) {
          jQuery('.front-page-slider ul.slides').height(sliderHeight);
          jQuery('.front-page-slider ul.slides li').width(slideWidth);
        } else {
          jQuery('.front-page-slider ul.slides').height('auto');
        }

        jQuery('.front-page-slider ').flexslider({
          animation: 'slide',
          slideshowSpeed: 10000,
          controlNav: false,
          start: function () {
            slideWidth = jQuery(window).width();
            jQuery('.front-page-slider ul.slides').css(
              '-webkit-transform',
              'translate3d(-' + slideWidth + 'px, 0px, 0px)'
            );
          }
        });
      }
    },

    hideUnnecessaryInfoInReturns: function () {
      var returnsHeadline = jQuery('.tooltip-box.returns').find('.headline');
      returnsHeadline.hide().prev().hide();
    },

    fCustomForms: function () {
      var selector =
        'body:not(.catalog-category-view, .catalogsearch-result-index) input[type=radio]:not(.radio),' +
        'body:not(.catalog-category-view, .catalogsearch-result-index) input[type=checkbox]:not(.checkbox)' +
        'body:not(.customer-account-login) input[type=checkbox]';
      jQuery(selector).uniform();
    },

    fInvoiceFormActions: function () {
      var $shipmentTypes = jQuery('.shipment-type-input'),
        $clientAddresses = jQuery('.address-changer'),
        $sameAddressCheckbox = jQuery('#same-address-invoice'),
        $sameAddressCheckboxLabel = $sameAddressCheckbox.parents('label'),
        $invoiceForm = jQuery('#show_ivoice_form'),
        $clientDetails = jQuery('.normal-client.textboxes'),
        $businessDetails = jQuery('.business-client.textboxes'),
        $billingAddress = jQuery('#billing-address'),
        hasBilling = $billingAddress.length,
        $invoiceCheckbox = jQuery('#faktura-vat'),
        personalCollectionMethods = ['courier_ups_pp', 'storemethod', 'courier_gls_pp'];

      if (hasBilling) {
        $clientAddresses.on('change', function () {
          if (!$sameAddressCheckbox.prop('checked')) {
            updateInvoiceFieldsWithBillingDetails();
          }
        });

        $invoiceCheckbox.on('change', function () {
          if ($(this).prop('checked')) {
            if (!$sameAddressCheckbox.prop('checked')) {
              updateInvoiceFieldsWithBillingDetails();
            }
          }
        });
      }

      function updateInvoiceFieldsWithBillingDetails() {
        var data = $billingAddress.data('placeholder');

        if (!data) {
          return;
        }

        data = JSON.parse(window.atob(data));

        if (typeof data.content !== 'undefined') {
          setTimeout(function () {
            jQuery('.client-type').find('.invoice-changer:checked').change();
          }, 20);
        }
        $.each(data.content, function (k, v) {
          jQuery('input[name="[invoice][' + k + ']"]').val(v);
        });
      }

      function updateInvoiceOptions(storeMethod) {
        if (!$invoiceCheckbox.prop('checked') && personalCollectionMethods.indexOf(storeMethod.value) === -1) {
          $invoiceForm.addClass('invisible');
          $sameAddressCheckbox.prop('checked', true);
        }

        if (personalCollectionMethods.indexOf(storeMethod.value) !== -1) {
          $sameAddressCheckbox.prop('disabled', true).prop('checked', false);
          $sameAddressCheckboxLabel.addClass('inactive');
          $sameAddressCheckbox.parent().addClass('hidden');
          $invoiceForm.removeClass('invisible');
        } else {
          $sameAddressCheckbox.prop('disabled', false);
          $sameAddressCheckbox.prop('checked', true);
          $sameAddressCheckbox.parent().removeClass('hidden');
          $sameAddressCheckboxLabel.removeClass('inactive');
          defaultInvoiceCheck();
        }
      }

      var defaultInvoiceCheck = function () {
        var normalClientInvoiceElement = jQuery('#normal-client-invoice');
        jQuery('#show_ivoice_form').find('span.checked').removeClass('checked');
        normalClientInvoiceElement.parent().addClass('checked');
        $invoiceForm.addClass('invisible');
      };

      $sameAddressCheckbox.on('change', function () {
        if ($(this).prop('checked')) {
          defaultInvoiceCheck();
        } else {
          if (hasBilling) {
            updateInvoiceFieldsWithBillingDetails();
          }

          $invoiceForm.removeClass('invisible');
        }

        reValidation.checkout();
      });

      $shipmentTypes.on('change', function () {
        updateInvoiceOptions(this);
      });

      if ($shipmentTypes.length) {
        updateInvoiceOptions($shipmentTypes[0]);
      }
    },

    fPayUCCActions: function () {
      var $paymentMethods = jQuery('.payment-method').find('input[type="radio"]'),
        $payuCCTextboxes = jQuery('#payu_cc_textboxes'),
        $payuRememberedCC = jQuery('#payu_remembered_cc'),
        $payuCCAddForm = jQuery('#payu_cc_add_form');

      $paymentMethods.on('change', function () {
        if (this.value === 'payu_cc') {
          $payuCCTextboxes.removeClass('hidden');
          $payuRememberedCC.find('input[type="radio"]').first().prop('checked', true);
          jQuery.uniform.update();

          if ($payuRememberedCC.find('input[type="radio"][value="new"]').prop('checked')) {
            $payuCCAddForm.removeClass('hidden');
          }
        } else {
          $payuCCTextboxes.addClass('hidden');
          $payuCCAddForm.addClass('hidden');
        }
      });

      $payuRememberedCC.on('change', 'input[type="radio"]', function () {
        if (this.value === 'new') {
          $payuCCAddForm.removeClass('hidden');
        } else {
          $payuCCAddForm.addClass('hidden');
        }
      });

      if ($payuRememberedCC.find('input[type="radio"][value="new"]').prop('checked')) {
        $payuCCAddForm.removeClass('hidden');
      }
    },

    fEqualHeight: function () {
      //Thank you page
      var LeftCol = jQuery('.thank-you-page .span9');
      var RightCol = jQuery('.thank-you-page .span3');
      var LeftHeight = LeftCol.height();
      var RightHeight = RightCol.height();

      if (LeftHeight > RightHeight) {
        RightCol.css('height', LeftHeight);
      } else {
        LeftCol.css('height', RightHeight);
      }
    },

    fTableSizes: function () {
      tableSizes();
    },

    fOrderCustomerService: function () {
      jQuery('.order-details-container').on('click', 'a[data-target="#modal-customer-service"]', function () {
        var divCustomer = jQuery('#modal-customer-service');
        var orderIncrementalId = jQuery.parseJSON(jQuery(this).attr('data-autocomplete')).value;
        LPP.common.closeSpinner();
        jQuery('#order_incremental_id').val(orderIncrementalId);
        jQuery('#content').val('');

        jQuery(this).colorbox({
          width: '95%',
          height: '90%',
          overlayClose: true,
          inline: true,
          href: divCustomer,
          onOpen: function () {
            divCustomer.show();
            jQuery('#topic').val(0);
            jQuery('#topic').selectric({
              effect: 'fade'
            });
            jQuery('body').css('overflow', 'hidden');
            LPP.common.openSpinner({
              parentSelector: '#cboxLoadedContent',
              keepContent: true
            });
            if (jQuery('#modal-customer-service.mCustomScrollbar').length) {
              jQuery('#modal-customer-service').mCustomScrollbar('update');
            } else {
              jQuery('#modal-customer-service').mCustomScrollbar({
                theme: 'dark-thin'
              });
            }
          },
          onCleanup: function () {
            jQuery('body').css('overflow', 'auto');
          },
          onClosed: function () {
            divCustomer.hide();
            jQuery('#topic').selectric('destroy');
          },
          onComplete: function () {
            jQuery('#orderContactForm').validate().resetForm();
            jQuery(this).colorbox.resize();
            LPP.common.closeSpinner();
          }
        });
      });
    },

    fSearchOrder: function () {
      jQuery('a[data-target="#modal-search-order"]').click(function () {
        var mainDiv = jQuery(jQuery(this).data('target'));

        jQuery.colorbox({
          overlayClose: true,
          inline: true,
          href: mainDiv,
          onOpen: function () {
            mainDiv.show();
            jQuery('#modal-search-order form').find('input[type=text], textarea').val('');
            jQuery('body').css('overflow', 'hidden');
            LPP.common.openSpinner({
              parentSelector: '#cboxLoadedContent',
              keepContent: true
            });
          },
          onClosed: function () {
            mainDiv.hide();
            jQuery('body').css('overflow', 'auto');
          },
          onComplete: function () {
            jQuery.colorbox.resize();
            LPP.common.closeSpinner();
          }
        });
      });
    },

    fMyAccountFvat: function () {
      jQuery('#uniform-f-vat').on('click', function () {
        jQuery('#companyInvoiceData').fadeToggle();
      });

      if (jQuery('#uniform-f-vat span').hasClass('checked')) {
        jQuery('#companyInvoiceData').show();
      }
    },

    fOrdersTrigger: function () {
      jQuery('.order-trigger').on('click', function () {
        var $parentItem = jQuery(this).parents('.order-item'),
          $orderContent = $parentItem.children('.order-item-list-container'),
          $deferredPaymentLabel = $parentItem.find('.item-info--deferred-inside'),
          $topDeferredPaymentLabel = $parentItem.find('.item-info--deferred'),
          $bottomDeferredPaymentLabel = $parentItem.find('.item-info--deferred-bottom');

        $orderContent.slideToggle();
        setTimeout(function () {
          $parentItem.toggleClass('active');
        }, 200);

        if ($deferredPaymentLabel.length > 0) {
          if ($parentItem.hasClass('active')) {
            $deferredPaymentLabel.detach().appendTo($bottomDeferredPaymentLabel);
          } else {
            $deferredPaymentLabel.detach().prependTo($topDeferredPaymentLabel);
          }
        }
      });
    },

    fTooltip: function () {
      jQuery('.tooltip').on('click', function (e) {
        e.preventDefault();
        jQuery(this).children('.tooltip-text').toggle();
      });
    },

    fCustomSelect: function () {
      jQuery('select')
        .not('.not-selectric')
        .each(function () {
          jQuery(this).selectric({
            effect: 'fade',
            direction: 'up',
            disableOnMobile: true
          });
        });
    },

    fFixedBackground: function () {
      if (jQuery('.fixed-background').length) {
        jQuery('html').addClass('body-register-page');
      }
      if (jQuery('section.main-content').hasClass('cmspage')) {
        jQuery('html').addClass('cmspage');
      }
    },

    fClearAdress: function () {
      var dial_code = global.i18n.prefix;
      var clientAddressSelect = jQuery('.client-address-select');
      var addAddress = jQuery('.add-address-wrapper').find('label');
      var addNewAddress = jQuery('.my-account-settings #addNewAddress');

      setTimeout(function () {
        var chosenAddress = clientAddressSelect.find('input[name="address-entity"]:checked');
        if (chosenAddress.hasClass('old-address')) {
          addAddress.hide();
        }
      }, 200);

      addNewAddress.on('click', function () {
        const inputsAccountCustomer = document.querySelectorAll('.shipping-address-data input');
        inputsAccountCustomer.forEach(function (input) {
          if (input.id !== 'shippingDataDialcode') {
            input.value = '';
          }
        });
      });
    },

    visibleCookies: function () {
      setTimeout(function () {
        if (jQuery('#cookies-container').length) {
          jQuery('body').addClass('cookie-visible');
        } else {
          jQuery('body').removeClass('cookie-visible');
        }

        jQuery('#cookies-container a.close').on('click', function (e) {
          e.preventDefault();
          jQuery('body').removeClass('cookie-visible');
        });
      }, 600);
    },

    fDatePicker: function () {
      var today = new Date();
      var date = new Date();
      var dd = today.getDate();
      var order_date = jQuery('.order-date').val();
      var mm = today.getMonth() + 1; //January is 0!
      var yyyy = today.getFullYear();
      var dweek = date.getDay() == 6 ? 1 : 0; //SA pickup for DI
      dweek = date.getDay() == 5 ? 2 : dweek;
      if (dd < 10) {
        dd = '0' + dd;
      }

      if (mm < 10) {
        mm = '0' + mm;
      }

      today = dd + '.' + mm + '.' + yyyy;

      var y = date.getFullYear();
      var past = '01.01.' + (y - 100);
      jQuery('#registrationCustomerDob, #dateOfBirth, .data-dob, .datepicker-select, .input-date').Zebra_DatePicker({
        direction: [past, today],
        format: 'd.m.Y',
        start_date: today,
        show_select_today: false,
        show_clear_date: false,
        view: 'years',
        months: global.i20df.months,
        days: global.i20df.days
      });
      jQuery('#pickup-date').Zebra_DatePicker({
        direction: [2 + dweek, 30],
        disabled_dates: ['* * * 0,6', '06 04 2015', '07 04 2015'],
        format: 'd.m.Y',
        start_date: today,
        show_select_today: false,
        show_clear_date: false,
        view: '',
        months: global.i20df.months,
        days: global.i20df.days
      });
    },

    fSizeTableTab: function () {
      jQuery('.cmspage .span7 .nav-table li a').click(function (e) {
        e.preventDefault();
        var id = jQuery(this).attr('href');
        jQuery('.cmspage .span7 .nav-table li').removeClass('active');
        jQuery(this).parent().addClass('active');
        jQuery('.tab-pane.active').removeClass('active').fadeOut('fast');
        jQuery(id).fadeIn('slow');
        jQuery(id).addClass('active');
      });
    },

    fLookbookQSBlock: function () {
      jQuery('.microsite-label.hide-quickshop')
        .find('a')
        .on('click', function (e) {
          e.preventDefault();
        });
    },

    newsletterCookie: {
      setCookie: function (value) {
        var d = new Date(),
          name = 'newsletterCookie=';
        d.setTime(d.getTime() + 30 * 24 * 60 * 60 * 1000);
        var expires = 'expires=' + d.toUTCString();
        document.cookie = name + value + '; ' + expires + '; path=/';
      },
      getCookie: function () {
        var name = 'newsletterCookie=',
          tmp = document.cookie.split(';');
        for (var i = 0; i < tmp.length; i++) {
          var cookie = tmp[i];
          while (cookie.charAt(0) == ' ') {
            cookie = cookie.substring(1);
          }
          if (cookie.indexOf(name) == 0) {
            return cookie.substring(name.length, cookie.length);
          }
        }
        return '';
      },
      checkCookie: function (force) {
        if (/newsletter|subscri|checkout/.exec(document.location.href)) {
          return false;
        }
        var isLogged = LPP.isLogged || undefined,
          isSubscribed = LPP.isSubscribed || undefined;
        if (isLogged && isSubscribed) {
          this.setCookie(3);
          return;
        }
        var currentCookie = this.getCookie();
        if (currentCookie === '' && !force) {
          this.setCookie(1);
        } else if (parseInt(currentCookie) === 1 && !force) {
          this.setCookie(parseInt(++currentCookie));
        } else if (parseInt(currentCookie) === 2 || force) {
          var $popup = jQuery('.newsletter-popup');
          var cmsBlock = jQuery('.popup-cms-block-nl');
          var closePopup = function () {
            $popup.hide();
          };

          $popup
            .show()
            .find('.close')
            .click(function () {
              closePopup();
            });

          this.gtmNewsletterPopupShown();

          $popup.find('.ai-subscription-place').val('popup');

          $popup.click(function (e) {
            if (e.target == this) {
              closePopup();
            }
          });

          cmsBlock.click(function (e) {
            if (e.target == this) {
              closePopup();
            }
          });

          if (!force) {
            this.setCookie(3);
          }
        }
      },
      gtmNewsletterPopupShown: function () {
        window.dataLayer = window.dataLayer || [];
        window.dataLayer.push({ event: 'newsletter', action: 'view', label: 'popup' });
      }
    },

    showSelectric: function () {
      jQuery('select.select_c').on('change', function () {
        var zawartosc = jQuery(this).data('options');
        var select = '';
        if (jQuery(this).val() > 0) {
          jQuery.each(zawartosc[jQuery(this).val()], function (index, value) {
            select =
              select +
              '<option ' +
              (index == 0 ? 'selected="selected"' : '') +
              'value="' +
              index +
              '">' +
              value +
              '</option>';
          });
        }
        jQuery('.select2').html(
          jQuery(this).val() > 0
            ? '<select id="topic_id" name="topic_id" class="topic-select">' + select + '</select>'
            : ''
        );
        jQuery('.topic-select').selectric('refresh');
      });
    },

    postcodeHints: function () {
      var postcode = $('input.postcode, input.data-postcode, input#zip');
      var postcodePlaceholder = postcode.attr('placeholder');
      var postcodeFormat = postcode.attr('data-postcode');
      postcode.click(function () {
        var $this = jQuery(this);
        if (!$this.val()) {
          $this.attr('placeholder', postcodeFormat);
        }
      });
      postcode.blur(function () {
        var $this = jQuery(this);
        $this.attr('placeholder', postcodePlaceholder);
      });
    },

    freeShippingFooter: function () {
      var $freeShipping = jQuery('#freeShipping');
      var freeShippingOn = getCookie('free_shipping');
      var fsClose = $freeShipping.find('.bottom-banner-close');
      if (!freeShippingOn) {
        setTimeout(function () {
          $freeShipping.addClass('bottom-banner-active');
        }, 500);
      }
      fsClose.click(function () {
        setCookie('free_shipping', '1');
        $freeShipping.removeClass('bottom-banner-active');
      });
    },

    newsletterPromoBottomBanner: {
      init: function () {
        var banner = document.getElementById('newsletterPromoBanner');
        if (banner && this.checkDate()) {
          if (!getCookie('newsletterPromo')) {
            banner.classList.add('bottom-banner-active');
            var bannerClose = banner.querySelector('.bottom-banner-close'),
              bannerContent = banner.querySelector('.bottom-banner-text');
            bannerClose.addEventListener(
              'click',
              function () {
                setCookie('newsletterPromo', '1');
                banner.classList.remove('bottom-banner-active');
              },
              false
            );
            bannerContent.addEventListener(
              'click',
              function () {
                RESERVED.newsletterCookie.checkCookie(true);
              },
              false
            );
          }
        } else {
          RESERVED.freeShippingFooter();
        }
      },
      startTime: new Date(2016, 5, 8, 10, 0, 0),
      endTime: new Date(2016, 5, 12, 23, 59, 59),
      checkDate: function () {
        var currentDate = new Date();
        currentDate = currentDate.getTime();
        if (currentDate >= this.startTime.getTime() && currentDate <= this.endTime.getTime()) {
          return true;
        } else {
          return false;
        }
      }
    },

    submenuKidsMechanics: function () {
      var $kidsMenu = jQuery('.submenu.kids'),
        $kidsMenuInnerMenu = $kidsMenu.find('.parent-with-children ul'),
        $kidsMenuCategory = $kidsMenuInnerMenu.siblings('a');

      $kidsMenuInnerMenu.each(function () {
        var $this = jQuery(this);
        if (!$this.is(':empty')) {
          $this.siblings('a').addClass('kids-expandable-menu').append('<span class="ico"></span>');
        }
      });

      $kidsMenuCategory.click(function (e) {
        var $this = jQuery(this),
          $kidsMenuCategoryCurrent = $this.closest('li'),
          $innerMenu = $kidsMenuCategoryCurrent.find('ul');

        $kidsMenu.find('li.parent-with-children').each(function () {
          var $this = jQuery(this);
          $this.find('ul').slideUp();
          $this.find('a .ico').removeClass('active');
        });
        $kidsMenuCategoryCurrent.find('a .ico').addClass('active');
        if ($innerMenu.is(':hidden')) {
          $innerMenu.slideDown('swing', function () {
            $kidsMenu.css('min-height', function () {
              return jQuery(this).height();
            });
          });
        } else {
          $innerMenu.slideUp('swing');
          $innerMenu.siblings('a').find('span').removeClass('active');
        }
        e.preventDefault();
      });
    },

    submenuKidsHoverFixer: function () {
      var kidsMenu = document.querySelector('.submenu.kids');

      if (kidsMenu) {
        kidsMenu.addEventListener('mouseleave', function (e) {
          if (e.screenX === 0 && e.screenY === 0) {
            kidsMenu.classList.add('hover-menu');
          } else {
            kidsMenu.classList.remove('hover-menu');
          }
        });
      }
    },

    calculateDeferredPaymentPriceAtMyAccount: function () {
      var currency = jsVars.current_currency,
        $deferredOrder = jQuery('.deferred-order');

      if ($deferredOrder) {
        $deferredOrder
          .find('.list-item')
          .find('input[type="checkbox"]')
          .on('change', function () {
            var $this = jQuery(this),
              $parent = $this.parents('.order-item'),
              $priceInfo = $parent.find('.price-info'),
              $payBtn = $parent.find('.add-to-cart'),
              $paymentOptions = $parent.find('.payment-options'),
              totalPrice = parseFloat(
                $parent.find('.col5.item-info').text().replace(jsVars.current_currency, '').trim().replace(',', '.')
              ),
              shippingPrice = parseFloat(
                $parent.find('.price.delivery').text().replace(jsVars.current_currency, '').trim().replace(',', '.')
              ),
              newPrice = 0.0,
              newPriceWithShipping = 0.0;
            $this
              .parents('.order-item-list')
              .find('.list-item')
              .find('input[type="checkbox"]')
              .each(function () {
                var $current = $(this),
                  price = $current.parents('.list-item').find('.product-price').text();
                if (!price.length) {
                  price = '0,00';
                }
                if ($current.prop('checked')) {
                  newPrice += parseFloat(price.replace(',', '.'));
                }
              });
            if (newPrice === 0) {
              newPriceWithShipping = newPrice;
              $priceInfo.addClass('disabled');
              $paymentOptions.addClass('disabled');
              $paymentOptions.find('input[type="radio"]').prop('disabled', true);
              $payBtn.prop('disabled', true);
            } else {
              // add shipping cost
              newPriceWithShipping = newPrice + shippingPrice;
              $priceInfo.removeClass('disabled');
              $paymentOptions.removeClass('disabled');
              $paymentOptions.find('input[type="radio"]').prop('disabled', false);
              $payBtn.prop('disabled', false);
            }
            $parent
              .find('.price.order')
              .html(newPrice.toFixed(2).replace('.', ',') + ' <span class="currency">' + currency + '</span>');
            $parent
              .find('.price.full-price')
              .html(
                newPriceWithShipping.toFixed(2).replace('.', ',') + ' <span class="currency">' + currency + '</span>'
              );
            jQuery.uniform.update();
          })
          .change();
        $deferredOrder.find('.order-item-list').each(function () {
          var $this = jQuery(this),
            $priceInfo = $this.find('.price-info'),
            $payBtn = $this.find('.add-to-cart'),
            $paymentOptions = $this.find('.payment-options'),
            newPrice = 0.0,
            newPriceWithShipping = 0.0;
          if ($this.find('input[type="checkbox"]').length < 1) {
            newPriceWithShipping = newPrice;
            $priceInfo.addClass('disabled');
            $paymentOptions.addClass('disabled');
            $paymentOptions.find('input[type="radio"]').prop('disabled', true);
            $payBtn.prop('disabled', true);
            $this
              .find('.price.order')
              .html(newPrice.toFixed(2).replace('.', ',') + ' <span class="currency">' + currency + '</span>');
            $this
              .find('.price.full-price')
              .html(
                newPriceWithShipping.toFixed(2).replace('.', ',') + ' <span class="currency">' + currency + '</span>'
              );
            jQuery.uniform.update();
          }
        });
        $deferredOrder.on('click', '.list-item', function (e) {
          if (!jQuery(e.target).is('input[type="checkbox"]')) {
            jQuery(this).find('input[type="checkbox"]').trigger('click');
            jQuery.uniform.update();
          }
        });
      }
    },
    myAccountdeferredPayment: function () {
      var attachPayButtonEvent = function () {
        jQuery('.deferred-order-action').on('click', '.add-to-cart', function () {
          var $this = jQuery(this);

          MessageBox.confirm(jsVars.are_you_sure, true, function () {
            $this.parents('form').submit();
          });

          return false;
        });
      };

      attachPayButtonEvent();
      (function attachReturnItemsClickEvent() {
        jQuery('.deferred-send-back').on('click', function () {
          jQuery(this).parents('.order-item').find('.deferred-order-return')[0].click();
          return false;
        });
      })();

      var attachFilterButtonClickEvent = function () {
        jQuery('#deferred_payment_orders_only').on('change', function () {
          jQuery('#deferred_only_submit').submit();
        });
      };

      attachFilterButtonClickEvent();

      jQuery('.my-orders-container').on('click', '.js-deferred-payment-finalize-button', function (e) {
        var $this = $(this),
          dataAttr = $this.data('deferred-payment-started'),
          msg = $this.find('.js-deferred-payment-started-popup').text();
        if (dataAttr == '1') {
          e.preventDefault();
          MessageBox.error(msg, true);
        }
      });

      jQuery('.js-close-info-layer').on('click', function () {
        jQuery(this).parents('.deferred-payment-info-layer').hide();
      });

      jQuery('.js-close-info-layer-forever').on('click', function () {
        var $this = jQuery(this),
          url = $this.data('url');
        $this.parents('.deferred-payment-info-layer').hide();
        jQuery.ajax({
          method: 'POST',
          url: url,
          data: { popupChecked: true }
        });
      });
    },
    showMoreRules: function () {
      jQuery('.js-show-more-button').click(function () {
        var $this = jQuery(this),
          $parentWrapper = $this.parents('.show-more-wrapper');
        $parentWrapper.addClass('active');
      });

      jQuery('.js-show-more-input').change(function (e) {
        e.stopPropagation();
        var $this = jQuery(this),
          $parentWrapper = $this.parents('.show-more-wrapper');
        if ($this.is(':checked')) {
          $parentWrapper.addClass('active');
        } else {
          $parentWrapper.removeClass('active');
        }
      });
    },
    toggleEventsHandler: function () {
      var that = this,
        initialized = false;

      that.togglingElements = [];

      that.findTogglingElements = function () {
        that.togglingElements = [];

        jQuery('[data-toggle]').each(function () {
          var $this = jQuery(this),
            $toggledElements = $this.data('toggle'),
            $toggleAction = $this.data('toggle-action');

          if (jQuery($toggledElements).length === 0) {
            return false;
          }

          that.togglingElements.push($this);

          if ($this.is('input[type="checkbox"]') || $this.is('input[type="radio"]')) {
            $this.unbind('change.toggleElements').bind('change.toggleElements', function () {
              if (this.checked) {
                that.toggleElementsVisibility($toggledElements, 'show', $this.data('display'));
              } else {
                that.toggleElementsVisibility($toggledElements, 'hide', $this.data('display'));
              }
            });
          } else {
            if ($toggleAction === 'hover') {
              var showHideTimeout;

              $this.unbind('mouseenter.toggleElements').bind('mouseenter.toggleElements', function () {
                that.toggleElementsVisibility($toggledElements, 'show', $this.data('display'));
                clearTimeout(showHideTimeout);

                return false;
              });

              $this.unbind('mouseleave.toggleElements').bind('mouseleave.toggleElements', function () {
                showHideTimeout = setTimeout(function () {
                  that.toggleElementsVisibility($toggledElements, 'hide', $this.data('display'));
                }, 400);

                return false;
              });
            } else {
              $this.unbind('click.toggleElements').bind('click.toggleElements', function () {
                that.toggleElementsVisibility($toggledElements, false, $this.data('display'));

                return false;
              });
            }
          }
        });
      };

      $('#payment-payu_account').prop('checked', true);

      that.toggleElementsVisibility = function ($elements, action, display) {
        var show = true,
          displayType = display || 'block';

        if (typeof action !== 'undefined' && action !== false) {
          if (action === 'hide') {
            show = false;
          }
        }

        if ($elements instanceof Array) {
          jQuery.each($elements, function () {
            var $this = jQuery(this);

            if (typeof action === 'undefined') {
              show = !that.isElementVisible($this);
            }

            if (show) {
              that.hideConnectedElements(this);
              $this.fadeIn(100).css('display', displayType);
            } else {
              that.showConnectedElements(this);
              $this.fadeOut(100);
            }
          });
        } else {
          if (typeof action === 'undefined') {
            show = !that.isElementVisible($elements);
          }

          if (show) {
            that.hideConnectedElements($elements);
            jQuery($elements).fadeIn(100).css('display', displayType);
          } else {
            that.showConnectedElements($elements);
            jQuery($elements).fadeOut(100);
          }
        }
      };

      that.isElementVisible = function ($element) {
        return jQuery($element).is(':visible');
      };

      that.hideConnectedElements = function (dataToggleElement) {
        jQuery('[data-toggle*="' + dataToggleElement + '"][data-hide]').hide();
      };

      that.showConnectedElements = function (dataToggleElement) {
        jQuery('[data-toggle*="' + dataToggleElement + '"][data-hide]').show();
      };

      that.init = function () {
        that.findTogglingElements();
        initialized = true;
      };

      if (!initialized) {
        that.init();
      }

      return that;
    },

    fCustomScrollbar: function () {
      jQuery('#content #lookbook .container .slidebox .products').mCustomScrollbar({
        theme: 'dark-thin'
      });
    },

    errorDimensions: function () {
      var containerHeight = jQuery(window).height(),
        headerHeight = jQuery('header').height();

      jQuery('.error404 .span9').css('height', containerHeight - headerHeight - 31);
    },

    myOrdersHeight: function () {
      var minHeight = jQuery(window).height();
      jQuery('.my-orders .span7').css('min-height', minHeight - 232);
    },

    storeLocatorHeight: function () {
      var minHeight = jQuery(window).height(),
        slContainer = jQuery('.storelocator-container');
      if (slContainer.length) {
        slContainer.css('min-height', minHeight - 101);
      }
    },

    storeLocatorMap: function () {
      if (this.getParameterByName('show')) {
        $('#show-all-shops-in-country').addClass('active');
      } else {
        $('#show-all-shops').addClass('active');
      }
    },

    getParameterByName: function (name, url) {
      var regex = new RegExp('[?&]' + name + '(=([^&#]*[^/])|&|#|$)', 'i'),
        results = regex.exec(url || window.location.href);
      if (!results || results.length < 3) {
        return null;
      }
      return decodeURIComponent(results[2].replace(/\+/g, ' '));
    },

    preventAddressAmount: function () {
      var addressInputs = jQuery('.client-address-select'),
        singleAddress = addressInputs.find('label'),
        addNewAddress = singleAddress.find('.new-address'),
        addNewAddressLabel = addNewAddress.closest('label');
      if (singleAddress.length > 8) {
        addNewAddress.prop('disabled', true);
        addNewAddressLabel.hide();
      } else {
        addNewAddress.prop('disabled', false);
        addNewAddressLabel.show();
      }
    }
  });

  RESERVED.init();
});

jQuery(window).load(function () {
  //Init shuffle
  showMessagesOnPopup();
});

jQuery(document).ready(function () {
  setFullPage();
  moveAdminMessages();

  jQuery(window).resize(
    jQuery.throttle(200, function () {
      resizeSlider();
      RESERVED.errorDimensions();
      fullHeightSection();
      setFullPage();
      RESERVED.myOrdersHeight();
      RESERVED.storeLocatorHeight();

      var windowWidth = jQuery(window).width();

      if (jQuery('.category-layout').hasClass('more-cols') && windowWidth < 460) {
        jQuery('.less-cols').click();
      }

      if (windowWidth > RESERVED.tablet) {
        jQuery('.items').removeClass('row-item-1 row-item-2 row-item-3');
      }
    })
  );
});

/**********************************************************/

function showMessagesOnPopup() {
  if (jQuery('.form-wrap-text ul.messages').length > 0) {
    MessageBox.show(jQuery('.form-wrap-text ul.messages'), false);
  }
}

function resizeSlider() {
  if (jQuery('.front-page-slider ul.slides').length) {
    var windowHeight = jQuery(window).height();
    var slideWidth = jQuery(window).width();
    var sliderHeight = windowHeight - 120;

    //var singleSlideHeight = jQuery('.front-page-slider ul.slides li:first-child img').height();

    if (slideWidth > RESERVED.tablet) {
      jQuery('.front-page-slider ul.slides').height(sliderHeight);
      jQuery('.front-page-slider ul.slides li').width(slideWidth);
    } else {
      jQuery('.front-page-slider ul.slides').height('auto');
    }
  }
}

function addslashes(string) {
  return string
    .replace(/\\/g, '\\\\')
    .replace(/\u0008/g, '\\b')
    .replace(/\t/g, '\\t')
    .replace(/\n/g, '\\n')
    .replace(/\f/g, '\\f')
    .replace(/\r/g, '\\r')
    .replace(/'/g, "\\'")
    .replace(/"/g, '\\"');
}

function closeDropdown() {
  jQuery('.page-category-controls .filter-dropdown .close-dropdown').click(function () {
    jQuery(this).parent().hide().removeClass('opened');
    jQuery(this).parents('.filter-options-box').find('p.opener').removeClass('active');
  });
  jQuery('.actions .cancel').click(function (e) {
    e.preventDefault();
    jQuery(this).parents('.filter-dropdown').hide().removeClass('opened');
    jQuery(this).parents('.filter-options-box').find('p.opener').removeClass('active');
  });
}
function errorDimensions() {
  var containerHeight = jQuery(window).height(),
    headerHeight = jQuery('header').height();

  jQuery('.error404 .span9').css('height', containerHeight - headerHeight - 31);
}

function setFullPage() {
  var containerHeight = jQuery(window).height(),
    headerHeight = jQuery('header').height();

  jQuery('.full-page-content').css(
    'min-height',
    containerHeight - headerHeight + parseInt(jQuery('.full-page-content').css('padding-bottom'), 10) - 1
  );
}

function fullHeightSection() {
  var containerHeight = jQuery(window).height(),
    headerHeight = jQuery('header').height();

  jQuery('.full-height-section')
    .find('.span9')
    .css('height', containerHeight - headerHeight - 31);
}

function myOrdersHeight() {
  var minHeight = jQuery(window).height();
  jQuery('.my-orders .span7').css('min-height', minHeight - 232);
}

function StoreLocatorHeight() {
  var minHeight = jQuery(window).height();
  if (jQuery('.storelocator-container').length) {
    jQuery('.storelocator-container').css('min-height', minHeight - 101);
  }
}

function orderCancelAnchor() {
  window.location.href = jQuery('#cancel-order-yes').attr('href');
  closeMsgBox();
}

function tableSizes() {
  var $body = jQuery('body'),
    $sizeTableOpener = jQuery('a.size-table');

  $sizeTableOpener.off().on('click', function () {
    jQuery(this).colorbox({
      className: 'table-size-colorbox',
      initialWidth: '70%',
      width: '70%',
      maxHeight: '95%',
      onOpen: function () {
        $body.css('overflow', 'hidden');
        LPP.common.openSpinner({
          parentSelector: '#cboxContent',
          keepContent: true
        });
      },
      onComplete: function () {
        setTimeout(function () {
          jQuery('.size-table .table-header a.alert.js-switch').on('click', function (event) {
            event.preventDefault();
            var myHref = jQuery(this).attr('href');
            jQuery.colorbox({
              href: myHref,
              className: 'no-margin-top',
              height: '100%'
            });
          });
        }, 1000);
        LPP.common.closeSpinner();
      },
      onCleanup: function () {
        $body.css('overflow', 'auto');
      }
    });
  });
}

function closeMsgBox() {
  jQuery.colorbox.close();
}

//LOOKBOOK_
String.prototype.format = function () {
  var pattern = /\{\d+\}/g;
  var a = arguments;
  return this.replace(pattern, function (capture) {
    return a[capture.match(/\d+/)];
  });
};

function removeAddressAnchor() {
  window.location.href = jQuery('#remove-address-yes').attr('href');
  closeMsgBox();
}

function getRatio(width, height) {
  return Number(width) / Number(height);
}

function getRecommended(product_id) {
  var recom = jQuery.ajax({
    url: jsVars.base_url + 'ajx/recommended/getProductList/product_id/' + product_id,
    data: { page_size: 3, list_name: 'default' },
    async: true,
    type: 'GET',
    dataType: 'json'
  });
  recom.done(function (response) {
    jQuery('#recommended-products').html(response.content);
    showInColorbox();
  });
}

function showInColorbox() {
  if (jQuery('#message-box').size()) {
    jQuery.colorbox({
      href: jQuery('#message-box'),
      height: '30%',
      width: '730px',
      overlayClose: true,
      inline: true,
      scrolling: false,
      onLoad: function () {
        jQuery('body').css('overflow', 'hidden');
        LPP.common.openSpinner({
          parentSelector: '#cboxContent',
          keepContent: true
        });
      },
      onClosed: function () {
        jQuery('#message-box').hide();
        jQuery('body').css('overflow', 'auto');
        jQuery.colorbox.close();
        LPP.common.closeSpinner();
      },
      onComplete: function () {
        jQuery('body').css('overflow', 'hidden');
        LPP.common.closeSpinner();
        jQuery('#message-box').show();
        checkImgRatio();
        jQuery(this).colorbox.resize();
      }
    });
  }
}

function checkImgRatio() {
  var ratio = getRatio(jQuery('#s-product-img img').width(), jQuery('#s-product-img img').height());

  if (ratio < 1.5 && jQuery('#s-product-img').hasClass('ratio_20x9')) {
    jQuery('#s-product-img').attr('class', 'prod-image ratio_3x4');
  } else if (ratio > 1.5 && jQuery('#s-product-img').hasClass('ratio_3x4')) {
    jQuery('#s-product-img').attr('class', 'prod-image ratio_20x9');
  }
}

function moveAdminMessages() {
  hideAdminMessages();

  if (jQuery('.main-content').find('.span7').length > 0) {
    jQuery('#admin_messages').detach().prependTo('.main-content .span7');
  } else if (jQuery('.main-content').find('.span9 > div:first-child').length > 0) {
    jQuery('#admin_messages').detach().prependTo('.main-content .span9 > div:first-child');
  } else if (jQuery('.main-content').find('.span9').length > 0) {
    jQuery('#admin_messages').detach().prependTo('.main-content .span9');
  } else {
    jQuery('#admin_messages').css({
      'padding-left': 25,
      'padding-top': 30
    });
  }
}

function hideAdminMessages() {
  var $adminMessages = jQuery('#admin_messages');

  if ($adminMessages.length > 0 && $adminMessages.html().length === 0) {
    $adminMessages.remove();
  }
}

function setCookie(key, value) {
  var expires = new Date();
  expires.setTime(expires.getTime() + 10 * 24 * 60 * 60 * 1000);
  document.cookie = key + '=' + value + ';expires=' + expires.toUTCString() + ';path=/';
}

function getCookie(key) {
  var keyValue = document.cookie.match('(^|;) ?' + key + '=([^;]*)(;|$)');
  return keyValue ? keyValue[2] : null;
}

var ExtLibWrapper = {};

function initAll() {
  subscribe();
  fMyAccountMenu();
}

function subscribe() {
  jQuery('#newsletter-validate-detail').submit(function (event) {
    event.preventDefault();
    if (
      jQuery('#accept-newsletter-terms', this).is(':checked') &&
      jQuery(this).find('[name="email-input"]').val().length &&
      isValidEmailAddress(jQuery(this).find('[name="email-input"]').val())
    ) {
      LPP.common.openSpinner({
        parentSelector: '.main-content',
        keepContent: true,
        withModal: true
      });
      jQuery.ajax({
        url: jsVars.secure_base_url + 'ajx/newsletter/subscribe/',
        data: {
          email: jQuery(this).find('[name="email-input"]').val(),
          subscriptionPlace: jQuery(this).find('[name="subscriptionPlace"]').val()
        },
        dataType: 'json',
        type: 'POST',
        xhrFields: {
          withCredentials: true
        },
        success: function (data) {
          if (data.status == true && data.hasOwnProperty('content') && data.content.message) {
            setTimeout(function () {
              window.location.href = jsVars.base_url + 'subscription';
            }, 500);
          } else {
            MessageBox.error(data.message, false);
            jQuery('.top-footer .show-footer').click();
          }
          LPP.common.closeSpinner();
        }
      });
    }
  });
}

function requestStoreAvailability($showPopup, $position) {
  // TODO: tę funkcję 'requestStoreAvailability' należy zrefaktorować => zadanie ECOM-6311
  if (!$showPopup) {
    $showPopup = true;
  }

  var $availabilityWrapper = jQuery('#check_availability_wrapper'),
    $colorboxWrapper = jQuery('#colorbox'),
    sizeAttr = productPage.methods.getSelectedProductAttr('size_attr_id'),
    postData = {
      product: {
        product_id: productPage.methods.getSelectedProductAttr('configurable_product_id'), // id modelo-koloru (tzw. configurable)
        super_attribute: {}
      }
    };

  postData.product.super_attribute[sizeAttr] = productPage.methods.getSelectedProductAttr('size_label_id');

  if ($position) {
    postData.location = { lat: $position.coords.latitude, lnt: $position.coords.longitude };
  } else {
    postData.location = jQuery('#colorbox .store-search-query').val();
  }

  jQuery.ajax({
    url: jsVars.checkStoresAvailabilityUrl,
    type: 'POST',
    data: postData,
    success: function (data) {
      if (data.status == false) {
        MessageBox.error(data.message);
      } else {
        var $avv = data.content.availability;
        if ($showPopup) {
          $list = jQuery('#check_availability_wrapper .body .scroll ul');
        } else {
          $list = jQuery('#colorbox .body .scroll ul');
        }
        $list.html('');
        for ($i = 0; $avv.length >= $i; $i++) {
          if (typeof $avv[$i] != 'undefined') {
            $list.append(
              jQuery('<li>')
                .attr('class', 'avv avv-' + $avv[$i].avv)
                .append(jQuery('<span>').attr('class', 'icon'))
                .append(
                  jQuery('<span>')
                    .attr('class', 'text')
                    .html(
                      '<span class="info">' +
                        $avv[$i].name +
                        '<br>' +
                        $avv[$i].city +
                        '<br>' +
                        $avv[$i].phone +
                        '</span>'
                    )
                )
            );
          }
        }
        if ($showPopup) {
          MessageBox.show(
            $availabilityWrapper.html().replace(/enable_geolocation/g, 'enable_geolocation_colorbox'),
            false,
            'check_availability_wrapper',
            undefined,
            undefined,
            undefined,
            undefined,
            function () {
              jQuery.colorbox.resize({ width: '90%', maxWidth: '660px' });
              $colorboxWrapper
                .find('.search_location')
                .unbind('click.storelocator')
                .bind('click.storelocator', function () {
                  requestStoreAvailability(false);
                  return false;
                });
              $colorboxWrapper
                .find('.store-search-form')
                .unbind('submit.storelocator')
                .bind('submit.storelocator', function () {
                  $colorboxWrapper.find('.search_location').trigger('click.storelocator');
                  return false;
                });
              $colorboxWrapper
                .find('input.enable_geolocation_colorbox')
                .unbind('change.storelocator')
                .bind('change.storelocator', function (e) {
                  e.preventDefault();
                  if (this.checked) {
                    if (navigator.geolocation) {
                      navigator.geolocation.getCurrentPosition(function (position) {
                        requestStoreAvailability(false, position);
                        jQuery('input.enable_geolocation_colorbox').prop('checked', true);
                        jQuery.uniform.update();
                      });
                    } else {
                      jQuery('input.enable_geolocation_colorbox').prop('checked', false);
                      jQuery.uniform.update();
                    }
                  } else {
                    jQuery('input.enable_geolocation_colorbox').prop('checked', false);
                    jQuery.uniform.update();
                  }
                });
            }
          );
          jQuery('#message_box').click(function (e) {
            e.stopPropagation();
          });
        }
      }
    }
  });
}

function createHtmlFromJson($data) {
  var $html = '';
  var $html_prefix = '';
  var $html_sufix = '';
  var $result = '';

  jQuery.each($data, function ($index, $tag_els) {
    jQuery.each($tag_els, function ($tag_name, $tag_props) {
      $html_prefix = '<' + $tag_name + '>';
      $html_sufix = '</' + $tag_name + '>';
      $html = '';
      jQuery.each($tag_props, function ($prop, $val) {
        switch ($prop) {
          case 'text':
            $html += $val;
            break;
          case 'html':
            $html += createHtmlFromJson($tag_props.html);
            break;
          default:
            $html_prefix = $html_prefix.replace('>', ' ' + $prop + '="' + $val + '">');
        }
      });
      $result += $html_prefix + $html + $html_sufix;
    });
  });
  return $result;
}

function fMyAccountMenu() {
  var AddressContainer = jQuery('.my-account-settings-content'),
    VatContainer = jQuery('.my-account-invoice-content'),
    CustomerDataContainer = jQuery('.change-customer-data-container'),
    MyAccountSettingsMenuElements = jQuery('#customerAccountNavigation a[data-container]'),
    CustomerCreditCard = jQuery('.my-account-creditcard-content'),
    myAccoountContent = jQuery('.my-account-settings-content'),
    customerAddressAmount = myAccoountContent.find('div.customer-billing-address').length,
    addNewAddressLabel = myAccoountContent.find('label[for="add-new-address"]'),
    addNewAddress = myAccoountContent.find('input#addNewAddress'),
    allContainers = {
      address: AddressContainer,
      invoiceAddress: VatContainer,
      customerData: CustomerDataContainer,
      creditCard: CustomerCreditCard
    };

  MyAccountSettingsMenuElements.on('click', function () {
    var $this = jQuery(this),
      containerKey = this.dataset.container;

    if (customerAddressAmount > 9) {
      addNewAddress.prop('disabled', true);
      addNewAddressLabel.hide();
    } else {
      addNewAddress.prop('disabled', false);
      addNewAddressLabel.show();
    }

    if ($this.hasClass('active')) {
      return false;
    } else {
      MyAccountSettingsMenuElements.removeClass('active');
      $this.addClass('active');
      hideAllContainers();
      allContainers[containerKey].fadeIn();
      jQuery('#formType').val($this.data('type'));
      reValidation.initCustomerAccountForm();
    }
  });

  handleRedirectAndHashChange();

  function hideAllContainers() {
    Object.keys(allContainers).forEach(function (containerKey) {
      this[containerKey].hide();
    }, allContainers);
  }

  jQuery('.choose_address').click(function () {
    if (jQuery(this).is(':checked')) {
      var data = jQuery(this).data('placeholder');

      if (!data) {
        jQuery('[name="address[id]"]').val('');
        return;
      }

      data = JSON.parse(window.atob(data));

      if (data.hasOwnProperty('content')) {
        jQuery.each(data.content, function (key, val) {
          jQuery('[name="address[' + key + ']"]').val(val);
        });
      } else {
        jQuery('[name="address[id]"]').val('');
      }
    }
  });

  function handleRedirectAndHashChange() {
    var wrapper = document.getElementById('customerAccountForm'),
      containerKey,
      navigation,
      customerLink,
      addressLink,
      invoiceLink,
      creditCardLink,
      mapHashToId;

    if (!wrapper) {
      return;
    }

    containerKey = window.location.hash.split('#')[1];

    window.addEventListener(
      'hashchange',
      function () {
        containerKey = window.location.hash.split('#')[1];
        changeHash();
      },
      false
    );

    changeHash();

    function changeHash() {
      if (containerKey) {
        navigation = document.getElementById('customerAccountNavigation');
        customerLink = navigation.querySelector('a[data-container="customerData"]');
        addressLink = navigation.querySelector('a[data-container="address"]');
        invoiceLink = navigation.querySelector('a[data-container="invoiceAddress"]');
        creditCardLink = navigation.querySelector('a[data-container="creditCard"]');

        mapHashToId = {
          'customer-data': customerLink,
          'invoice-data': invoiceLink,
          'address-data': addressLink,
          'credit-card-data': creditCardLink
        };

        if (mapHashToId[containerKey]) {
          mapHashToId[containerKey].click();
          setActiveElement(navigation, mapHashToId[containerKey]);
        }
      }
    }

    function setActiveElement(navMenu, el) {
      var lastActiveEl = navMenu.querySelector('a.active');
      lastActiveEl.classList.remove('active');
      el.classList.add('active');
    }
  }
}

function removeAddress() {
  var removeAddressURLs = {};

  jQuery('.remove_address').each(function (e) {
    removeAddressURLs[jQuery(this).data('address-id')] = jQuery(this).attr('href');
    jQuery(this).attr('href', '#remove-address');
  });

  jQuery('.remove_address').click(function (e) {
    e.preventDefault();
    addressId = jQuery(this).data('address-id');
    jQuery('#remove-address-yes').attr('href', removeAddressURLs[addressId]);

    MessageBox.show(jQuery('#remove-address-box').html());
  });
}

jQuery(document).ready(function () {
  initAll();
});

var MessageBox;
(function (MessageBox) {
  MessageBox.show = function (
    message,
    preformated,
    css_class,
    wrapper_id,
    confirm,
    callback_yes,
    callback_no,
    call_after_show
  ) {
    if (typeof preformated === 'undefined') preformated = true;
    if (typeof css_class === 'undefined') css_class = '';
    if (typeof wrapper_id === 'undefined') wrapper_id = 'message_box';
    jQuery('body').append('<div id="' + wrapper_id + '" class="' + css_class + ' hidden"></div>');
    var $box = jQuery('#message_box');
    if (preformated) {
      $box.html('<h2>' + message + '</h2>');
    } else {
      $box.html(message);
    }

    if (confirm) {
      var buttons = '',
        content = $box.html();

      buttons += '<div class="buttons" style="text-align: center;">';
      buttons +=
        '<a class="button add-to-cart cbox-confirm" data-answer="false" style="padding: 12px 30px 10px; float: none;">' +
        jsVars.answer_no +
        '</a>';
      buttons +=
        '<a class="button add-to-cart cbox-confirm" data-answer="true" style="margin-left: 10px; padding: 12px 30px 10px; float: none;">' +
        jsVars.answer_yes +
        '</a>';
      buttons += '</div>';

      $box.html(content + buttons);

      jQuery('.cbox-confirm')
        .unbind('click.cbox_confirm')
        .bind('click.cbox_confirm', function () {
          var $this = jQuery(this);
          jQuery('#cboxClose').trigger('click');

          if ($this.data('answer')) {
            if (typeof callback_yes === 'function') {
              callback_yes();
            }
          } else {
            if (typeof callback_no === 'function') {
              callback_no();
            }
          }
        });
    }

    return new Promise(function (resolve) {
      setTimeout(function () {
        $box.colorbox({
          width: '295px',
          overlayClose: false,
          inline: true,
          href: $box,
          open: true,
          onOpen: function () {
            jQuery($box).removeClass('hidden');
            jQuery('body').css('overflow', 'hidden');
            LPP.common.openSpinner({
              parentSelector: '#cboxContent',
              keepContent: true
            });
          },
          onCleanup: function () {
            jQuery('body').css('overflow', 'auto');
          },
          onClosed: function () {
            jQuery('#message_box').remove();
            resolve();
          },
          onComplete: function () {
            jQuery(this).colorbox.resize();
            LPP.common.closeSpinner();

            if (typeof call_after_show === 'function') {
              call_after_show();
            }
          }
        });
      }, 500);
    });
  };

  MessageBox.error = function (message, preformated, css_class) {
    css_class = css_class ? css_class : '';
    return MessageBox.show(message, preformated, 'error ' + css_class);
  };

  MessageBox.success = function (message, preformated, css_class) {
    css_class = css_class ? css_class : '';
    return MessageBox.show(message, preformated, 'success ' + css_class);
  };

  MessageBox.notice = function (message, preformated, css_class) {
    css_class = css_class ? css_class : '';
    return MessageBox.show(message, preformated, 'notice ' + css_class);
  };

  MessageBox.confirm = function (message, preformated, callback_yes, callback_no, css_class, wrapper_id) {
    css_class = css_class ? css_class : '';
    return MessageBox.show(message, preformated, 'confirm ' + css_class, wrapper_id, true, callback_yes, callback_no);
  };
})(MessageBox || (MessageBox = {}));

// wyswietlanie komunikatu na stronie po wyslaniu formularza kontaktowego
function contactFormRedirects() {
  MessageBox.notice(jQuery('.confirmation-wrap').html(), true, 'contact-confirmation-cbox');
  jQuery('#message_box #contact-redirect-btn').click(function () {
    window.location = jQuery(this).find('a').attr('href');
  });
  jQuery(document).on('click', '#cboxClose', function () {
    window.location = jsVars.base_url + 'contacts/';
  });
}

jQuery(document).bind('cbox_complete', function () {
  jQuery('input[type=radio]:not(.radio), input[type=checkbox]:not(.checkbox)').uniform();
  jQuery('.body .scroll').mCustomScrollbar({
    theme: 'dark-thin'
  });
});

LPP.reserved.spinnerTemplateUrl =
  '/skin/frontend/' + __FRONTEND_VERSION__ + '/reserved2/default/javascript/modules/spinner/spinner.html';

/*
 * Filtrowanie produktow
 * patryk.swieczkowski@lppsa.com 12.08.2014
 */

var AVAILABLE_KEYS_FOR_PRICE_INPUTS = [
    '1',
    '2',
    '3',
    '4',
    '5',
    '6',
    '7',
    '8',
    '9',
    '0',
    'Enter',
    'Delete',
    'Backspace',
    'ArrowDown',
    'ArrowUp',
    'ArrowLeft',
    'ArrowRight',
    'Tab',
    'F5',
    'F12'
  ],
  PRICE_RANGE_MIN_VALUE = 0,
  PRICE_RANGE_MAX_VALUE = 999999;

var filterByPriceHelper;

var initFilterSort = (function () {
  var $grid,
    $items,
    $allItems,
    $banners,
    $sizes,
    $colors,
    $attribute,
    array2 = [],
    sizes = [],
    colors = [],
    attribute = [],
    price = [0, 999999],
    blockEvent = false;

  function initFilterSort() {
    var filtersDiv = document.getElementById('filters');

    if (!filtersDiv) {
      return;
    }

    setVars();
    initFilters();
    prepareSelectedFiltersFromCookies();
    sortProducts();
    waitOnAjax();
    mobileFilters.init({ filterByAllSelectedParameters: filterByAllSelectedParameters });
    filterByPriceHelper();
  }

  function setVars() {
    $grid = jQuery('#category-bricks');
    $items = $grid.children('.item:not(.banner, .empty-item)');
    $allItems = jQuery('.item');
    $banners = $allItems.filter('.banner');
    $sizes = jQuery('.js-sizes');
    $colors = jQuery('.js-colors');
    $attribute = jQuery('.js-attribute');
  }

  function initFilters() {
    jQuery('.button.smaller-button.re-filter').on('click', function (e) {
      e.preventDefault();
      triggerFilters();
    });

    jQuery('.button.smaller-button.cancel').on('click', function (e) {
      e.preventDefault();
      resetFilters();
    });

    jQuery('.filterInfo').on('click', function (e) {
      e.preventDefault();
      resetFilters();
      showPickedColors();

      if (jQuery('.sortInfo').find('a').length === 0) {
        showElements($banners);
      }
      mobileFilters.updateAllFiltersGroupCounters();
    });

    jQuery('.sortInfo').on('click', function (e) {
      e.preventDefault();
      jQuery('.sortInfo').html('');

      showPickedColors();

      if (jQuery('.filterInfo').find('a').length === 0) {
        showElements($banners);
      }

      $items.each(function () {
        var $this = jQuery(this);

        if ($this.hasClass('filtered')) {
          showElements($this);
        }

        setTimeout(function () {
          $this.css({ order: $this.data('index') });
        }, 200);
      });
      jQuery(window).trigger('resize');

      sortState.uncheckSortMethodsButtons();
    });

    initPriceFilters();

    $attribute.find('input').on('change', function (event) {
      if (LPP.common.isScreenSizeMin('Md')) {
        if (!blockEvent) {
          parseCheckedAttributes();
          saveCookieWithFilters('attribute', attribute);
        }
        countFilters();
        debouncedTriggerFilters();
        mobileFilters.updateFiltersGroupCounter('characteristicFilters', 'characteristicFiltersContent');
      } else {
        mobileFilters.recordChangesOfFilters(event.target);
      }
    });

    $sizes.find('input').on('change', function (event) {
      if (LPP.common.isScreenSizeMin('Md')) {
        if (!blockEvent) {
          parseCheckedSizes();
          saveCookieWithFilters('sizes', sizes);
        }
        countFilters();
        debouncedTriggerFilters();
        mobileFilters.updateFiltersGroupCounter('sizeFilters', 'sizeFiltersContent');
      } else {
        mobileFilters.recordChangesOfFilters(event.target);
      }
    });

    $colors.find('input').on('change', function (event) {
      if (LPP.common.isScreenSizeMin('Md')) {
        if (!blockEvent) {
          parseCheckedColors();
          saveCookieWithFilters('colors', colors);
        }
        countFilters();
        debouncedTriggerFilters();
        mobileFilters.updateFiltersGroupCounter('colorFilters', 'colorFiltersContent');
      } else {
        mobileFilters.recordChangesOfFilters(event.target);
      }
    });
  }

  function initPriceFilters() {
    var priceFromEl = document.getElementById('priceFrom'),
      priceToEl = document.getElementById('priceTo'),
      priceLimitElements = [priceFromEl, priceToEl],
      inputName = '';

    function priceFilterActionHelper(inputName) {
      validatePriceRangeLimit(inputName);

      if (isPriceRangeLimitValid(inputName)) {
        filterByPrice(priceFromEl, priceToEl);
      }
    }

    var debouncedPriceInputAction = debounce(function () {
      priceFilterActionHelper(inputName);
    }, 250);
    filterByPriceHelper = debounce(function () {
      priceFilterActionHelper('price-from');
    }, 250);

    priceLimitElements.forEach(function (priceLimitEl) {
      priceLimitEl.addEventListener('change', function (event) {
        inputName = event.target.name;
        debouncedPriceInputAction();
      });

      priceLimitEl.addEventListener('input', function (event) {
        inputName = event.target.name;
        debouncedPriceInputAction();
      });

      priceLimitEl.addEventListener('keydown', function (event) {
        var isValidKey = isValidInputNumberKey(event.key);

        if (!isValidKey) {
          event.preventDefault();
        }

        switch (event.key) {
          case 'ArrowDown':
            event.preventDefault();
            if (event.target.value <= PRICE_RANGE_MIN_VALUE) {
              return;
            }
            event.target.value--;
            break;
          case 'ArrowUp':
            event.preventDefault();
            if (event.target.value >= PRICE_RANGE_MAX_VALUE) {
              return;
            }
            event.target.value++;
            break;
          case 'Enter':
          case 'Delete':
          case 'Backspace':
            break;
          default:
            return;
        }

        inputName = event.target.name;
        debouncedPriceInputAction();
      });
    });
  }

  /**
   * Funkcja pomocnicza filtrująca produkty oraz zapisująca je do cookies
   */
  function filterByAllSelectedParameters() {
    if (!blockEvent) {
      parseCheckedColors();
      parseCheckedSizes();
      parseCheckedAttributes();

      saveCookieWithFilters('colors', colors);
      saveCookieWithFilters('sizes', sizes);
      saveCookieWithFilters('attribute', attribute);
    }
    countFilters();
    triggerFilters();
  }

  function triggerFilters() {
    jQuery('.filter-results > p').addClass('filters-active');
    var $priceFrom = jQuery('#priceFrom'),
      $priceTo = jQuery('#priceTo'),
      priceFromNotEmpty = $priceFrom.length && $priceFrom.val().length,
      priceToNotEmpty = $priceTo.length && $priceTo.val().length;

    if (
      (jQuery('.filter-options-box').length > 0 &&
        jQuery('.filter-column').find('input[type=checkbox]:checked').length > 0) ||
      priceFromNotEmpty ||
      priceToNotEmpty
    ) {
      filter();
    } else {
      resetFilters();
    }

    countFilters();
  }

  var debouncedTriggerFilters = debounce(triggerFilters, 500);

  /**
   * Funkcja pomocnicza filtrująca produkty uwzględniając wybrany przedział cenowy
   */
  function filterByPrice(priceFromEl, priceToEl) {
    var priceFromValue = priceFromEl.value,
      priceToValue = priceToEl.value;

    priceFromValue = !!priceFromValue ? priceFromValue : PRICE_RANGE_MIN_VALUE;
    priceToValue = priceToValue === PRICE_RANGE_MIN_VALUE || !!priceToValue ? priceToValue : PRICE_RANGE_MAX_VALUE;

    price = [priceFromValue, priceToValue];
    saveCookieWithFilters('price', price);

    if (!LPP.common.isScreenSizeMin('Md')) {
      return;
    }

    debouncedTriggerFilters();
  }

  function saveCookieWithFilters(cookieName, cookieValue) {
    localStorage.setItem(cookieName, cookieValue);
  }

  function prepareSelectedFiltersFromCookies() {
    checkColorsFromCookie(readCookieWithFilters('colors'));
    checkSizesFromCookie(readCookieWithFilters('sizes'));
    checkAttributesFromCookie(readCookieWithFilters('attribute'));
    setPricesFromCookie(readCookieWithFilters('price'));
    blockEvent = false;
  }

  function readCookieWithFilters(cookieName) {
    return localStorage.getItem(cookieName);
  }

  function checkColorsFromCookie(cookieValue) {
    if (cookieValue != null && cookieValue != '') {
      cookieValue = cookieValue.split(',');
      for (var i = 0; i < cookieValue.length; i++) {
        var el = jQuery('.js-colors #' + cookieValue[i].replace('/', '\\/'));
        if (!el.parent().hasClass('checked')) {
          el.click();
        }
        parseCheckedColors();
      }
    }
  }

  function checkSizesFromCookie(cookieValue) {
    if (cookieValue != null && cookieValue != '') {
      cookieValue = cookieValue.split(',');
      for (var i = 0; i < cookieValue.length; i++) {
        var el = jQuery('.js-sizes #' + cookieValue[i].replace('/', '\\/'));
        if (!el.parent().hasClass('checked')) {
          el.click();
        }
        parseCheckedSizes();
      }
    }
  }

  function checkAttributesFromCookie(cookieValue) {
    if (cookieValue != null && cookieValue != '') {
      cookieValue = cookieValue.split(',');
      for (var i = 0; i < cookieValue.length; i++) {
        var el = jQuery('.js-attribute #' + cookieValue[i].replace('/', '\\/'));
        if (!el.parent().hasClass('checked')) {
          el.click();
        }
        parseCheckedAttributes();
      }
    }
  }

  function setPricesFromCookie(cookieValue) {
    if (cookieValue != null && cookieValue != '') {
      cookieValue = cookieValue.split(',');
      if (cookieValue[0] != null && cookieValue[0] != undefined && Number(cookieValue[0]) !== PRICE_RANGE_MIN_VALUE)
        jQuery('#priceFrom').val(cookieValue[0]);
      if (cookieValue[1] != null && cookieValue[1] != undefined && Number(cookieValue[1]) !== PRICE_RANGE_MAX_VALUE)
        jQuery('#priceTo').val(cookieValue[1]);
    }
  }

  function parseCheckedColors() {
    colors = checkedAttributes($colors);
  }

  function parseCheckedAttributes() {
    attribute = checkedAttributes($attribute);
  }

  function parseCheckedSizes() {
    sizes = checkedAttributes($sizes);
  }

  function checkedAttributes($element) {
    var $checked = $element.find('input:checked'),
      groups = [];

    if ($checked.length !== 0) {
      $checked.each(function () {
        groups.push(this.value);
      });
    }

    return groups;
  }

  function filter() {
    $allItems.removeClass('filter-false');

    if (hasActiveFilters()) {
      concealElements($banners);
      hidePickedColors();

      $items.each(function () {
        var $this = jQuery(this);

        if (itemPassesFilters($this.data())) {
          showElements($this);
        } else {
          concealElements($this);
        }
      });

      jQuery(window).trigger('resize');
    }
  }

  function itemPassesFilters(data) {
    var priceFromFormatted, priceToFormatted, itemPrice;
    // tworzy tablice z elementow data-groups='parametr1,parametr2'
    //object - searchresult :: string - catalog
    //  array2 = ( typeof(data.groups) != 'undefined' && data.groups !== null && data.groups != '' ) ? data.groups.split(',') : []; 1 cecha
    // 3 cechy  array2 = ( typeof(data.groups) != 'undefined' && data.groups !== null && data.groups != '' ) ? typeof(array2)=='object' ? data.groups : data.groups.split(',') : [];

    if ($sizes.length == 0 || $colors.length == 0 || $attribute.length == 0) {
      array2 =
        typeof data.groups != 'undefined' && data.groups !== null && data.groups != ''
          ? typeof data.groups == 'object'
            ? data.groups
            : data.groups.split(',')
          : [];

      //warunek o undefined eliminuje blad flexAnimate przy czyszczeniu filtrowania
      if (typeof data.groups != 'undefined' && $sizes.length + $colors.length + $attribute.length == 2) {
        array2 = data.groups.split(',');
      }
    } else {
      array2 =
        typeof data.groups != 'undefined' && data.groups !== null && data.groups != ''
          ? data.groups.split(',')
          : data.groups;

      //fix dla banera, który nie ma data-groups, ale ma klasę .filtered
      array2 = typeof array2 != 'undefined' ? array2 : [];
    }

    //ROZMIAR
    if ($sizes.length > 0) {
      if (findDataArray(sizes, array2) == 'f') {
        return false;
      }
    }

    //KOLOR
    if ($colors.length > 0) {
      if (findDataColorArray(colors, array2) == 'f') {
        return false;
      }
    }

    //CECHA
    if ($attribute.length > 0) {
      if (findDataArray(attribute, array2) == 'f') {
        return false;
      }
    }

    //CENA
    priceFromFormatted = LPP.price.format(price[0], true);
    priceToFormatted = LPP.price.format(price[1], true);
    itemPrice = LPP.price.format(data.price, true);

    return itemPrice >= priceFromFormatted && itemPrice <= priceToFormatted;
  }

  function hasActiveFilters() {
    return colors.length > 0 || sizes.length > 0 || attribute.length > 0 || price[0] >= 0;
  }

  function resetFilters() {
    var $filterDropdown = jQuery('.filters-group'),
      priceFiltersWrapper = document.getElementById('priceFilters');

    jQuery('.filter-results > p').removeClass('filters-active');

    $filterDropdown.find('input:checkbox').removeAttr('checked');
    jQuery('.filterInfo').html('');

    localStorage.removeItem('colors');
    localStorage.removeItem('sizes');
    localStorage.removeItem('attribute');
    localStorage.removeItem('price');

    showElements($allItems);

    if (jQuery('.sortInfo').find('a').size() === 0) {
      $allItems.each(function () {
        var $this = jQuery(this);

        $this.attr('data-price', $this.find('.colors li.main-color').attr('data-price'));

        if (typeof productsJson !== 'undefined') {
          if ($this.attr('data-id')) {
            var final_price = productsJson[$this.attr('data-id')].final_price;
            $this.find('.price > span:first-child').html(final_price + ' ' + jsVars.current_currency);
          }
        }
      });
    }

    sizes = [];
    colors = [];
    attribute = [];

    jQuery('#priceFrom').val('');
    jQuery('#priceTo').val('');
    price = [0, 999999];

    removeValidationMessagesFromWrapper(priceFiltersWrapper);
  }

  function countFilters() {
    var $priceFrom = jQuery('#priceFrom'),
      $priceTo = jQuery('#priceTo');

    if ($priceFrom.length && $priceTo.length) {
      var filterCount =
        colors.length + sizes.length + attribute.length + $priceFrom.val().length + $priceTo.val().length;
      jQuery('.filterInfo').html(
        filterCount > 0 ? '<a href="#"><i class="ico"></i>' + global.i18n.reset_filters + '</a>' : ''
      );
    }
  }

  function countFiltered() {
    jQuery('#productsCounterValue').html(
      '(' + (jQuery('.filtered').length - jQuery('.banner.filtered, .empty-item.filtered').length) + ')'
    );
  }

  function findDataColorArray(filterArray, productArray) {
    var isFiltered = false;

    filterArray.forEach(function (element) {
      if (productArray.indexOf(element) !== -1) {
        isFiltered = true;
      }
    });

    if (!isFiltered && filterArray.length > 0) {
      return 'f';
    } else {
      return '';
    }
  }

  function findDataArray(array1, array2) {
    var bl = false,
      biggerArray,
      smallerArray,
      i,
      j;

    // sprawdza, która z tablic jest większa, aby przeszukiwać w niej elementy - czy ta z data-groups(array2) czy też zaznaczonych opcji np. (sizes)
    if (array1.length >= array2.length) {
      biggerArray = array1;
      smallerArray = array2;
    } else {
      smallerArray = array1;
      biggerArray = array2;
    }
    // jeśli znajdzie, zwraca el. do sortowanie
    for (i = 0; i < biggerArray.length; i++)
      for (j = 0; j < smallerArray.length; j++) if (biggerArray[i] == smallerArray[j]) bl = true;
    if (!bl && array1.length > 0) {
      return 'f';
    } else return '';
  }

  function sortProducts() {
    var wrapper = document.getElementById('sortMethods');

    if (!wrapper) {
      return;
    }

    jQuery(wrapper)
      .find('input[type=radio]')
      .on('click', function () {
        var sortedArray,
          $this = jQuery(this),
          sort = $this.val(),
          opts = {};

        if (!LPP.common.isScreenSizeMin('Md') && mobileFilters.isMobileSortPopupOpened) {
          sortState.setNewSortMethod(sort);
          return;
        }

        jQuery('.sortInfo').html('<a href="#"><i class="ico"></i>' + global.i18n.reset_sort + '</a>');
        // We're given the element wrapped in jQuery
        switch (sort) {
          case 'date-created':
            opts = {
              reverse: true,
              by: function (element) {
                return element.dataset.dateCreated;
              }
            };
            break;
          case 'price':
            opts = {
              reverse: false,
              by: function (element) {
                return element.dataset.price;
              }
            };
            break;
          case 'price-reversed':
            opts = {
              reverse: true,
              by: function (element) {
                return element.dataset.price;
              }
            };
            break;
          default:
            break;
        }

        concealElements($banners);
        hidePickedColors();

        sortedArray = $items.sort(function (a, b) {
          var x, y, xFormatted, yFormatted;
          if (opts.reverse) {
            x = b;
            y = a;
          } else {
            x = a;
            y = b;
          }
          xFormatted = parseFloat(String(opts.by(x)).replace(/\D/g, ''));
          yFormatted = parseFloat(String(opts.by(y)).replace(/\D/g, ''));

          return xFormatted - yFormatted;
        });

        sortedArray = [].slice.call(sortedArray);

        $items.each(function (index, element) {
          var $this = jQuery(this);
          if ($this.hasClass('filtered')) {
            showElements($this);
          }
          setTimeout(function () {
            $this.css({ order: sortedArray.indexOf(element) });
          }, 200);
        });

        jQuery(window).trigger('resize');
      });
  }

  function showElements($elements) {
    isFirstFiltering($elements);
    $elements.filter(':not(.concealed)').addClass('filtered filtered-reflow');
    setTimeout(function () {
      $elements.filter('.concealed').addClass('filtered filtered-reflow');
      countFiltered();
    }, 200);
    setTimeout(function () {
      $elements.removeClass('concealed');
      $elements.removeClass('filtered-reflow');
    }, 400);
  }

  function concealElements($elements) {
    isFirstFiltering($elements);
    $elements.filter(':not(.concealed)').removeClass('filtered').addClass('concealed concealed-out');
    countFiltered();
    setTimeout(function () {
      $elements.removeClass('concealed-out');
    }, 200);
  }

  function isFirstFiltering($elements) {
    if (!$elements.filter('.filtered, .concealed').length) {
      $elements.addClass('first-filtering');
      setTimeout(function () {
        $elements.removeClass('first-filtering');
      }, 400);
    }
  }

  function hidePickedColors() {
    jQuery('.selected:not(.main-color)').addClass('was-selected').removeClass('selected');
    jQuery('.main-color').addClass('selected');
  }

  function showPickedColors() {
    jQuery('.was-selected').siblings('.selected').removeClass('selected');
    jQuery('.was-selected').addClass('selected').removeClass('was-selected');
  }

  function waitOnAjax() {
    jQuery(document)
      .ajaxStart(function () {
        jQuery('body').addClass('wait');
      })
      .ajaxComplete(function () {
        jQuery('body').removeClass('wait');
      });
  }

  /**
   * Funkcja sprawdzająca czy klucz/przycisk może zostać użyty w polach grupy priceRange
   * @param {String} key
   * @returns {boolean}
   */
  function isValidInputNumberKey(key) {
    return AVAILABLE_KEYS_FOR_PRICE_INPUTS.indexOf(key) >= 0;
  }

  // CUSTOM PRICE RANGE VALIDATION

  /**
   * Funkcja zwraca informację czy wartość dla podanego limitu jest poprawna
   * @param {String} priceRangeType - wartości jakie przyjmuje 'price-from', 'price-to'
   * @returns {boolean}
   */
  function isPriceRangeLimitValid(priceRangeType) {
    var lowerPriceInputEl = document.getElementById('priceFrom'),
      upperPriceInputEl = document.getElementById('priceTo'),
      minValue,
      maxValue,
      validationRule;

    if (!lowerPriceInputEl || !upperPriceInputEl) {
      return false;
    }

    minValue = parseFloat(lowerPriceInputEl.value);
    maxValue = parseFloat(upperPriceInputEl.value);

    minValue = isNaN(minValue) ? PRICE_RANGE_MIN_VALUE : minValue;
    maxValue = isNaN(maxValue) ? PRICE_RANGE_MAX_VALUE : maxValue;

    switch (priceRangeType) {
      case 'price-from':
        validationRule = minValue >= PRICE_RANGE_MIN_VALUE && minValue < maxValue;
        break;
      case 'price-to':
        validationRule = maxValue <= PRICE_RANGE_MAX_VALUE && maxValue > minValue;
        break;
      default:
        return false;
    }

    return validationRule;
  }

  /**
   * Funkcja walidująca inputa o zadanym typie
   * @param {String} priceRangeType - wartości jakie przyjmuje 'price-from', 'price-to'
   */
  function validatePriceRangeLimit(priceRangeType) {
    var lowerPriceInputEl = document.getElementById('priceFrom'),
      upperPriceInputEl = document.getElementById('priceTo'),
      inputEl,
      message;

    switch (priceRangeType) {
      case 'price-from':
        inputEl = lowerPriceInputEl;
        message = global.i18n.price_range_lower_limit_validation_message;
        break;
      case 'price-to':
        inputEl = upperPriceInputEl;
        message = global.i18n.price_range_upper_limit_validation_message;
        break;
      default:
        return;
    }

    if (isPriceRangeLimitValid(priceRangeType)) {
      removeValidationMessage(inputEl);
    } else {
      showValidationMessage(inputEl, message);
    }
  }

  /**
   * Funkcja pokazująca komunikat walidacyjny dla zadanego element 'element'
   * @param {HTMLElement} element - element które ma zostać zwalidowany
   * @param {String} messageValue - treść wiadomości do wyświetlenia
   */
  function showValidationMessage(element, messageValue) {
    if (isValidationMessageAlreadyShowed(element)) {
      return;
    }

    var messageEl = document.createElement('div'),
      parentEl = element.parentNode;

    messageEl.classList.add('validation-message');
    messageEl.innerText = messageValue;

    parentEl.insertAdjacentElement('afterend', messageEl);
  }

  /**
   * Funkcja sprawdzająca czy aktualnie wyświetlany jest komunikat walidacyjny dla podanego elementu
   * @param {HTMLElement} element
   * @returns {Boolean}
   */
  function isValidationMessageAlreadyShowed(element) {
    var parentEl = findParentWithClass(element, 'price-wrapper'),
      validationMessages = parentEl.querySelector('div.validation-message');

    return validationMessages ? true : false;
  }

  /**
   * Funkcja usuwająca istniejące komunikaty walidacyjne dla zadanego elementu
   * @param {HTMLElement} element
   */
  function removeValidationMessage(element) {
    var parentEl = findParentWithClass(element, 'price-wrapper'),
      messageElements = parentEl.querySelectorAll('div.validation-message');

    messageElements.forEach(function (messageEl) {
      parentEl.removeChild(messageEl);
    });
  }

  /**
   * Funkcja usuwająca wszystkie komunikaty walidacyjne w danym elemencie - kontenerze
   * @param {HTMLElement} element
   */
  function removeValidationMessagesFromWrapper(element) {
    var messageElements = element.querySelectorAll('div.validation-message');

    messageElements.forEach(function (messageEl) {
      messageEl.parentElement.removeChild(messageEl);
    });
  }

  return initFilterSort;
})();

var sortState = {
  currentSortMethod: null,
  newSortMethod: null,

  /**
   * Funkcja zwracająca aktualnie wybraną metodę sortowania
   * @returns {(String|null)}
   */
  getCurrentMethod: function() {
    var currentActiveElement = this.getCurrentActiveElement();

    return currentActiveElement ? currentActiveElement.value : null;
  },

  /**
   * Funkcja zwracająca element przypisany do aktualnie wybranej metody sortowania
   * @returns {(String|null)}
   */
  getCurrentActiveElement: function() {
    var inputs = this.getSortButtonsList(),
      currentActiveElement,
      index;

    if (!inputs) {
      return null;
    }

    for (index = 0; index < inputs.length; index++) {
      if (inputs[index].checked) {
        currentActiveElement = inputs[index];
        break;
      }
    }

    return currentActiveElement;
  },

  /**
   * Funkcja aktualizująca stan obiektu 'sortState'
   * @returns {(String|null)}
   */
  updateState: function() {
    this.currentSortMethod = this.getCurrentMethod();
    this.newSortMethod = null;
  },

  /**
   * Funkcja zapisująca wartość nowej metody sortującej do obiektu stanu 'sortState'
   * @param {String} methodName
   */
  setNewSortMethod: function(methodName) {
    this.newSortMethod = methodName;
  },

  /**
   * Funkcja wywołujaca sortowanie produktów
   */
  sortProducts: function() {
    var input = this.getSortButton(this.newSortMethod);

    if (!input) {
      return;
    }

    this.currentSortMethod = this.newSortMethod;
    this.newSortMethod = null;

    jQuery(input).trigger('click');
  },

  /**
   * Funkcja anulująca zmiany wyboru metody sortującej do wcześniejszego stanu
   */
  cancelChanges: function() {
    if (this.currentSortMethod) {
      this.checkSortMethodElement(this.currentSortMethod);
    } else {
      this.uncheckSortMethodsButtons();
    }

    this.newSortMethod = null;
  },

  /**
   * Funkcja zaznaczająca element dla podanej nazwy metody sortującej
   * @param {String} sortMethodName - nazwa metody sortującej
   */
  checkSortMethodElement: function(sortMethodName) {
    var input = this.getSortButton(sortMethodName);

    if (!input) {
      return;
    }

    input.checked = true;
  },

  /**
   * Funkcja odznaczająca wszystkie inputy grupy sortującej
   */
  uncheckSortMethodsButtons: function() {
    var radioButtons = this.getSortButtonsList();

    if (!radioButtons) {
      return;
    }

    radioButtons.forEach(function(button) {
      button.checked = false;
    });
  },

  /**
   * Funkcja zwracająca listę inputów grupy sortującej
   * @returns {Array} lub null
   */
  getSortButtonsList: function() {
    var wrapper = document.getElementById('sortMethodsContent'),
      radioButtons;

    if (!wrapper) {
      return null;
    }

    radioButtons = wrapper.querySelectorAll('input[type=radio][name=sortMethod]');

    return radioButtons ? radioButtons : null;
  },

  /**
   * Funkcja zwracająca input o zadanej nazwie metody sortującej
   * @param {String} sortMethodName
   * @returns {(HTMLElement|null)}
   */
  getSortButton: function(sortMethodName) {
    var wrapper = document.getElementById('sortMethodsContent'),
      input;

    if (!wrapper || !sortMethodName) {
      return null;
    }

    input = wrapper.querySelector('input[type=radio][name=sortMethod][value=' + sortMethodName + ']');

    return input ? input : null;
  },
};

var mobileFilters = {
  openButton: '',
  closeButton: '',
  applyFiltersButton: '',
  wrapperEl: '',
  mobileFiltersChangesRecorder: [],
  isMobileSortPopupOpened: false,
  areFiltersApplied: false,

  /**
   * Główna funkcja inicjująca akcje mobilnego menu filtrów
   * @param {Object} [dependencies]
   * @param {Function} dependencies.filterByAllSelectedParameters
   */
  init: function(dependencies) {
    dependencies = dependencies || {};

    this.openButton = document.getElementById('mobileCategoryFiltersOpenerButton');
    this.closeButton = document.getElementById('mobileCategoryFiltersCloseButton');
    this.applyFiltersButton = document.getElementById('confirmFiltersButton');
    this.wrapperEl = document.getElementById('filters');

    if (!this.openButton || !this.wrapperEl || !this.closeButton || !this.applyFiltersButton) {
      return;
    }

    this.openButton.addEventListener('click', function() {
      mobileFilters.updateAllFiltersGroupCounters();

      if (mobileFilters.openButton.classList.contains('opened')) {
        mobileFilters.close();
        return;
      }

      mobileFilters.open();
    });

    this.closeButton.addEventListener('click', function() {
      mobileFilters.updateAllFiltersGroupCounters();
      mobileFilters.close();
    });

    this.applyFiltersButton.addEventListener('click', function() {
      mobileFilters.updateAllFiltersGroupCounters();

      if (dependencies.filterByAllSelectedParameters) {
        dependencies.filterByAllSelectedParameters();
      }

      sortState.sortProducts();
      mobileFilters.close();
    });

    this.handleColorFiltersActions();
    this.handleSizeFiltersActions();
    this.handleCharacteristicFiltersActions();
    this.handleSortMethodsActions();

    this.changePriceRangeInputsType();

    window.addEventListener('resize', function() {
      debouncedChangePriceRangeInputsType();
    });
  },

  /**
   * Funkcja odpowiedzialna za otwarcie mobilnego menu filtrów
   */
  open: function() {
    this.openButton.classList.add('opened');
    this.wrapperEl.classList.add('opened');
  },

  /**
   * Funkcja odpowiedzialna za zamknięcie mobilnego menu filtrów
   */
  close: function() {
    this.openButton.classList.remove('opened');
    this.wrapperEl.classList.remove('opened');
  },

  /**
   * Fabryka generująca funkcję obsługującą akcje dla grupy filtrów
   * @param {String} buttonId
   * @param {String} contentId
   * @param {String} counterName
   * @param {String} popupTitle
   */
  handleFiltersGroupActions: function(buttonId, contentId, counterName, popupTitle) {
    var filtersButton = document.getElementById(buttonId),
      filtersContent = document.getElementById(contentId),
      filtersPopup;

    if (!filtersButton && !filtersContent) {
      return;
    }

    filtersPopup = new LPP.Popup({
      title: popupTitle,
      content: filtersContent,
      keepContent: false,
      cssClass: ['filters-popup', 'mobile-now'],
      onCreateCallback: function() {
        mobileFilters.addActionButtonsToPopup(this.id);
        sortState.updateState();
      },
      onClosedCallback: function() {
        window.scrollTo(0, 0);

        if (mobileFilters.areFiltersApplied) {
          mobileFilters.areFiltersApplied = false;
          return;
        }

        mobileFilters.cancelChangesOfFilters();
      },
    });

    filtersButton.addEventListener('click', function() {
      if (LPP.common.isScreenSizeMin('Md')) {
        return;
      }
      mobileFilters.resetMobileFiltersChangesRecorder();
      filtersPopup.open();
    });
  },

  /**
   * Funkcja inicjująca obsługę filtrów kolorów na urządzeniach mobilnych
   */
  handleColorFiltersActions: function() {
    this.handleFiltersGroupActions(
      'colorFiltersHeader',
      'colorFiltersContent',
      'colorFilters',
      global.i18n.choose_color
    );
  },

  /**
   * Funkcja inicjująca obsługę filtrów rozmiarów na urządzeniach mobilnych
   */
  handleSizeFiltersActions: function() {
    this.handleFiltersGroupActions('sizeFiltersHeader', 'sizeFiltersContent', 'sizeFilters', global.i18n.choose_size);
  },

  /**
   * Funkcja inicjująca obsługę filtrów charakterystyk na urządzeniach mobilnych
   */
  handleCharacteristicFiltersActions: function() {
    this.handleFiltersGroupActions(
      'characteristicFiltersHeader',
      'characteristicFiltersContent',
      'characteristicFilters',
      global.i18n.choose_characteristic
    );
  },

  /**
   * Funkcja inicjująca obsługę metod sortujących na urządzeniach mobilnych
   */
  handleSortMethodsActions: function() {
    var sortMethodsButton = document.getElementById('sortMethodsHeader'),
      sortMethodsContent = document.getElementById('sortMethodsContent'),
      sortMethodsPopup;

    if (!sortMethodsButton || !sortMethodsContent) {
      return;
    }

    sortMethodsPopup = new LPP.Popup({
      title: global.i18n.choose_sort_method,
      content: sortMethodsContent,
      keepContent: false,
      cssClass: ['filters-popup', 'mobile-now'],
      onCreateCallback: function() {
        mobileFilters.addActionButtonsToPopup(this.id);
        sortState.updateState();
      },
      onClosedCallback: function() {
        mobileFilters.isMobileSortPopupOpened = false;
        window.scrollTo(0, 0);

        if (mobileFilters.areFiltersApplied) {
          mobileFilters.areFiltersApplied = false;
          return;
        }

        sortState.cancelChanges();
      },
    });

    sortMethodsButton.addEventListener('click', function() {
      if (LPP.common.isScreenSizeMin('Md')) {
        return;
      }

      mobileFilters.isMobileSortPopupOpened = true;
      sortMethodsPopup.open();
    });
  },

  /**
   * Funkcja rejestrująca zmiany (zaznaczenie, odznaczenie) filtrów, w mobilnym menu filtrów
   * @param {HTMLElement} filterEl - aktualnie klikany element/filtr
   */
  recordChangesOfFilters: function(filterEl) {
    var value = filterEl.value,
      filterIndex = this.mobileFiltersChangesRecorder.indexOf(value);

    if (filterIndex >= 0) {
      this.mobileFiltersChangesRecorder.splice(filterIndex, 1);
    } else {
      this.mobileFiltersChangesRecorder.push(value);
    }
  },

  /**
   * Funkcja cofająca zmiany (zaznaczenie, odznaczenie) filtrów, w mobilnym menu filtrów
   */
  cancelChangesOfFilters: function() {
    var changes = this.mobileFiltersChangesRecorder.slice(),
      filterEl;

    changes.forEach(function(filterValue) {
      filterEl = document.getElementById(filterValue);
      jQuery(filterEl).trigger('click');
    });

    this.resetMobileFiltersChangesRecorder();
  },

  /**
   * Funkcja resetujaca zawartosc 'mobileFiltersChangesRecorder'
   */
  resetMobileFiltersChangesRecorder: function() {
    this.mobileFiltersChangesRecorder = [];
  },

  /**
   * Funkcja dodająca customowe przyciski akcji dla popupu - zamknij i zatwierdź
   */
  addActionButtonsToPopup: function(popupId) {
    var popupInstance, popupContentEl, cancelButton, confirmButton, actionButtonsWrapper;

    if (!popupId) {
      return;
    }

    popupInstance = LPP.Popup.instances[popupId];
    popupContentEl = popupInstance.contentEl;

    if (!popupInstance && !popupContentEl) {
      return;
    }

    cancelButton = this.createButton({
      text: global.i18n.cancel,
      classes: ['btn', 'btn-normal'],
      onClickFunction: function() {
        popupInstance.close();
      },
    });

    confirmButton = this.createButton({
      text: global.i18n.confirm,
      classes: ['btn', 'btn-primary'],
      onClickFunction: function() {
        mobileFilters.updateAllFiltersGroupCounters();
        mobileFilters.areFiltersApplied = true;
        popupInstance.close();
      },
    });

    // CREATE WRAPPER

    actionButtonsWrapper = document.createElement('div');
    actionButtonsWrapper.classList.add('filters-popup-action-buttons', 'mobile-now');

    actionButtonsWrapper.appendChild(cancelButton);
    actionButtonsWrapper.appendChild(confirmButton);
    popupContentEl.appendChild(actionButtonsWrapper);
  },

  /**
   * Funkcja tworzaca element button
   * @param {Object} Params
   * @param {String} Params.text
   * @param {Array} Params.classes
   * @param {Function} Params.onClickFunction
   */
  createButton: function(params) {
    var button, textNode, text, classes, onClickFunction;

    params = params || {};

    text = params.text;
    classes = params.classes;
    onClickFunction = params.onClickFunction;

    button = document.createElement('button');
    button.type = 'button';

    if (text) {
      textNode = document.createTextNode(text);
    }

    button.appendChild(textNode);

    if (classes) {
      classes.forEach(function(className) {
        button.classList.add(className);
      });
    }

    if (onClickFunction) {
      button.addEventListener('click', function() {
        onClickFunction();
      });
    }

    return button;
  },

  /**
   * Funkcja zliczająca ilość wybranych filtrów dla elementu o podanym ID
   * @param {String} filterGroupWrapperId - id elementu zawierającą konkretną grupę filtrów
   * @returns {Number} - liczba wybranych filtrów
   */
  countCheckedFilters: function(filterGroupWrapperId) {
    var wrapperEl = document.getElementById(filterGroupWrapperId),
      inputs,
      counter = 0;

    inputs = wrapperEl.querySelectorAll('input[type=checkbox]');

    inputs.forEach(function(input) {
      if (input.checked) {
        counter++;
      }
    });

    return counter;
  },

  /**
   * Funkcja aktualizująca licznik wybranych filtrów, w mobilnym menu filtrów dla elementu o podanym ID
   * @param {String} filterGroupWrapperId - id elementu zawierającą konkretną grupę filtrów
   */
  updateFiltersGroupCounter: function(filterGroupWrapperId, filtersListId) {
    var wrapperEl = document.getElementById(filterGroupWrapperId),
      listEl = document.getElementById(filtersListId),
      counterValue = 0,
      counterEl;

    if (!wrapperEl || !listEl) {
      return;
    }

    counterValue = this.countCheckedFilters(filtersListId);
    counterEl = wrapperEl.querySelector('.filters-group-counter');

    if (!counterValue) {
      counterEl.style.display = 'none';
    } else {
      counterEl.style.removeProperty('display');
    }

    counterEl.innerHTML = '(' + counterValue + ')';
  },

  /**
   * Funkcja pomocnicza aktualizująca liczniki wszystkich grup filtrów w mobilnym menu filtrów
   */
  updateAllFiltersGroupCounters: function() {
    this.updateFiltersGroupCounter('characteristicFilters', 'characteristicFiltersContent');
    this.updateFiltersGroupCounter('colorFilters', 'colorFiltersContent');
    this.updateFiltersGroupCounter('sizeFilters', 'sizeFiltersContent');
  },

  /**
   * Funkcja zmieniajaca typ elementu input o zadanym ID
   * @param {String} [elementId] - ID elementu
   * @param {String} [typeToChangeWith] - nowy typ inputa
   */
  changeInputType: function(elementId, typeToChangeWith) {
    var element;

    if (!elementId || !typeToChangeWith) {
      return;
    }

    element = document.getElementById(elementId);

    if (!element) {
      return;
    }

    element.type = typeToChangeWith;
  },

  /**
   * Funkcja zmieniajaca typu inputow grupy filtrow priceRange
   */
  changePriceRangeInputsType: function() {
    if (!LPP.common.isScreenSizeMin('Md')) {
      mobileFilters.changeInputType('priceFrom', 'number');
      mobileFilters.changeInputType('priceTo', 'number');
    } else {
      mobileFilters.changeInputType('priceFrom', 'text');
      mobileFilters.changeInputType('priceTo', 'text');
    }
  },
};

var debouncedChangePriceRangeInputsType = debounce(mobileFilters.changePriceRangeInputsType, 500);

var JsonProductItem;

(function(JsonProductItem) {
  var $container = false;

  /**
   *
   * @param {Object} options
   * @param {Function} options.fnOnElementProcess
   * @param {Function} options.fnCompleteCallback
   * @returns {Object} JsonProductItem
   */
  JsonProductItem.loadVisibleElements = function(options) {
    options = options || {};

    var fnOnElementProcess = options.fnOnElementProcess,
      fnCompleteCallback = options.fnCompleteCallback,
      $elements = _getContainer().getVisibleItems();

    $elements.each(function() {
      var item = jQuery(this);
      var json = productsJson[item.parents('.item:first').data('id')];

      if (!item.data('loaded')) {
        item.html(JsonProductItem.getHtmlFromJson(json));
        item.data('loaded', 1);

        if (fnOnElementProcess !== undefined && typeof fnOnElementProcess === 'function') {
          fnOnElementProcess(item);
        }
      }
    });

    if (fnCompleteCallback !== undefined && typeof fnCompleteCallback === 'function') {
      fnCompleteCallback(this, $elements);
    }
    return this;
  };

  /**
   *
   * @param fnCompleteCallback
   * @returns {JsonProductItem}
   */
  JsonProductItem.unloadInvisibleElements = function(fnCompleteCallback) {
    var $elements = _getContainer().getInvisibleItems();
    $elements.html('<ul class="product-models"></ul>');
    $elements.data('loaded', 0);

    if (fnCompleteCallback !== undefined && typeof fnCompleteCallback === 'function') {
      fnCompleteCallback(this, $elements);
    }

    return this;
  };

  JsonProductItem.getHtmlFromJson = function(json) {
    var html = '',
      stickerColor,
      itemPhoto,
      itemBackPhoto,
      selected = '';

    if (json.sticker && !json.is_coming_soon) {
      stickerColor =
        json.stickerAuto !== false && json.sticker === 'Sale'
          ? ''
          : typeof json.stickerColor !== 'undefined' && json.stickerColor.length > 0
          ? 'style="color:' + json.stickerColor + '"'
          : '';

      html +=
        '<span class="subtitle ' +
        json.sticker.replace('/', '') +
        '"><span class="color" ' +
        stickerColor +
        '>' +
        json.sticker +
        '</span></span>';
    }
    //slides
    html += '<ul class="product-models">';
    jQuery.each(json.model, function(k, item) {
      selected = item.model_color === 'main-color' ? 'selected' : '';

      if (window.devicePixelRatio && window.devicePixelRatio >= 2) {
        itemPhoto = item.item_photo_retina;
        itemBackPhoto = item.item_back_photo_retina;
      } else {
        itemPhoto = item.item_photo;
        itemBackPhoto = item.item_back_photo;
      }

      jQuery.each(item['data-groups'], function(ik, el) {
        if (el.substr(0, 5) == 'color') {
          item.sample_color = el;
        }
        if (el.substr(0, 5) == 'price') {
          item.sample_price = el;
        }
      });
      html +=
        '<li class="' + item.sample_color + ' ' + item.sample_price + ' ' + item.model_color + ' ' + selected + '">';
      html +=
        '<a href="' +
        item.item_url +
        '" ' +
        'class="product-link" ' +
        'style="background-image: url(' +
        itemPhoto +
        ');">' +
        '<div class="hover-photo" style="background-image: url(' +
        itemBackPhoto +
        '); opacity: 0;"></div>';
      html += '</a></li>';
    });
    html += '</ul>';

    //options
    html += '<div class="options">';
    //add to cart
    if (json.is_commercial) {
      html += '<div class="add-to-cart">';
      jQuery.each(json.model, function(k, item) {
        selected = item.model_color === 'main-color' ? 'selected ' : '';
        html +=
          '<a href="#quickshop-container" class="btn btn-primary quick-shop cboxElement ' +
          item.model_color +
          ' ' +
          selected +
          (item.is_coming_soon ? 'coming-soon' : '') +
          '" data-product-id="' +
          item.item_product_id +
          '" >' +
          item.quickshop_msg +
          '<span class="ico"></span></a>';
      });
      html += '</div>';
    }
    html += '</div>';

    return html;
  };

  /**
   *
   * @returns {VisibleItemsContainer}
   * @private
   */
  function _getContainer() {
    if (!$container) {
      $container = new VisibleItemsContainer(jQuery('.category-layout div.item figure'));
    }
    return $container;
  }
})(JsonProductItem || (JsonProductItem = {}));

var VisibleItemsContainer = (function() {
  var $elements;
  var $window = false;

  function VisibleItemsContainer($allElements) {
    if ($allElements instanceof jQuery == false) {
      $allElements = jQuery('div');
    }
    $elements = $allElements;
    return this;
  }

  /**
   *
   * @returns {Array|*}
   */
  VisibleItemsContainer.prototype.getVisibleItems = function() {
    return _getFilteredElements(false);
  };

  /**
   *
   * @returns {Array|*}
   */
  VisibleItemsContainer.prototype.getInvisibleItems = function() {
    return _getFilteredElements(true);
  };

  /**
   *
   * @param invisible
   * @returns {Array|*}
   * @private
   */
  function _getFilteredElements(invisible) {
    var windowTopLimit = _getWindow().scrollTop(),
      d = document,
      elem = d.compatMode === 'CSS1Compat' ? d.documentElement : d.body,
      windowBottomLimit = windowTopLimit + elem.clientHeight,
      offset = 480;

    return $elements.filter(function() {
      var topLimit = jQuery(this).offset().top;
      var bottomLimit = topLimit + jQuery(this).height();
      return invisible
        ? topLimit > windowBottomLimit + offset || bottomLimit < windowTopLimit - offset
        : (bottomLimit <= windowBottomLimit + offset && bottomLimit >= windowTopLimit - offset) ||
            (topLimit >= windowTopLimit && topLimit <= windowBottomLimit);
    });
  }

  /**
   *
   * @returns {jQuery}
   * @private
   */
  function _getWindow() {
    if (!$window) {
      $window = jQuery(window);
    }
    return $window;
  }

  return VisibleItemsContainer;
})();

(function() {
  var update = function() {
    JsonProductItem.loadVisibleElements({ fnOnElementProcess: initCategoryLayout }).unloadInvisibleElements();
  };
  jQuery(window).on('finished_loading_main_js', function() {
    if (!jQuery('.category-bricks').length || jQuery('.wishlist-panel').length) {
      return;
    }
    jQuery(window).on(
      'scroll',
      jQuery.throttle(300, function() {
        if (!jsVars.preventScrollEvent) {
          update();
        }
      })
    );
    jQuery(window).on(
      'resize',
      jQuery.throttle(300, function() {
        setTimeout(update, 250);
      })
    );
    update();
    //mobile category fix
    if (/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)) {
      setTimeout(function() {
        jQuery(window).trigger('resize');
      }, 500);
    }
    //mobile category fix
  });
})();

(function($) {
  $.fn.disableSelection = function() {
    return this.attr('unselectable', 'on').on('selectstart', false);
  };

  $.fn.zoomImage = function(options) {
    var settings = jQuery.extend(
        {
          wrapper: '.product-slider',
        },
        options
      ),
      $body = $('body'),
      $window = $(window),
      $document = $(document),
      $zoomModal,
      $closeButton,
      isDragging = false,
      initialDragFromX,
      initialDragFromY,
      currentDragFromX,
      currentDragFromY,
      currentScrollLeft,
      currentScrollTop,
      computedScrollLeft,
      computedScrollTop,
      slider = $(settings.wrapper),
      images,
      activeImage = 0,
      $imageWrapper,
      $image;

    $('.zoomImage, .zoom-image')
      .disableSelection()
      .click(function(e) {
        zoom.open();
        e.preventDefault();
      });

    $('.product-container')
      .on('mousemove', '.flex-control-nav', function(e) {
        e.preventDefault();
        var xPos = 0;
        if (e.offsetX === undefined) {
          // this works for Firefox
          xPos = e.pageX - $(this).offset().left;
        } else {
          // works in Google Chrome
          xPos = e.offsetX;
        }
        if (xPos > $(this).outerWidth()) {
          $('.flex-control-nav').addClass('hover-zoom');
        } else {
          $('.flex-control-nav').removeClass('hover-zoom');
        }
      })
      .on('mouseleave', '.flex-control-nav', function(e) {
        $('.flex-control-nav').removeClass('hover-zoom');
      })
      .on('click', '.flex-control-nav', function(e) {
        e.preventDefault();
        var xPos = 0;
        if (e.offsetX === undefined) {
          // this works for Firefox
          xPos = e.pageX - $(this).offset().left;
        } else {
          // works in Google Chrome
          xPos = e.offsetX;
        }
        if (xPos > $(this).outerWidth()) {
          $('.zoomImage').disableSelection();
          zoom.open();
        }
      });

    zoom = {
      open: function() {
        images = (function($t) {
          var tab = [];
          $t.each(function() {
            if (isMobile) {
              tab.push($(this).data('original-mobile'));
            } else {
              tab.push($(this).data('original'));
            }
          });
          return tab;
        })($('ul.slides .zoomImage'));

        activeImage = $('li.flex-active-slide').index();

        $zoomModal = $('<div>').attr({ id: 'zoom' });
        $closeButton = $('<span>')
          .attr('id', 'zoom-image-close')
          .html('×')
          .appendTo($zoomModal)
          .click(zoom.close);

        $imageWrapper = $('<div>')
          .attr({ id: 'imageWrapper', class: 'image-wrapper' })
          .appendTo($zoomModal);

        $image = $('<img>')
          .disableSelection()
          .attr('draggable', false)
          .appendTo($imageWrapper);

        var $nextButton = $('<button type="button" class="flex-next">')
          .appendTo($zoomModal)
          .click(function(event) {
            event.stopPropagation();
            zoom.nextImage(event);
          });

        var $prevButton = $('<button type="button" class="flex-prev">')
          .appendTo($zoomModal)
          .click(function(event) {
            event.stopPropagation();
            zoom.prevImage(event);
          });

        $zoomModal
          .on('mousedown touchstart', zoom.initDragImage)
          .on('mousemove touchmove', zoom.dragImage)
          .on('mousedown', zoom.markAsGrabbed)
          .on('mouseup', zoom.markAsNormal)
          // FF fix for [draggable=false]
          .on('dragstart', function() {
            return false;
          });

        $window.on('mouseup touchend', zoom.finishDragImage);

        $zoomModal.appendTo('body');
        $body.addClass('no-scroll');
        $document.on('keydown', zoom.lockScroll).on('keyup', zoom.keys);
        zoom.showImage();

        // Prevent dragging images
        $document.on('dragstart', function(event) {
          if (event.target.nodeName.toUpperCase() === 'IMG') {
            event.preventDefault();
          }
        });
      },
      showImage: function() {
        var url = (isMobile ? '' : jsVars.mediaURL) + images[activeImage];

        LPP.common.openSpinner({
          parentSelector: '#zoom',
          withModal: true,
          keepContent: true,
        });

        if (
          $('.flex-active-slide')
            .find('.zoomImage')
            .hasClass('square-image')
        ) {
          $image.addClass('square-image');
        }

        $image
          .attr({ src: url })
          .off('load')
          .on('load', function() {
            $zoomModal.scrollLeft(0).scrollTop(0);
            LPP.common.closeSpinner();
          });
      },
      initDragImage: function(event) {
        isDragging = true;
        initialDragFromX = event.pageX || event.originalEvent.targetTouches[0].pageX;
        initialDragFromY = event.pageY || event.originalEvent.targetTouches[0].pageY;
        currentScrollLeft = parseInt($zoomModal.scrollLeft(), 10) || 0;
        currentScrollTop = parseInt($zoomModal.scrollTop(), 10) || 0;
      },
      dragImage: function(event) {
        event.preventDefault();

        currentDragFromX = event.pageX || event.originalEvent.targetTouches[0].pageX;
        currentDragFromY = event.pageY || event.originalEvent.targetTouches[0].pageY;

        computedScrollLeft = currentScrollLeft + initialDragFromX - currentDragFromX;
        computedScrollTop = currentScrollTop + initialDragFromY - currentDragFromY;

        if (isDragging) {
          $zoomModal.scrollLeft(computedScrollLeft);
          $zoomModal.scrollTop(computedScrollTop);
        }
      },
      finishDragImage: function() {
        isDragging = false;
      },
      nextImage: function(e) {
        activeImage++;
        if (activeImage === images.length) {
          activeImage = 0;
        }
        zoom.showImage();
        e.preventDefault();
      },
      prevImage: function(e) {
        activeImage--;
        if (activeImage < 0) {
          activeImage = images.length - 1;
        }
        zoom.showImage();
        e.preventDefault();
      },
      close: function() {
        $('ol.flex-control-nav a')
          .eq(activeImage)
          .trigger('click');

        $zoomModal.fadeOut(200, function() {
          $zoomModal.remove();
          $closeButton.remove();
        });

        $document.unbind('keyup', zoom.keys);
        $body.removeClass('no-scroll');
        $window.scrollTop(0);
      },
      markAsGrabbed: function() {
        $zoomModal.addClass('grabbed');
      },
      markAsNormal: function() {
        $zoomModal.removeClass('grabbed');
      },
      lockScroll: function(event) {
        switch (event.key) {
          case LPP.common.key.LEFT:
          case LPP.common.key.RIGHT:
            event.preventDefault();
            break;
          default:
            break;
        }
      },
      keys: function(event) {
        switch (event.key) {
          case LPP.common.key.LEFT:
            $body.scrollLeft(0);
            zoom.prevImage(event);
            break;
          case LPP.common.key.RIGHT:
            $body.scrollLeft(0);
            zoom.nextImage(event);
            break;
          case LPP.common.key.ESC:
            zoom.close();
            break;
          default:
            break;
        }
      },
      isTargetAnImage: function(event) {
        return event.target.nodeName.toLowerCase() === 'img';
      },
    };
  };
})(jQuery);

var initMobileShoppingMenu = (function() {
  var menuHamburger, overlay, menu, resizeTimer;

  function initMobileShoppingMenu() {
    var submenuOpenerSelector = '.sub-menu > li:not(.menu-link-container)';

    menuHamburger = document.querySelector('#menuHamburger');
    if (menuHamburger) {
      overlay = document.querySelector('#mobileMenuOverlay');
      menu = document.querySelector('#menu');
      menuHamburger.addEventListener('click', toggleMobileMenu);
      addClassToMenuLinks();
      menu.querySelectorAll(submenuOpenerSelector).forEach(addSubmenuOpenerClickHandler);
      expandCurrentSection();
      overlay.addEventListener('click', toggleMobileMenu);
      document.addEventListener('keydown', function(event) {
        closeOnEscIfOpened(event);
      });
      window.addEventListener('resize', hideMenuIfNeededOnResizeEnds);
    }
  }

  function addClassToMenuLinks() {
    document.querySelectorAll('#menu .sub-menu > li').forEach(function(li) {
      if (li.children.length === 1) {
        li.classList.add('menu-link-container');
        li.children[0].classList.add('menu-link');
      }
    });
  }

  function addSubmenuOpenerClickHandler(submenuOpener) {
    submenuOpener.addEventListener('click', function(event) {
      var liElement = event.target.parentNode;

      if (!event.target.classList.contains('menu-link')) {
        event.preventDefault();
      }
      event.stopPropagation();

      if (isSubmenuOpen(liElement)) {
        closeSubmenu(liElement);
      } else {
        closeAllSubmenusOnTheSameLevel(liElement);
        openSubmenu(liElement);
      }
    });
  }

  function isSubmenuOpen(opener) {
    return opener.classList.contains('sub-menu-open');
  }

  function closeSubmenu(opener) {
    opener.classList.remove('sub-menu-open');
    opener.querySelector('.sub-menu').classList.add('hidden');
  }

  function closeAllSubmenusOnTheSameLevel(opener) {
    var parentUlElement = opener.parentNode,
      allLiElements = parentUlElement.children;

    allLiElements.forEach(removeOpenClass);

    function removeOpenClass(node) {
      node.classList.remove('sub-menu-open');
      node.children.forEach(function(childNode) {
        if (childNode.classList.contains('sub-menu')) {
          childNode.classList.add('hidden');
        }
      });
    }
  }

  function openSubmenu(opener) {
    opener.classList.add('sub-menu-open');
    opener.children.forEach(function(node) {
      if (node.nodeName === 'UL') {
        node.classList.remove('hidden');
      }
    });
  }

  function closeOnEscIfOpened(event) {
    if (event.keyCode === 27 && document.querySelector('.menu-hamburger.opened')) {
      toggleMobileMenu();
    }
  }

  function toggleMobileMenu() {
    menuHamburger.classList.toggle('opened');
    overlay.classList.toggle('visible');
    toggleScrolling();

    function toggleScrolling() {
      if (isVisible(overlay)) {
        overlay.addEventListener('touchmove', preventDefault);
      } else {
        overlay.removeEventListener('touchmove', preventDefault);
      }

      document.querySelector('html').classList.toggle('oh');
    }

    function isVisible(node) {
      return node.classList.contains('visible');
    }

    // poniższa funkcja utworzona, żeby było możliwe użycie overlay.removeEventListener
    function preventDefault(e) {
      e.preventDefault();
    }
  }

  function expandCurrentSection() {
    var currentSection = document.querySelector('#menu .current');

    if (!currentSection) {
      return;
    }

    expandAllParentSubmenus(currentSection);

    function expandAllParentSubmenus(node) {
      var parent = node.parentNode,
        grandParent = parent.parentNode;

      if (parent.classList.contains('sub-menu') && grandParent && grandParent.nodeName === 'LI') {
        openSubmenu(grandParent);
      }

      if (!parent.classList.contains('oh')) {
        expandAllParentSubmenus(parent);
      }
    }
  }

  function hideMenuIfNeededOnResizeEnds() {
    if (resizeTimer) {
      clearTimeout(resizeTimer);
    }
    resizeTimer = setTimeout(hideMenuIfNeeded, 200);

    function hideMenuIfNeeded() {
      if (window.innerWidth > RESERVED.tablet) {
        menuHamburger.classList.remove('opened');
        overlay.classList.remove('visible');
        document.querySelector('html').classList.remove('oh');
      }
    }
  }

  return initMobileShoppingMenu;
})();

var userMenu = {
  location: window.location,
  menuList: '',
  itemsArray: [],

  init: function() {
    this.menuList = document.getElementById('userMenu');

    if (!this.menuList) {
      return;
    }

    this.initMenuItemsArray();
    this.markActiveMenuItem(userMenu.itemsArray);
    this.menuList.addEventListener('touchstart', userMenu.touchstartHandler.bind(this));
  },
  initMenuItemsArray: function() {
    userMenu.itemsArray = [
      {
        name: 'myAccount',
        menuItemId: 'myAccountMenu',
        url: [jsVars.customerAccountPageUrl, jsVars.salesOrderHistoryPageUrl],
      },
      {
        name: 'catalogSearch',
        menuItemId: 'topSearchMenu',
        url: [jsVars.catalogSearchPageUrl],
      },
      {
        name: 'wishlist',
        menuItemId: 'wishlistMenu',
        url: [jsVars.wishlistPageUrl],
      },
      {
        name: 'cart',
        menuItemId: 'checkoutmenu',
        url: [jsVars.checkoutCartPageUrl],
      },
      {
        name: 'storeSwitcher',
        menuItemId: 'storeSwitcherMenu',
        url: [jsVars.storeSwitcherPageUrl],
      },
    ];
  },
  touchstartHandler: function(event) {
    if (event.target.nodeName === 'A') {
      this.location.href = event.target.href;
    } else if (event.target.parentNode.nodeName === 'A') {
      this.location.href = event.target.parentNode.href;
    }
  },

  markActiveMenuItem: function(itemsArray) {
    var indexOfArray, indexOfSubArray, menuItem, item;

    for (indexOfArray = 0; indexOfArray < itemsArray.length; indexOfArray++) {
      item = itemsArray[indexOfArray];
      for (indexOfSubArray = 0; indexOfSubArray < item.url.length; indexOfSubArray++) {
        if (this.isCurrentLocation(item.url[indexOfSubArray])) {
          menuItem = document.getElementById(item.menuItemId);

          if (!menuItem) {
            return;
          }

          menuItem.classList.add('selected');
          return;
        }
      }
    }
  },

  isCurrentLocation: function(address) {
    var currentLocation = userMenu.location.href.split('//').pop();
    address = address.split('//').pop();

    return currentLocation.indexOf(address) !== -1;
  },
};

// Obsługa formularza wyszukiwarki

var initSearchBar = function() {
  var searchElement = document.querySelector('#topSearchMenu'),
    searchButton,
    searchInput,
    searchForm,
    openClassName,
    searchSlideOut,
    searchSlideIn;

  if (!searchElement) {
    return;
  }

  searchForm = searchElement.querySelector('form');
  searchButton = searchElement.querySelector('#searchButton');
  searchInput = searchElement.querySelector('.top-search');
  openClassName = 'is-open';

  if (searchButton) {
    searchButton.addEventListener('click', function(event) {
      event.preventDefault();
      event.stopPropagation();

      if (this.classList.contains(openClassName)) {
        if (window.matchMedia('(min-width: 1200px)').matches) {
          if (searchInput.value.trim() !== '') {
            searchForm.submit();
          } else {
            searchInput.focus();
          }
        } else {
          searchSlideOut();
        }
      } else {
        searchSlideIn();
      }
    });
  }

  if (searchInput) {
    searchInput.addEventListener('focusout', function(event) {
      if (event.relatedTarget !== searchButton) {
        searchSlideOut();
      }
    });

    searchInput.addEventListener('keyup', function(event) {
      var enterKeyCode = 13;
      if (event.keyCode === enterKeyCode && searchInput.value.trim() !== '') {
        searchForm.submit();
      }
    });
  }

  searchSlideOut = function() {
    if (searchForm) {
      searchForm.classList.remove('slide-in');
      searchForm.classList.add('slide-out');
    }
    if (searchButton) {
      searchButton.classList.remove(openClassName);
    }
  };

  searchSlideIn = function() {
    if (searchButton) {
      searchButton.classList.add(openClassName);
    }
    if (searchForm) {
      searchForm.classList.remove('slide-out');
      searchForm.classList.add('slide-in');
    }
    if (searchInput) {
      searchInput.focus();
    }
  };
};

window.fbAsyncInit = function () {
  const cookieService = LegacyBridge.getCookieService();

  function initFb() {
    FB.init({
      appId: global.facebook.appId,
      channelUrl: global.facebook.channelUrl,
      status: cookieService.isAnalyticsCookiesAccepted(),
      cookie: cookieService.isMarketingCookiesAccepted(),
      oauth: true,
      xfbml: cookieService.isMarketingCookiesAccepted()
    });
  }

  cookieService.fireWhenResponded(initFb);
};

(function (d) {
  var js,
    id = 'facebook-jssdk';
  if (d.getElementById(id)) {
    return;
  }
  js = d.createElement('script');
  js.id = id;
  js.async = true;
  js.src = document.location.protocol + '//connect.facebook.net/' + global.languageCode + '/all.js';
  document.head.appendChild(js);
})(document);

/**
 * Created by jpl on 27.05.14.
 */
var Storelocator = {
  map: null,

  initEvents: function() {
    jQuery('.find-shop-form').submit(function() {
      var url = jQuery(this).data('post-href');
      Storelocator.getStores(jQuery(this).serialize(), url, 17);
      return false;
    });

    jQuery('.enable-geo').click(function() {
      var url = jQuery(this).data('post-href');
      if (navigator.geolocation) {
        navigator.geolocation.getCurrentPosition(function(location) {
          var query = '';
          query += 'point[lng]=' + location.coords.longitude;
          query += '&point[lat]=' + location.coords.latitude;
          Storelocator.getStores(query, url, 15);
        });
      }
    });
  },

  showError: function(message) {
    if (message === null) {
      MessageBox.error('Nieoczekiwany błąd.');
    } else {
      MessageBox.notice(message);
    }
  },

  zoomStore: function(lat, lng, zoom) {
    var latLng = new google.maps.LatLng(lat, lng);
    Storelocator.map.setZoom(zoom);
    Storelocator.map.panTo(latLng);
  },

  showAllStores: function(url) {
    jQuery
      .ajax({
        url: url,
        type: 'GET',
        dataType: 'json',
        success: function(json) {
          result = json;
          if (json.status == false) {
            Storelocator.showError(json.message);
            return false;
          }
          Storelocator.bound(json.content.bounds);
          jQuery('.stores-list').html('');
        },
      })
      .fail(function() {
        Storelocator.showError();
      });
  },

  bound: function(bounds) {
    var gBounds = new google.maps.LatLngBounds(
      new google.maps.LatLng(bounds.northeast.lat, bounds.northeast.lng),
      new google.maps.LatLng(bounds.southwest.lat, bounds.southwest.lng)
    );
    Storelocator.map.fitBounds(gBounds);
  },

  getStores: function(data, url, zoom) {
    var result = null;
    jQuery
      .ajax({
        url: url,
        type: 'POST',
        dataType: 'json',
        data: data,
        success: function(json) {
          if (json.status == false) {
            Storelocator.showError(json.message);
            return false;
          }
          result = json;
          jQuery('.stores-list').html('');
          Storelocator.bound(json.content.bounds);
          json.content.stores.forEach(function(store) {
            var open_hours = '';
            store.open_hours.forEach(function(hour) {
              open_hours += hour + '<br/>';
            });
            jQuery('.stores-list').append(
              '<li>' +
                '<div class="store-address" data-store-lat="' +
                store.location.lat +
                '" data-store-lng="' +
                store.location.lng +
                '">' +
                '<h4>' +
                store.name +
                '</h4>' +
                '<p>' +
                store.street +
                '<br/>' +
                store.city +
                '</p>' +
                '<p>' +
                store.phone +
                '</p><br/>' +
                '<p>' +
                open_hours +
                '</p>' +
                '</div>' +
                '</li>'
            );
          });
          jQuery('.store-address').click(function() {
            Storelocator.zoomStore(jQuery(this).data('store-lat'), jQuery(this).data('store-lng'), zoom);
          });
        },
      })
      .fail(function() {
        Storelocator.showError();
      });
    return result;
  },

  getStoresKML: function() {
    var kmlUrl = jQuery('#kml-url');
    if (RESERVED.getParameterByName('show')) {
      return kmlUrl.data('post-href-all');
    } else {
      return kmlUrl.data('post-href');
    }
  },

  initializeMap: function() {
    let map = document.getElementById('map_canvas');

    if (map) {
      Storelocator.map = new google.maps.Map(map, {
        mapTypeId: google.maps.MapTypeId.ROADMAP,
      });
      var kml = new google.maps.KmlLayer(Storelocator.getStoresKML());
      kml.setMap(Storelocator.map);
    }
  },
};

jQuery(document).ready(function() {
  Storelocator.initEvents();
  Storelocator.initializeMap();
  jQuery('.find-shop-form').submit();
});

jQuery(document).ready(function() {
  function setGtmCookie(value, expireDate) {
    var expires = 'expires=' + expireDate.toUTCString();
    document.cookie = 'uFinPay=' + value + ';' + expires + ';path=/';
  }
  function createGTMEvent(event) {
    var expireDate = new Date();
    if (getCookie('uFinPay')) {
      expireDate.setTime(1970);
      setGtmCookie('', expireDate);
    }
    window.dataLayer = window.dataLayer || [];
    window.dataLayer.push({
      event: 'uFinPay',
      action: 'clickFinPay',
      label: 'finalizeButton',
      finOrderId: event.data.orderId,
    });

    expireDate.setTime(expireDate.getTime() + 24 * 60 * 60 * 1000);
    setGtmCookie(event.data.orderId, expireDate);
  }
  function showDocuments(event) {
    const orderId = event.data.orderId,
      title = event.data.title,
      url = event.data.url;
    event.preventDefault();
    LPP.common.sales.order.history.getOrderDetails(url, orderId, function(response) {
      response
        .text()
        .then(function(documentsList) {
          var popupContentTemplate = jQuery('#documents-popup-template').html(),
            popupContent = '';
          const documentsListJson = JSON.parse(documentsList);
          if (documentsListJson.length) {
            var documentsListTemplate = jQuery('#documents-list-template').html();
            popupContent = Mustache.render(documentsListTemplate, {
              documents: documentsListJson,
            });
          } else {
            var noDocumentsInfoTemplate = jQuery('#documents-list-empty-template').html();
            popupContent = Mustache.render(noDocumentsInfoTemplate, {
              message: global.i18n.no_documents,
            });
          }
          const documentsPopup = Mustache.render(popupContentTemplate, {
            title: title,
            content: popupContent,
          });
          jQuery.colorbox({
            html: documentsPopup,
            width: '520px',
            height: 'auto',
          });
        })
        .catch(function(err) {
          console.error(err);
        });
    });
  }
  jQuery('.order-details').on('click', function() {
    var $this = jQuery(this),
      $orderItemListContainer = $this.parent(),
      $orderDetailsContainer = $this.siblings('.order-item-list-container').children('.order-details-container'),
      orderId = $orderItemListContainer.attr('data-order-id'),
      isOrderDetailsLoaded = $orderItemListContainer.hasClass('loaded');
    if (!isOrderDetailsLoaded) {
      LPP.common.sales.order.history.getOrderDetails('ajx/order/orderDetails', orderId, function(response) {
        response.text().then(function(orderDetailsHtml) {
          $orderItemListContainer.addClass('loaded');
          $orderDetailsContainer.append(orderDetailsHtml);
          var $invoiceButton = $orderDetailsContainer.find('.invoice'),
            $creditMemoButton = $orderDetailsContainer.find('.creditmemo'),
            $finalizePaymentButton = $orderDetailsContainer.find('.finalizePayment'),
            $cancelOrderButton = $orderDetailsContainer.find('a[data-action="cancel_order"]'),
            cancelOrderUrl = $cancelOrderButton.attr('href');
          $invoiceButton.on(
            'click',
            {
              orderId: orderId,
              title: global.i18n.invoices,
              url: 'ajx/order/orderInvoiceList',
            },
            showDocuments
          );
          $finalizePaymentButton.on(
            'click',
            {
              orderId: orderId,
            },
            createGTMEvent
          );
          $creditMemoButton.on(
            'click',
            {
              orderId: orderId,
              title: global.i18n.credit_memos,
              url: 'ajx/order/orderCreditmemoList',
            },
            showDocuments
          );
        });
      });
    }
  });
  jQuery('.order-table-container').on('click', '.actions-btns a[data-action="print"]', function(event) {
    event.preventDefault();
    window.print();
  });
});

// RUN FUNCTIONS AFTER DOM IS READY

window.addEventListener('DOMContentLoaded', function () {
  initMobileShoppingMenu();
  initSearchBar();
  initStoreSwitcher();
  initCustomerAccountView();
  handleAccordions();
});

// RUN FUNCTIONS AFTER PAGE LOAD

window.onload = function () {
  // RUN HANDLERS
  handleValidatingZebraDatePicker();
  handleTouchOnIOS();
};

(function() {
  document.addEventListener('DOMContentLoaded', function() {
    const inputs = document.querySelectorAll('.input-field');
    const departments = document.querySelectorAll('[name="department_saved_id"]');
    const topicsSelect = document.getElementById('topic_id');

    function toggleActiveClass(element, setActive) {
      if (setActive) {
        element.classList.add('active');
      } else if (!element.value.length) {
        element.classList.remove('active');
      }
    }

    function departmentChange(options) {
      for (let key = topicsSelect.options.length - 1; key >= 0; key--) {
        topicsSelect.options.remove(key);
      }

      let index = 0;
      for (let id in options) {
        const label = options[id];
        topicsSelect.options[index] = new Option(label, id);
        index++;
      }

      jQuery('#topic_id').selectric('refresh');
    }

    inputs.forEach(function(input) {
      if (input.value.length !== 0) {
        toggleActiveClass(input, true);
      }

      input.addEventListener('click', function() {
        toggleActiveClass(input, true);
      });
      input.addEventListener('blur', function() {
        toggleActiveClass(input, false);
      });
      input.addEventListener('keydown', function() {
        if (event.keyCode === 9) {
          toggleActiveClass(input, true);
        }
      });
    });

    departments.forEach(function(department) {
      department.addEventListener('change', function() {
        departmentChange(JSON.parse(this.getAttribute('data-options'))[this.value]);
      });
    });

    if (departments.length) {
      departmentChange(JSON.parse(departments[0].getAttribute('data-options'))[departments[0].value]);
    }
  });
})();

LPP.common.tooltip = function(tooltipElId, tooltipText, customClass) {
    this.createOverlay(tooltipElId, tooltipText, customClass);
};

LPP.common.tooltip.prototype.createOverlay = function(tooltipElId, tooltipText, customClass) {
    if (this.tooltipCreated) {
        return;
    }

    this.tooltipElement = document.getElementById(tooltipElId);

    if (!this.tooltipElement) {
        return;
    }

    this.tooltipElement.classList.add(!!customClass ? customClass : 'validationTooltip');

    while (this.tooltipElement.firstChild) {
        this.tooltipElement.removeChild(this.tooltipElement.firstChild);
    }

    this.tooltipElement.appendChild(this.createElWithClass('div', 'toolTipContent', tooltipText));
    this.tooltipEnter = this.tooltipEnter.bind(this);
    this.tooltipLeave = this.tooltipLeave.bind(this);

    this.tooltipElement.addEventListener('mouseover', this.tooltipEnter, false);
    this.tooltipElement.addEventListener('mouseleave', this.tooltipLeave, false);
    this.tooltipCreated = true;
};

LPP.common.tooltip.prototype.appendChild = function (elementsList, errorElements, appendTo) {
    elementsList.forEach(function(elementName) {
        errorElements[appendTo].appendChild(errorElements[elementName]);
    })
};

LPP.common.tooltip.prototype.createElWithClass = function (tag, elementClass, text) {
    var newElement = document.createElement(tag);

    if (elementClass) {
        newElement.classList.add(elementClass);
    }

    if (text) {
        newElement.innerHTML = text;
    }

    return newElement;
};

LPP.common.tooltip.prototype.tooltipEnter = function() {
    this.tooltipElement.classList.add('active');
};

LPP.common.tooltip.prototype.setContent = function(content) {
    this.tooltipElement.childNodes[0].innerText = content;
};

LPP.common.tooltip.prototype.tooltipLeave = function() {
    this.tooltipElement.classList.remove('active');
};